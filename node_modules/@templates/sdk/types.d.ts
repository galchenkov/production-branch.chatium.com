import { Accessor } from '@app/solid-js';
export interface HookParams<Config = any> {
    agentsByType: Record<string, AgentInfo>;
    eventRaw: MetricEvent;
    eventData?: {
        date: Date;
        session?: {
            id?: string;
        };
        user?: {
            id?: string;
            email?: string;
            phone?: string;
        };
        deal?: {
            id?: string;
        };
        params?: Record<string, string | null | undefined>;
    };
    transition: {
        id: string;
        title: string;
        from: string;
        to: string;
        scene: string;
        options: Record<string, any>;
        isRed?: boolean;
    };
    primaryAgent?: AgentInfo;
    templateData: Config;
}
export interface AgentInfo {
    id: string;
    type: string;
    externalId: string;
    isTerminated: boolean;
    props: Record<string, any>;
    mainAgentId: string;
    parentAgentIds: string[];
    displayName: string;
}
export interface MetricEvent {
    uid?: string;
    sid_duration?: number;
    gc_visit_id?: number;
    gc_visitor_id?: number;
    gc_session_id?: number;
    account_id: number;
    account_type: 'Chatium' | 'Getcourse';
    url: string;
    referer?: string;
    user_agent?: string;
    ip?: string;
    title?: string;
    screen_width?: number;
    screen_height?: number;
    screen_pixel_ratio?: number;
    location_country?: string;
    location_region?: string;
    location_time_zone?: string;
    location_city?: string;
    location_coordinates_latitude?: number;
    location_coordinates_longitude?: number;
    ua_client_type?: string;
    ua_client_name?: string;
    ua_client_version?: string;
    ua_device_type?: string;
    ua_device_brand?: string;
    ua_device_model?: string;
    ua_os_name?: string;
    ua_os_version?: string;
    ua_os_platform?: string;
    ua_bot_name?: string;
    ua_bot_category?: string;
    os_name?: string;
    device_name?: string;
    request_type: 'screen' | 'apiCall' | 'get' | 'post';
    auth_id?: number;
    auth_type?: string;
    auth_key?: string;
    auth_first_name?: string;
    auth_last_name?: string;
    auth_lang?: string;
    user_id?: string;
    user_roles?: string[];
    user_account_role?: string;
    user_status?: string;
    user_expires_at?: Date | null;
    user_first_name?: string;
    user_last_name?: string;
    user_icon_image?: string;
    user_phone?: string;
    user_email?: string;
    user_platforms?: string[];
    session_id?: string;
    session_email?: string;
    session_phone?: string;
    fcm_token?: string;
    ts: Date;
    ts64?: number;
    utm_source?: string;
    utm_content?: string;
    utm_medium?: string;
    utm_campaign?: string;
    utm_term?: string;
    action?: string;
    action_params?: string;
    action_param1?: string;
    action_param2?: string;
    action_param3?: string;
    action_param1_float?: number;
    action_param2_float?: number;
    action_param3_float?: number;
    action_param4_float?: number;
    action_param1_int?: number;
    action_param2_int?: number;
    action_param3_int?: number;
    action_param1_arrstr?: string[];
    action_param2_arrstr?: string[];
    action_param3_arrstr?: string[];
    action_param1_uint32arr?: number[] | undefined;
    keys?: string[];
    values?: string[];
    param_clrt?: string;
    clrt_type?: string;
    clrt_campaign_id?: string;
    clrt_ad_id?: string;
}
export interface SettingsComponentProps<Config = any> {
    ctx: app.Ctx;
    fileUrl: string;
    configDataUrl: string;
    submitConfigUrl?: string;
    extraData?: any;
    setOnSave: (func: () => Promise<void>) => void;
    nodeData: Accessor<Config>;
    saveToNode: (data: any) => void;
}
export interface CustomEventVariant {
    title: string;
    eventCode: string;
    incomingEventsFilter?: string;
}
