import { VideoSize } from 'lib/chatium-json/v1'
import { AudioBlock, ImageBlock, VideoBlock } from 'lib/chatium-json/v2'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare type HashMediaType = 'file' | 'video' | 'image' | 'audio'
interface VideoInfo {
  hash: string
  url: string | null
  hlsUrl: string | undefined
  mp4Url: string | undefined
  status: FileServiceResponse['status']
  progress: number
  imageUrl: string
  /** @deprecated always undefined */
  videoSize: VideoSize | undefined
  videoAspectRatio: [number, number] | undefined
}
interface FileServiceResponse {
  status: 'done' | 'processing' | 'error'
  width_aspect_ratio?: number
  height_aspect_ratio?: number
  progress?: number
  kinescopeVideoId?: string | number
  integrosVideoId?: string | number
  cloudflareVideoId?: string | number
}
/**
 * Base class for runtime representation of Heap.File fields.
 */
export declare abstract class StorageFile implements IStorageFile {
  readonly hash: string
  protected abstract readonly fileServiceHost: string
  constructor(hash: string)
  toJSON(): string
  get type(): HashMediaType
  get downloadUrl(): string
}
export interface FileClass {
  new (hash: string): IStorageFile
}
export interface IStorageFile {
  hash: string
  type: HashMediaType
  downloadUrl: string
  toJSON(): string
}
/**
 * Shared things between image and video files
 */
export declare abstract class StorageFileWithSizes extends StorageFile implements IStorageFileWithSizes {
  #private
  get width(): number
  get widthMaybe(): number | undefined
  get height(): number
  get heightMaybe(): number | undefined
  get sizes(): {
    width: number
    height: number
  }
  get sizesMaybe():
    | {
        width: number
        height: number
      }
    | undefined
}
export interface IStorageFileWithSizes extends IStorageFile {
  width: number
  widthMaybe: number | undefined
  height: number
  heightMaybe: number | undefined
  sizes: {
    width: number
    height: number
  }
  sizesMaybe:
    | {
        width: number
        height: number
      }
    | undefined
}
/**
 * Base class for runtime representation of Heap.ImageFile fields.
 */
export declare abstract class StorageImageFile extends StorageFileWithSizes implements IStorageImageFile {
  get type(): 'image'
  getThumbnailUrl(width?: number, height?: number): string
  /**
   * Returns the image's URL and sizes in format accepted by src property of <image> block.
   */
  getThumbnailSrc(width?: number, height?: number): ImageBlock['src']
}
export interface ImageFileClass {
  new (hash: string): IStorageImageFile
}
export interface IStorageImageFile extends IStorageFileWithSizes {
  getThumbnailUrl(width?: number, height?: number): string
  getThumbnailSrc(width?: number, height?: number): ImageBlock['src']
}
/**
 * Base class for runtime representation of Heap.VideoFile fields.
 */
export declare abstract class StorageVideoFile extends StorageFileWithSizes implements IStorageVideoFile {
  #private
  get type(): 'video'
  getThumbnailUrl(width?: number, height?: number, offsetSeconds?: 'auto' | number): string
  /**
   * Returns the video's frame thumbnail URL and sizes in format accepted by src property of <image> block.
   */
  getThumbnailSrc(width?: number, height?: number, offsetSeconds?: 'auto' | number): ImageBlock['src']
  get duration(): number
  get durationMaybe(): number | undefined
  get videoSrc(): Promise<VideoBlock['src']>
  get status(): Promise<'done' | 'processing' | 'error'>
  get progress(): Promise<number>
  protected abstract getVideoInfo(): Promise<VideoInfo>
  private get videoInfo()
}
export interface VideoFileClass {
  new (hash: string): IStorageVideoFile
}
export interface IStorageVideoFile extends IStorageFileWithSizes {
  duration: number
  durationMaybe: number | undefined
  videoSrc: Promise<VideoBlock['src']>
  status: Promise<'done' | 'processing' | 'error'>
  progress: Promise<number>
  getThumbnailUrl(width?: number, height?: number, offsetSeconds?: 'auto' | number): string
  getThumbnailSrc(width?: number, height?: number, offsetSeconds?: 'auto' | number): ImageBlock['src']
}
/**
 * Base class for runtime representation of Heap.AudioFile fields.
 */
export declare abstract class StorageAudioFile extends StorageFile implements IStorageAudioFile {
  #private
  get type(): 'audio'
  get duration(): number
  get durationMaybe(): number | undefined
  get audioSrc(): AudioBlock['src']
}
export interface AudioFileClass {
  new (hash: string): IStorageAudioFile
}
export interface IStorageAudioFile extends IStorageFile {
  duration: number
  durationMaybe: number | undefined
  audioSrc: AudioBlock['src']
}

export {}
