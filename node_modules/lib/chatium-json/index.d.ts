import {
  AudioBlock as LibAudioBlock,
  AudioProps as LibAudioProps,
  Author as LibAuthor,
  ButtonBlock as LibButtonBlock,
  ButtonProps as LibButtonProps,
  CardProps as LibCardProps,
  ChatMessage as LibChatMessage,
  ChatProps as LibChatProps,
  ChatReplyMessage as LibChatReplyMessage,
  ChatiumBlock as LibChatiumBlock,
  ChatiumChildNode as LibChatiumChildNode,
  ChatiumErrorResponse,
  ChatiumJsonId,
  ChatiumResponse as LibChatiumResponse,
  ChatiumScreen as LibChatiumScreen,
  CommonBlockProps as LibCommonBlockProps,
  ContainerStyle,
  FooterBlock as LibFooterBlock,
  FooterProps as LibFooterProps,
  GalleryBlock as LibGalleryBlock,
  GalleryProps as LibGalleryProps,
  HeaderBlock as LibHeaderBlock,
  HeaderButton as LibHeaderButton,
  HeaderFnProps as LibHeaderFnProps,
  HorizontalCardsBlock as LibHorizontalCardsBlock,
  HorizontalCardsProps as LibHorizontalCardsProps,
  ImageBlock as LibImageBlock,
  ImageProps as LibImageProps,
  InlineVideoBlock as LibInlineVideoBlock,
  InlineVideoProps as LibInlineVideoProps,
  ListItemBlock as LibListItemBlock,
  ListItemProps as LibListItemProps,
  OverlayProps as LibOverlayProps,
  ProgressChangeProps as LibProgressChangeProps,
  ScreenResponse as LibScreenResponse,
  ScreenSuccessResponse as LibScreenSuccessResponse,
  SearchBlock as LibSearchBlock,
  SearchProps as LibSearchProps,
  TextBlock as LibTextBlock,
  TextContent as LibTextContent,
  TextProps as LibTextProps,
  VideoBlock as LibVideoBlock,
  VideoProps as LibVideoProps,
} from 'lib/chatium-json/v1'
import {
  BoxBlock,
  HeaderBlock,
  IconBlock,
  IconProps,
  JSONTemplate,
  JSONTemplateRecursive,
  ScreenPropsV2,
  ScreenResponseV2,
  ScreenSuccessResponseV2,
  ShowVideoAction,
} from 'lib/chatium-json/v2'

export interface NavigateAction {
  type: 'navigate'
  url: ActionProperty<string>
  replace?: ActionProperty<boolean>
  openInExternalApp?: ActionProperty<
    | boolean
    | {
        width?: number
        height?: number
        target?: string
      }
  >
  openInModalScreen?: ActionProperty<boolean>
  fullScreenModal?: ActionProperty<boolean>
  /**
   * Continue action chain only when modal screen is dismissed.
   * Normally next actions are executed immediately after navigating.
   * Has effect only in combination with openInModalScreen=true.
   */
  waitForModalDismiss?: ActionProperty<boolean>
  /**
   * Continue action chain only when modal screen is dismissed with truthy goBack.modalResult
   * Has effect only in combination with waitForModalDismiss=true
   * @see GoBackAction.modalResult
   */
  continueOnDismissSuccessOnly?: ActionProperty<boolean>
  /**
   * Actions to be performed after modal screen is dismissed without explicit truthy modalResult
   * Has effect only in combination with waitForModalDismiss=true
   * @see GoBackAction.modalResult
   */
  onModalReject?: ChatiumActions
  openInCurrentScreen?: ActionProperty<boolean>
  openInBrowser?: ActionProperty<boolean>
  resetStack?: ActionProperty<true>
  reload?: ActionProperty<boolean>
}
export declare function navigate(
  inputUrl: string,
  inputOptions?: Omit<NavigateAction, 'type' | 'url'> & QueryParamsOption,
): NavigateAction
export declare type QueryParamsOption = {
  queryParams?: Record<string, string | string[] | undefined | null>
}
export interface ApiCallAction<P = unknown> extends ApiCallOptions {
  type: 'apiCall'
  url: ActionProperty<string>
  apiParams?: P
}
export interface ApiCallOptions {
  confirm?: ActionProperty<string>
  sendPlayerState?: ActionProperty<{
    playerId: string
    apiParamsKey: string
  }>
}
export declare function apiCall<P>(
  inputUrl: string,
  apiParams?: P,
  inputOptions?: ApiCallOptions & QueryParamsOption,
): ApiCallAction<P>
export interface AudioPlayerPlayTrackAction {
  type: 'audioPlayer:playTrack'
  src: ActionProperty<{
    url: string
    durationSeconds?: number
  }>
  title?: ActionProperty<string>
  artworkUrl?: ActionProperty<string>
  artist?: ActionProperty<string>
  album?: ActionProperty<string>
  genre?: ActionProperty<string>
  onNextTrackClick?: ChatiumActions
  onPrevTrackClick?: ChatiumActions
  onAudioEnd?: ChatiumActions
  extraData?: ActionProperty<Record<string, unknown>>
}
export declare function audioPlayerPlayTrack(
  props: Omit<AudioPlayerPlayTrackAction, 'type'>,
): AudioPlayerPlayTrackAction
export interface AudioPlayerTogglePauseAction {
  type: 'audioPlayer:togglePause'
}
export declare function audioPlayerTogglePause(): AudioPlayerTogglePauseAction
export interface AudioPlayerPauseAction {
  type: 'audioPlayer:pause'
}
export declare function audioPlayerPause(): AudioPlayerPauseAction
export interface AudioPlayerPlayAction {
  type: 'audioPlayer:play'
}
export declare function audioPlayerPlay(): AudioPlayerPlayAction
export interface AudioPlayerNextTrackAction {
  type: 'audioPlayer:nextTrack'
}
export declare function audioPlayerNextTrack(): AudioPlayerNextTrackAction
export interface AudioPlayerPrevTrackAction {
  type: 'audioPlayer:prevTrack'
}
export declare function audioPlayerPrevTrack(): AudioPlayerPrevTrackAction
export interface AudioPlayerSeekToAction {
  type: 'audioPlayer:seekTo'
  positionSeconds?: ActionProperty<number>
  offsetSeconds?: ActionProperty<number>
}
export declare function audioPlayerSeekTo(props: Omit<AudioPlayerSeekToAction, 'type'>): AudioPlayerSeekToAction
export interface ConfirmEmailAction {
  type: 'confirmEmail'
}
export declare function confirmEmail(): ConfirmEmailAction
export interface ConfirmPhoneAction {
  type: 'confirmPhone'
}
export declare function confirmPhone(): ConfirmPhoneAction
export interface CopyToClipboardAction {
  type: 'copyToClipboard'
  value: ActionProperty<string>
}
export declare function copyToClipboard(value: ActionProperty<string>): CopyToClipboardAction
export declare enum FeedMessageActionType {
  Reply = 'chat:replyToMessage',
  Edit = 'chat:editMessage',
}
export interface FeedMessageAction {
  type: FeedMessageActionType
  id: string
}
export declare function feedMessage(type: FeedMessageActionType, id: string): FeedMessageAction
export interface GoBackAction {
  type: 'goBack'
  dismissModal?: ActionProperty<boolean>
  /**
   * Has effect only in combination with dismissModal and
   *   navigate { openInModalScreen, waitForModalDismiss, continueOnDismissSuccessOnly }
   * In that case truthy modalResult will lead to continuation of action chain by the client
   *  and skipping navigate.onModalReject actions (if defined)
   * Otherwise any following actions after the modal naviate action will be cancelled,
   *  but navigate.onModalReject actions will be executed (if defined)
   * @see NavigateAction.continueOnDismissSuccessOnly
   */
  modalResult?: ActionProperty<boolean | 'authSuccessful'>
}
export declare function goBack(options?: Omit<GoBackAction, 'type'>): GoBackAction
export interface HorizontalScrollSlideToNextSnapAction {
  type: 'horizontal-scroll:slide-to-next-snap'
  id?: string
}
export declare function horizontalScrollSlideToNextSnap(id?: string): HorizontalScrollSlideToNextSnapAction
export interface HorizontalScrollSlideToPrevSnapAction {
  type: 'horizontal-scroll:slide-to-prev-snap'
  id?: string
}
export declare function horizontalScrollSlideToPrevSnap(id?: string): HorizontalScrollSlideToPrevSnapAction
export interface IapBuyProductAction {
  type: 'iapBuyProduct'
  productId: string
  googlePlayOfferToken?: string
}
export declare function iapBuyProduct(props: Omit<IapBuyProductAction, 'type'>): IapBuyProductAction
export interface IapRestorePurchasesAction {
  type: 'iapRestorePurchases'
}
export declare function iapRestorePurchases(): IapRestorePurchasesAction
export interface IapOpenSubscriptionsSettings {
  type: 'iapOpenSubscriptionsSettings'
}
export declare function iapOpenSubscriptionsSettings(): IapOpenSubscriptionsSettings
export interface IosBuySubscriptionAction {
  type: 'iapBuySubscription'
  subscriptionId: string
}
export declare function iosBuySubscription(subscriptionId: string): IosBuySubscriptionAction
export interface NextSlideAction {
  type: 'gallery:nextSlide'
  galleryId: ActionProperty<string>
}
/**
 * Will not work if the gallery block is not given explicit id
 * @param galleryId - `id` property (blockId) of the target gallery block
 */
export declare function nextSlide(galleryId: ActionProperty<ChatiumJsonId>): NextSlideAction
export interface NoopAction {
  type: 'noop'
}
export declare function noop(): NoopAction
export interface OpenQrCodeScannerAction {
  type: 'openQrCodeScanner'
}
export declare function openQrCodeScannerAction(): OpenQrCodeScannerAction
export declare function openSourceFile(props: Omit<OpenSourceFileAction, 'type'>): OpenSourceFileAction
export interface OpenSourceFileAction {
  type: 'openSourceFile'
  path: string
  line?: number
  character?: number
}
export interface PreloadMediaAction {
  type: 'preloadMedia'
  media: ActionProperty<string[]>
}
export declare function preloadMedia(media: ActionProperty<string[]>): PreloadMediaAction
export interface RefreshAction {
  type: 'refresh'
}
export declare function refresh(): RefreshAction
interface RequestPaymentCloudpayments {
  type: 'requestPayment'
  integration: 'cloudpayments'
  publicId: string
  invoiceId: string
  description: string
  amount: number
  currency:
    | 'RUB'
    | 'EUR'
    | 'USD'
    | 'GBP'
    | 'UAH'
    | 'BYN'
    | 'KZT'
    | 'AZN'
    | 'CHF'
    | 'CZK'
    | 'CAD'
    | 'PLN'
    | 'SEK'
    | 'TRY'
    | 'CNY'
    | 'INR'
    | 'BRL'
    | 'ZAR'
    | 'UZS'
    | 'BGL'
  applePayMerchantId?: string
  onSuccessApiCall?: ApiCallAction
  fallbackUrl?: string
}
export declare function requestPaymentCloudpayments(
  props: Omit<RequestPaymentCloudpayments, 'type' | 'integration'>,
): RequestPaymentAction
export declare type RequestPaymentAction = RequestPaymentCloudpayments
export declare type RequestPaymentIntegration = 'cloudpayments' | 'yandexkassa' | 'qiwip2p' | 'iap' | 'stripe'
export declare const requestPaymentIntegrationScheme: import('fluent-schema').S
export declare function humanizePaymentIntegration(integration: RequestPaymentIntegration): string
export declare function paymentIntegrationLogoUrl(integration: RequestPaymentIntegration): string
export declare function resetForm(props: Omit<ResetFormAction, 'type'>): ResetFormAction
export interface ResetFormAction {
  type: 'resetForm'
  formId?: ActionProperty<string>
  confirm?: ActionProperty<string>
}
export interface ResetSearchAction {
  type: 'resetSearch'
}
export declare function resetSearch(): ResetSearchAction
export interface ScrollToTopAction {
  type: 'scrollToTop'
}
export declare function scrollToTop(): ScrollToTopAction
export interface SelectContactsAction {
  type: 'selectContacts'
  url: ActionProperty<string>
}
export declare function selectContacts(url: ActionProperty<string>): SelectContactsAction
export interface SelectContactsContact {
  recordID: string
  phoneNumber: {
    label: string
    number: string
  }
  familyName: string
  givenName: string
  middleName: string
}
export declare function setFormInputValue(props: Omit<SetFormInputValueAction, 'type'>): SetFormInputValueAction
export interface SetFormInputValueAction {
  type: 'setFormInputValue'
  formId?: ActionProperty<string>
  name: ActionProperty<string>
  value: ActionProperty<unknown>
  confirm?: ActionProperty<string>
}
export interface ShareTextAction {
  type: 'shareText'
  text: ActionProperty<string>
  title?: ActionProperty<string>
}
export declare function shareText(props: Omit<ShareTextAction, 'type'>): ShareTextAction
export interface ShowContextMenuAction {
  type: 'showContextMenu'
  title?: ActionProperty<string>
  menu: JSONTemplate<ContextMenuItem[]>
}
export interface ContextMenuItem {
  title: ActionProperty<string>
  onClick: ChatiumActions
}
export declare type ContextMenuValidArg = JSONTemplate<ContextMenuItem | null | undefined | false | 0>
export declare function showContextMenu(
  menuOrProps: ContextMenuValidArg[] | Omit<ShowContextMenuAction, 'type'>,
): ShowContextMenuAction
interface ShowDialogCommon {
  type: 'showDialog'
  title?: ActionProperty<string>
  description?: ActionProperty<string>
  submitUrl: ActionProperty<string>
  submitData?: ActionProperty<Record<string, unknown>>
  submitButtonTitle?: ActionProperty<string>
  cancelButtonTitle?: ActionProperty<string>
}
export interface ShowTextDialogAction extends ShowDialogCommon {
  inputType: ActionProperty<'text' | 'code'>
  placeholder?: ActionProperty<string>
  multiline?: ActionProperty<boolean>
  value?: ActionProperty<string>
  inputmode?: ActionProperty<'text' | 'decimal' | 'tel' | 'email' | 'url' | 'password'>
}
export declare function showTextDialog(options: Omit<ShowTextDialogAction, 'type' | 'inputType'>): ShowTextDialogAction
export interface ShowDateDialogAction extends ShowDialogCommon {
  inputType: 'date'
  minDate?: ActionProperty<string>
  maxDate?: ActionProperty<string>
}
export interface ShowDateAndTimeDialogAction
  extends Omit<ShowDateDialogAction, 'inputType'>,
    Pick<ShowTimeDialogAction, 'minuteInterval'> {
  inputType: 'datetime'
}
export interface ShowTimeDialogAction extends ShowDialogCommon {
  inputType: ActionProperty<'time'>
  minuteInterval?: ActionProperty<1 | 2 | 3 | 4 | 5 | 6 | 10 | 12 | 15 | 20 | 30>
}
export declare type ShowDateTimeDialogAction = ShowDateDialogAction | ShowDateAndTimeDialogAction | ShowTimeDialogAction
export declare function showDateTimeDialog(
  options: Omit<ShowDateAndTimeDialogAction, 'type' | 'inputType'> | Omit<ShowDateTimeDialogAction, 'type'>,
): ShowDateTimeDialogAction
export interface ShowToastAction {
  type: 'showToast'
  toast: ActionProperty<string>
}
export declare function showToast(toast: string): ShowToastAction
export interface SignOutAction extends SignOutOptions {
  type: 'signOut'
}
export declare function signOut(options?: SignOutOptions): SignOutAction
interface SignOutOptions {
  confirm?: ActionProperty<string>
}
declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
export declare type SetScreenStateAction = {
  type: 'screenState:set'
  name: JSONTemplate<string>
  value: JSONValue
}
export declare function setScreenState(name: JSONTemplate<string>, value: JSONValue): SetScreenStateAction
export declare type SetAppStateAction = {
  type: 'appState:set'
  name: JSONTemplate<string>
  value: JSONValue
}
export declare function setAppState(name: JSONTemplate<string>, value: JSONValue): SetAppStateAction
export declare function submitForm(props: Omit<SubmitFormAction, 'type'>): SubmitFormAction
export interface SubmitFormAction {
  type: 'submitForm'
  formId?: ActionProperty<string>
  url: ActionProperty<string>
  params?: ActionProperty<Record<string, unknown>>
  confirm?: ActionProperty<string>
}
export interface UpdateCurrentScreenBlock<P = unknown> {
  type: 'updateCurrentScreenBlock'
  blockId: ChatiumJsonId
  merge?: boolean
  update: P
}
export declare function updateCurrentScreenBlock<P>(
  blockId: string,
  update: P,
  merge?: boolean,
): UpdateCurrentScreenBlock<P>
declare type ChatiumActionUnion =
  | string
  | ApiCallAction
  | AttachMediaAction
  | ConfirmPhoneAction
  | ConfirmEmailAction
  | CopyToClipboardAction
  | GoBackAction
  | NavigateAction
  | NextSlideAction
  | NoopAction
  | PreloadMediaAction
  | RefreshAction
  | ResetSearchAction
  | RequestPaymentAction
  | SelectContactsAction
  | ShowContextMenuAction
  | ShowDateTimeDialogAction
  | ShowTextDialogAction
  | ShowToastAction
  | UpdateCurrentScreenBlock
  | FeedMessageAction
  | IosBuySubscriptionAction
  | OpenQrCodeScannerAction
  | OpenSourceFileAction
  | ResetFormAction
  | SetFormInputValueAction
  | ShowVideoAction
  | SignOutAction
  | SubmitFormAction
  | HorizontalScrollSlideToNextSnapAction
  | HorizontalScrollSlideToPrevSnapAction
  | ShareTextAction
  | AudioPlayerPlayTrackAction
  | AudioPlayerPrevTrackAction
  | AudioPlayerNextTrackAction
  | AudioPlayerPauseAction
  | AudioPlayerPlayAction
  | AudioPlayerSeekToAction
  | AudioPlayerTogglePauseAction
  | SetScreenStateAction
  | SetAppStateAction
  | ScrollToTopAction
  | IapBuyProductAction
  | IapOpenSubscriptionsSettings
  | IapRestorePurchasesAction
export declare type ChatiumAction = ChatiumActionUnion | JSONTemplate<ChatiumActionUnion>
export declare type ChatiumActions = ChatiumAction | ChatiumAction[]
export declare type ActionProperty<T> = JSONTemplateRecursive<T>
export declare type MediaType = 'any' | 'photo' | 'video' | 'none'
export declare const MediaType: {
  readonly Any: 'any'
  readonly Photo: 'photo'
  readonly Video: 'video'
  readonly None: 'none'
}
export interface AttachMediaAction {
  type: 'attachMedia'
  menuTitle?: ActionProperty<string>
  progressTitle?: ActionProperty<string>
  multiple?: ActionProperty<boolean>
  mediaType?: ActionProperty<MediaType>
  filePutUrl?: ActionProperty<string>
  getPutUrl?: ActionProperty<string>
  submitUrl: ActionProperty<string>
  file?: ActionProperty<{
    type: MobileFileTypeGroup | MobileFileTypeGroup[]
  }>
  maxFileSize?: number
}
export declare type MobileFileTypeGroup =
  | 'allFiles'
  | 'audio'
  | 'csv'
  | 'images'
  | 'plainText'
  | 'pdf'
  | 'video'
  | 'zip'
export declare function attachMedia(props: Omit<AttachMediaAction, 'type'>): AttachMediaAction
declare type MessageSticker = {
  url: string
  previewUrl?: string
  emoji?: string[]
}
interface FieldBlock extends CommonBlockProps {
  type: 'field'
  input: InputType
  name: string
  inputProps?: Record<string, unknown>
  label?: string
  value?: string | null | Record<string, unknown>
}
declare type InputType =
  | 'String'
  | 'Integer'
  | 'Text'
  | 'Color'
  | 'Money'
  | 'Entity'
  | 'Checkbox'
  | 'Select'
  | 'Image'
  | 'ItemList'
  | 'Config'
  | 'Enum'
  | 'Json'
  | 'TypeScript'
  | 'Code'
declare type MessageBlock = MessageProps &
  ChatMessage & {
    type: 'message'
    blocks?: ChatiumBlockV1[]
  }
declare type MessageProps = {
  onClick?: ChatiumActions
} & CommonBlockProps
declare type TemporaryInboxListItemBlock = ListItemBlockV1 & {
  gcAccountId?: number
}
declare type BackendBlocks =
  | BoxBlock
  | FieldBlock
  | MessageBlock
  | TemporaryInboxListItemBlock
  | IconBlock
  | HeaderBlock
export declare const jsx: {
  <P>(
    block: string | import('./v1/utils/jsx').BlockFactory<unknown, P>,
    props: object | P,
    ...children: unknown[]
  ): unknown
  Fragment: typeof import('lib/chatium-json/v1').Fragment
}
export interface GallerySlide {
  id?: ChatiumJsonId
  blocks?: ChatiumBlockV1[]
  content?: ChatiumBlockV1
  overlay?: OverlayProps
  containerStyle?: ContainerStyle
  stretchContent?: boolean
  onBecomeVisible?: ChatiumAction[]
  onVideoEnd?: ChatiumActions
  onContext?: ChatiumActions
}
export declare function SlidesGallery(props: GalleryProps, slides: GallerySlide[]): Promise<GalleryBlock>
export declare type ChatiumBlockV1 = LibChatiumBlock<BackendBlocks>
export declare type ChatiumChildNode = LibChatiumChildNode<BackendBlocks>
export declare type CommonBlockProps = LibCommonBlockProps<BackendBlocks>
export declare type AudioBlock = LibAudioBlock<BackendBlocks>
export declare type AudioProps = LibAudioProps<BackendBlocks>
export declare const Audio: (props: AudioProps) => AudioBlock
export declare type ButtonBlock = LibButtonBlock<BackendBlocks>
export declare type ButtonProps = LibButtonProps<BackendBlocks>
export declare const Button: (props: ButtonProps) => ButtonBlock
export declare type FooterBlock = LibFooterBlock<BackendBlocks>
export declare type FooterProps = LibFooterProps<BackendBlocks>
export declare const Footer: (props: FooterProps, ...children: ChatiumChildNode[]) => Promise<FooterBlock>
export declare type GalleryBlock = LibGalleryBlock<BackendBlocks>
export declare type GalleryProps = LibGalleryProps<BackendBlocks>
export declare const Gallery: (props: GalleryProps, ...children: ChatiumChildNode[]) => Promise<GalleryBlock>
export declare type HeaderBlock = LibHeaderBlock<BackendBlocks>
export declare type HeaderFnProps = LibHeaderFnProps<BackendBlocks>
export declare const Header: (props: HeaderFnProps, ...children: ChatiumChildNode[]) => Promise<HeaderBlock>
export declare type CardProps = LibCardProps
export declare const Card: (props: CardProps) => CardProps
export declare type HorizontalCardsBlock = LibHorizontalCardsBlock<BackendBlocks>
export declare type HorizontalCardsProps = LibHorizontalCardsProps<BackendBlocks>
export declare const HorizontalCards: (props: HorizontalCardsProps) => HorizontalCardsBlock
export declare type ImageBlock = LibImageBlock<BackendBlocks>
export declare type ImageProps = LibImageProps<BackendBlocks>
export declare const Image: (props: ImageProps) => ImageBlock
export declare type ListItemBlockV1 = LibListItemBlock<BackendBlocks>
export declare type ListItemPropsV1 = LibListItemProps<BackendBlocks>
export declare const ListItemV1: (props: ListItemPropsV1) => ListItemBlockV1
export declare type SearchBlock = LibSearchBlock<BackendBlocks>
export declare type SearchProps = LibSearchProps<BackendBlocks>
export declare const Search: (props: SearchProps) => SearchBlock
export declare type TextBlock = LibTextBlock<BackendBlocks>
export declare type TextProps = LibTextProps<BackendBlocks>
export declare type TextContent = LibTextContent
export declare const Text: (props: TextProps, ...children: ChatiumChildNode[]) => Promise<TextBlock>
export declare type InlineVideoBlock = LibInlineVideoBlock<BackendBlocks>
export declare type InlineVideoProps = LibInlineVideoProps<BackendBlocks>
export declare const InlineVideo: (props: InlineVideoProps) => InlineVideoBlock
export declare type ProgressChangeProps = LibProgressChangeProps
export declare type VideoBlock = LibVideoBlock<BackendBlocks>
export declare type VideoProps = LibVideoProps<BackendBlocks>
export declare const Video: (props: VideoProps) => VideoBlock
export declare type ChatiumScreen = ChatiumScreenV1 | ScreenPropsV2
export declare type ChatiumScreenV1 = LibChatiumScreen<BackendBlocks>
export declare type HeaderButton = LibHeaderButton<BackendBlocks>
export declare type OverlayProps = LibOverlayProps<BackendBlocks>
export declare type Author = LibAuthor
export declare type ChatProps = LibChatProps
export declare type ChatMessage = LibChatMessage & {
  sticker?: MessageSticker | null
}
export declare type ChatReplyMessage = LibChatReplyMessage
export declare type ChatiumResponse = LibChatiumResponse<BackendBlocks> | ScreenResponseV2
export declare type ApiCallResponse = ApiCallSuccessResponse | ApiCallErrorResponse
export interface ApiCallErrorResponse extends ChatiumErrorResponse, ApiCallResponseFields {}
export interface ApiCallSuccessResponse extends ApiCallResponseFields {
  success: true
}
export interface ApiCallResponseFields {
  appAction?: ChatiumActions
  appScreens?: Record<string, ChatiumScreen>
}
export declare type ScreenResponse = LibScreenResponse<BackendBlocks> | ScreenResponseV2
export declare type ScreenSuccessResponse = LibScreenSuccessResponse<BackendBlocks> | ScreenSuccessResponseV2
interface LayoutBottomTabs {
  tabs?: LayoutMenuItem[]
  activeTintColor?: string
  inactiveTintColor?: string
}
interface LayoutMenuItem {
  id?: string
  type: 'tab' | 'button'
  title?: string
  url?: string
  onClick?: ChatiumActions
  icon: IconProps
  key?: string
}

export {}
