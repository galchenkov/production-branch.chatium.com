import { ChatiumActions, SubmitFormAction } from 'lib/chatium-json'
import { ChatiumErrorResponse, ChatiumJsonId, ChatiumJsonKey, Color } from 'lib/chatium-json/v1'

export declare type JSONTemplateCondition =
  | string
  | number
  | {
      $or: Array<JSONTemplateCondition>
    }
  | {
      $and: Array<JSONTemplateCondition>
    }
  | {
      [key: string]: JSONTemplateCondition | null
    }
declare type JSONTemplate$IF<T> = {
  $if: JSONTemplateCondition
  $then?: JSONTemplate<T>
  $else?: JSONTemplate<T>
}
declare type JSONTemplate$VAR = {
  $var: JSONTemplateCondition
}
export declare type JSONTemplate<T> = T | JSONTemplate$IF<T> | JSONTemplate$VAR
export declare type JSONTemplatableObject<T> = {
  [Property in keyof T]: JSONTemplatableValue<T[Property]>
}
export declare type JSONTemplatableValue<T> = unknown extends T
  ? JSONTemplate<T>
  : [T] extends [Scalar]
  ? JSONTemplate<T>
  : T extends AnyTuple
  ? JSONTemplatableObject<T>
  : T extends Array<infer Value>
  ? Array<JSONTemplatableValue<Value>>
  : T extends object
  ? JSONTemplatableObject<T> | JSONTemplate<JSONTemplatableObject<T>>
  : JSONTemplate<T>
export declare type JSONTemplateRecursive<T> = JSONTemplatableValue<T>
declare type NumericLiteral = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10
declare type AnyTuple = {
  [index: string]: any
} & {
  length: NumericLiteral
}
declare type Scalar = string | number | boolean | null | undefined
export declare function isJSONTemplate<T>(arg: JSONTemplate<T>): arg is JSONTemplate$IF<T> | JSONTemplate$VAR
declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
export declare type SpacingValue =
  | number
  | 'safeAreaInsetTop'
  | 'safeAreaInsetRight'
  | 'safeAreaInsetBottom'
  | 'safeAreaInsetLeft'
  | 'smartMinTopSpacing'
  | 'headerInsetTop'
export interface PaddingStyle {
  padding?:
    | SpacingValue
    | [SpacingValue, SpacingValue]
    | [SpacingValue, SpacingValue, SpacingValue]
    | [SpacingValue, SpacingValue, SpacingValue, SpacingValue]
  paddingVertical?: SpacingValue
  paddingHorizontal?: SpacingValue
  paddingLeft?: SpacingValue
  paddingRight?: SpacingValue
  paddingTop?: SpacingValue
  paddingBottom?: SpacingValue
}
export interface MarginStyle {
  margin?:
    | SpacingValue
    | [SpacingValue, SpacingValue]
    | [SpacingValue, SpacingValue, SpacingValue]
    | [SpacingValue, SpacingValue, SpacingValue, SpacingValue]
  marginVertical?: SpacingValue
  marginHorizontal?: SpacingValue
  marginLeft?: SpacingValue
  marginRight?: SpacingValue
  marginTop?: SpacingValue
  marginBottom?: SpacingValue
}
export interface BorderStyle extends BorderStyleNoRadius, BorderRadiusStyle {}
export interface BorderStyleNoRadius extends BorderColorStyle, BorderStyleStyle, BorderWidthStyle {
  border?: [BorderWidth, BorderStyles, Color]
  borderBottom?: BorderShortDef
  borderLeft?: BorderShortDef
  borderRight?: BorderShortDef
  borderTop?: BorderShortDef
}
export declare type BorderShortDef = [BorderWidth, Color]
export interface BorderStyleStyle {
  borderStyle?: BorderStyles
}
declare type BorderStyles = 'solid' | 'dotted' | 'dashed'
export interface BorderRadiusStyle {
  borderBottomLeftRadius?: number
  borderBottomRightRadius?: number
  borderRadius?: number | [number, number, number, number]
  borderTopLeftRadius?: number
  borderTopRightRadius?: number
}
export interface BorderWidthStyle {
  borderBottomWidth?: BorderWidth
  borderLeftWidth?: BorderWidth
  borderRightWidth?: BorderWidth
  borderTopWidth?: BorderWidth
  borderWidth?:
    | BorderWidth
    | [BorderWidth, BorderWidth]
    | [BorderWidth, BorderWidth, BorderWidth]
    | [BorderWidth, BorderWidth, BorderWidth, BorderWidth]
}
export declare type BorderWidth = 'hairline' | number
export interface BorderColorStyle {
  borderBottomColor?: Color
  borderLeftColor?: Color
  borderRightColor?: Color
  borderTopColor?: Color
  borderColor?: Color | [Color, Color] | [Color, Color, Color] | [Color, Color, Color, Color]
}
export interface BoxPositionStyle {
  bottom?: PxOrPercentOrAuto
  left?: PxOrPercentOrAuto
  position?: 'absolute' | 'relative'
  right?: PxOrPercentOrAuto
  top?: PxOrPercentOrAuto
}
export declare type BoxSizingStyle = BoxSizingWidthStyle & BoxSizingHeightStyle
export interface BoxSizingWidthStyle {
  width?: PxOrPercentOrAuto
  maxWidth?: PxOrPercentOrAuto
  minWidth?: PxOrPercentOrAuto
}
export interface BoxSizingHeightStyle {
  height?: PxOrPercentOrAuto
  maxHeight?: PxOrPercentOrAuto
  minHeight?: PxOrPercentOrAuto
}
export interface BoxOverflowStyle {
  overflow?: 'visible' | 'hidden'
}
export interface BoxPointerEventsStyle {
  pointerEvents?: 'auto' | 'none' | 'box-none' | 'box-only'
}
export declare type SimpleBgColorStyle = BackgroundColorStyle & OpacityStyle
export interface BackgroundColorStyle {
  backgroundColor?: Color
}
export interface OpacityStyle {
  opacity?: number
}
export interface ColorStyle {
  color?: Color
}
export interface BackgroundGradientStyle {
  backgroundGradient?: [GradientDirection, ...GradientColor[]] | GradientColor[]
}
declare type GradientColor = Color | [Color, number]
declare type GradientDirection = 'to right' | 'to left' | 'to bottom' | 'to top' | number
export declare type BoxColorStyle = SimpleBgColorStyle & BackgroundGradientStyle
export interface BackgroundImageStyle {
  backgroundImage?: string
  backgroundPosition?:
    | BgPosition
    | 'center'
    | [PxOrPercent, PxOrPercent]
    | [BgPosition, PxOrPercent, BgPosition, PxOrPercent]
  backgroundRepeat?: 'no-repeat' | 'repeat'
  backgroundSize?: 'cover' | 'contain' | 'stretch' | PxOrPercent | [PxOrPercent, PxOrPercent]
}
declare type BgPosition = 'left' | 'right' | 'top' | 'bottom'
declare type PxOrPercent = number | string
declare type PxOrPercentOrAuto = PxOrPercent | 'auto'
/**
 * @see https://yogalayout.com/docs/
 */
export interface FlexStyle extends FlexContainerStyle, SelfAlignFlexStyle, SelfFlexStyle {}
export interface FlexContainerStyle {
  alignContent?: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'space-between' | 'space-around'
  alignItems?: FlexAlignType
  flexDirection?: 'row' | 'column' | 'row-reverse' | 'column-reverse'
  flexWrap?: 'wrap' | 'nowrap' | 'wrap-reverse'
  justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'
}
export interface SelfAlignFlexStyle {
  alignSelf?: 'auto' | FlexAlignType
}
export interface SelfFlexStyle {
  flex?: number
  flexBasis?: 'auto' | PxOrPercent
  flexGrow?: number
  flexShrink?: number
}
export declare type FlexAlignType = 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline'
/**
 * @see https://reactnative.dev/docs/text-style-props
 */
export interface TextStyle {
  color?: Color
  fontFamily?: 'serif' | 'sans' | 'mono' | string
  fontSize?: number | StandardFontSize
  fontStyle?: 'normal' | 'italic'
  fontWeight?: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'
  fontVariant?: ('normal' | 'tabular-nums')[]
  letterSpacing?: 'normal' | number
  lineClamp?: number
  lineHeight?: 'normal' | number
  textAlign?: 'auto' | 'left' | 'right' | 'center' | 'justify'
  textAlignVertical?: 'top' | 'center' | 'bottom'
  textDecorationLine?: 'none' | 'underline' | 'line-through' | 'underline line-through'
  textOverflow?: 'clip' | 'ellipsis'
  textShadowColor?: Color
  textShadowOffset?: {
    width: number
    height: number
  }
  textShadowRadius?: number
  textTransform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize'
}
export declare type StandardFontSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'
export interface TransformStyle {
  transform?: (
    | PerspectiveTransform
    | RotateTransform
    | RotateXTransform
    | RotateYTransform
    | RotateZTransform
    | ScaleTransform
    | ScaleXTransform
    | ScaleYTransform
    | TranslateXTransform
    | TranslateYTransform
    | SkewXTransform
    | SkewYTransform
    | MatrixTransform
  )[]
}
/**
 * Shadow style only applies if container has non-transparent background color
 */
export interface ShadowStyle {
  elevation?:
    | null
    | 0
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23
    | 24
  shadowColor?: Color
}
interface PerspectiveTransform {
  perspective: number
}
interface RotateTransform {
  rotate: number | string
}
interface RotateXTransform {
  rotateX: number | string
}
interface RotateYTransform {
  rotateY: number | string
}
interface RotateZTransform {
  rotateZ: number | string
}
interface ScaleTransform {
  scale: number
}
interface ScaleXTransform {
  scaleX: number
}
interface ScaleYTransform {
  scaleY: number
}
interface TranslateXTransform {
  translateX: number
}
interface TranslateYTransform {
  translateY: number
}
interface SkewXTransform {
  skewX: string
}
interface SkewYTransform {
  skewY: string
}
interface MatrixTransform {
  matrix: [number, number, number, number, number, number]
}
export declare type SingleOrArray<T> = T | T[]
export declare type PlainOrPromise<T> = T | Promise<T>
declare type SingleOrArrayRecursive<T> = T | T[] | Array<SingleOrArrayRecursive<T>>
export declare type SingleOrArrayRecursiveNullable<T> = SingleOrArrayRecursive<T | null | undefined | false>
export declare type TextOrBlock = JSONTemplate<string | number | null | undefined | ChatiumBlockV2>
export declare type BlockClass<T> = SingleOrArrayRecursiveNullable<JSONTemplateRecursive<T>>
export declare type BlockStyle<T> = SingleOrArrayRecursiveNullable<JSONTemplateRecursive<T>>
export declare type BlockProperty<T> = JSONTemplateRecursive<T>
export declare type BlockActions = ChatiumActions
export declare function isChatiumActions(val: any): val is ChatiumActions
export interface CommonBlockProps {
  /**
   * Helps client-side rendering optimization
   * Auto-generated using consistent compact algorithm, but can be provided by developer manually
   * When provided by developer manually, should be unique only on local level
   *  and is augmented/modified automatically to be unique on screen level
   */
  key?: ChatiumJsonKey
  /**
   * The main meaning is block unique ID
   * This is also translated to client-side key of component, but is slightly different than key itself:
   *  1) It's not auto-generated
   *  2) Is passed without any modifications, uniqueness must be provided by the developer
   *  3) Due to (2) can be used for actions that require some manipulations pointing to the exact block
   */
  id?: ChatiumJsonId
  /**
   * Allows to conditionally render this block based on state condition
   */
  $if?: JSONTemplateCondition
}
export declare function Audio(props: AudioProps): AudioBlock
export interface AudioBlock extends AudioProps {
  type: 'audio'
}
export interface AudioProps extends CommonBlockProps {
  src: BlockProperty<{
    url: string
    durationSeconds?: number
  }>
  title?: BlockProperty<string>
  subTitle?: BlockProperty<string>
  class?: BlockClass<AudioClasses>
  style?: BlockStyle<AudioProps.Style>
  onContext?: BlockActions
}
export declare namespace AudioProps {
  type Style = AudioStyle
}
declare type AudioClasses = 'section'
declare type AudioStyle = MarginStyle &
  BorderStyle &
  SelfFlexStyle &
  SelfAlignFlexStyle &
  BoxPositionStyle &
  BoxSizingStyle &
  BoxColorStyle &
  ColorStyle &
  PaddingStyle &
  ShadowStyle
export declare function flattenChildren(children: ChatiumChildNode[]): Promise<ChatiumBlockV2[]>
export declare function flattenChildren(children: ChatiumChildNode): Promise<ChatiumBlockV2>
export declare type ChatiumChildNode = SyncNode | Promise<SyncNode>
declare type SyncNode = JSONTemplate<SingleNode> | Array<JSONTemplate<SingleNode>>
declare type SingleNode = ChatiumBlockV2 | null | undefined | false | 0 | ''
export declare type RenderChildrenFn = (children: any) => Promise<any>
export declare function getRenderChildrenFn(_renderContext: any): RenderChildrenFn
export declare function Box(this: unknown, props: BoxAsyncProps, ...children: ChatiumChildNode[]): Promise<BoxBlock>
export declare type BoxAsyncProps = Omit<BoxProps, 'blocks'> & {
  blocks?: ChatiumChildNode[]
}
export interface BoxBlock extends BoxProps {
  type: 'box'
}
export interface BoxProps extends CommonBlockProps {
  style?: BlockStyle<BoxProps.Style>
  class?: BlockClass<'section' | 'absoluteFill'>
  onClick?: BlockActions
  onContext?: BlockActions
  blocks?: ChatiumBlockV2[]
}
export declare namespace BoxProps {
  type Style = BoxStyle & BoxStateStyle
}
export interface BoxStateStyle {
  active?: Pick<BoxStyle, 'backgroundColor' | 'opacity'>
}
export declare type BoxStyle = BorderStyle &
  BoxColorStyle &
  BoxPositionStyle &
  BoxSizingStyle &
  BoxOverflowStyle &
  BoxPointerEventsStyle &
  FlexStyle &
  MarginStyle &
  PaddingStyle &
  TransformStyle &
  ShadowStyle
export declare function Icon(props: IconProps): IconBlock
export interface IconBlock extends IconProps {
  type: 'icon'
}
export interface IconProps extends CommonIconProps {
  style?: BlockStyle<IconProps.Style>
  name: BlockProperty<PlainIconName>
}
export declare namespace IconProps {
  type Style = IconStyle & CommonIconStateStyle
}
export declare type PlainIconName =
  | string
  | [IconFamily, string]
  | ['spinner', SpinnerName]
  | ['system', SystemIconName]
export declare type IconFamily = 'fab' | 'far' | 'fas'
declare type IconStyle = CommonIconStyle & {
  color?: Color
}
export declare type SpinnerName =
  | 'plane'
  | 'chase'
  | 'bounce'
  | 'wave'
  | 'pulse'
  | 'flow'
  | 'swing'
  | 'circle'
  | 'circle-fade'
  | 'grid'
  | 'fold'
  | 'wander'
export declare type SystemIconName =
  | 'android-back'
  | 'close'
  | 'dots'
  | 'fast-forward-10'
  | 'fullscreen'
  | 'fullscreen-exit'
  | 'ios-back'
  | 'pause'
  | 'play-arrow'
  | 'replay'
  | 'rewind-10'
  | 'settings'
export interface CommonIconProps extends CommonBlockProps {
  size?: BlockProperty<IconSize>
  onClick?: BlockActions
  onContext?: BlockActions
}
export declare type IconSize = IconSizePreset | number
export declare type IconSizePreset = 'sm' | 'md' | 'lg' | 'xl' | '2xl'
export declare type CommonIconStyle = BorderStyle &
  SimpleBgColorStyle &
  ShadowStyle &
  BoxPositionStyle &
  MarginStyle &
  PaddingStyle &
  SelfAlignFlexStyle &
  TransformStyle
export interface CommonIconStateStyle {
  active?: Pick<IconStyle, 'backgroundColor' | 'opacity'>
}
export declare function Button(
  this: unknown,
  props?: ButtonAsyncProps,
  ...children: ChatiumChildNode[] | [string | number]
): Promise<ButtonBlock>
export interface ButtonBlock extends ButtonProps {
  type: 'button'
}
export interface ButtonAsyncProps extends Omit<ButtonProps, 'backgroundBlocks' | 'title'> {
  backgroundBlocks?: ChatiumChildNode[]
  title?: SingleOrArray<PlainOrPromise<ChatiumBlockV2> | string | number> | string | number
}
/**
 * Button contents render order from left to right:
 *  1) backgroundBlocks
 *  2) leftIcon
 *  3) title
 *  4) rightIcon
 */
export interface ButtonProps extends CommonBlockProps {
  title?: SingleOrArray<TextOrBlock>
  class?: BlockClass<ButtonClass>
  style?: BlockStyle<ButtonProps.Style>
  progressIcon?: Partial<IconProps>
  backgroundBlocks?: ChatiumBlockV2[]
  leftIcon?: IconProps
  rightIcon?: IconProps
  onClick?: BlockActions
  onContext?: BlockActions
}
export declare namespace ButtonProps {
  type Style = ButtonStyle & ButtonStateStyle
}
interface ButtonStateStyle {
  active?: Pick<ButtonStyle, 'backgroundColor' | 'color' | 'opacity'>
}
declare type ButtonStyle = BoxStyle & TextStyle
declare type ButtonClass =
  | 'section'
  | 'primary'
  | 'secondary'
  | 'success'
  | 'danger'
  | 'warning'
  | 'info'
  | 'light'
  | 'dark'
  | 'link'
export declare function Footer(
  this: unknown,
  props: FooterAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<FooterBlock>
export interface FooterAsyncProps extends Omit<FooterProps, 'blocks'> {
  blocks?: ChatiumChildNode[]
}
export interface FooterBlock extends FooterProps {
  type: 'footer'
}
export interface FooterProps extends Omit<BoxProps, 'style' | 'class'> {
  style?: BlockStyle<FooterProps.Style>
  class?: BlockClass<'standard'>
  stickToKeyboard?: BlockProperty<boolean>
  disableSafeAreaPadding?: BlockProperty<boolean>
}
export declare namespace FooterProps {
  type Style = FooterStyle & BoxStateStyle
}
export declare type FooterStyle = BorderStyle &
  ShadowStyle &
  BoxColorStyle &
  Pick<BoxSizingStyle, 'height' | 'maxHeight' | 'minHeight'> &
  FlexContainerStyle &
  Pick<MarginStyle, 'marginHorizontal' | 'marginLeft' | 'marginRight' | 'marginTop'> &
  PaddingStyle
export declare function isFooterBlock(value: any): value is FooterProps
export declare function Header(
  this: unknown,
  props: HeaderAsyncProps,
  ...children: ChatiumChildNode[] | [string | number]
): Promise<HeaderBlock>
export interface HeaderBlock extends HeaderProps {
  type: 'header'
}
export interface HeaderAsyncProps extends Omit<HeaderProps, 'title' | 'subTitle'> {
  title?: SingleOrArray<PlainOrPromise<ChatiumBlockV2>> | string | number
  subTitle?: PlainOrPromise<TextOrBlock>
}
export interface HeaderProps extends CommonBlockProps {
  mode?: BlockProperty<'opaque' | 'parallax' | 'transparent' | 'disabled'>
  style?: BlockStyle<HeaderProps.Style>
  transparentStyle?: BlockStyle<BoxColorStyle & ColorStyle>
  title?: SingleOrArray<TextOrBlock>
  subTitle?: TextOrBlock
  leftOnClick?: BlockActions
  leftGoBackButton?: ButtonProps
  rightButton?: ButtonProps
}
export declare namespace HeaderProps {
  type Style = BoxColorStyle & TextStyle & ShadowStyle
}
export declare function HiddenInput(props: HiddenInputProps): HiddenInputBlock
export interface HiddenInputBlock extends HiddenInputProps {
  type: 'hidden-input'
}
export interface HiddenInputProps extends CommonBlockProps {
  formId?: BlockProperty<string>
  name: BlockProperty<string>
  disabled?: BlockProperty<boolean>
  initialValue?: BlockProperty<unknown>
}
/**
 * Text block may contain only text children (may be nested)
 */
export declare function Text(this: unknown, props: TextProps, ...children: TextChildNode[]): Promise<TextBlock>
export declare type TextChildNode = JSONTemplate<string | number | null | undefined | false | TextBlock>
export interface TextBlock extends RequiredTextProps {
  type: 'text'
}
export interface TextProps extends CommonBlockProps {
  class?: BlockClass<TextClass>
  style?: BlockStyle<TextProps.Style>
  text?: TextChildNode | Array<TextChildNode>
  onClick?: BlockActions
  onContext?: BlockActions
}
export declare namespace TextProps {
  type Style = TextBlockStyle & TextStateStyle
}
interface TextStateStyle {
  active?: Pick<TextBlockStyle, 'backgroundColor' | 'color' | 'opacity'>
}
declare type TextBlockStyle = TextStyle &
  BorderStyle &
  BoxPositionStyle &
  BoxSizingStyle &
  MarginStyle &
  PaddingStyle &
  SelfAlignFlexStyle &
  SelfFlexStyle &
  SimpleBgColorStyle &
  ShadowStyle
/**
 * Helpful as a property of other components that contains inner text block
 *  that may be defined as simple string or as custom-styled text block
 */
export declare type InnerText = string | number | RequiredTextProps
interface RequiredTextProps extends Omit<TextProps, 'text'>, Required<Pick<TextProps, 'text'>> {}
declare type TextClass =
  | 'section'
  | 'link'
  | 'badge'
  | 'listItemRightMiniText'
  | 'listItemSubTitle'
  | 'buttonTitle'
  | 'screenHeader'
/**
 * Converts jsx children with nested TextBlocks to the value suitable for `text` property
 */
export declare function textChildrenToProp(children: TextChildNode[]): NonNullable<TextProps['text']>
export declare function HorizontalScroll(
  this: unknown,
  props: HorizontalScrollAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<HorizontalScrollBlock>
export interface HorizontalScrollAsyncProps extends Omit<HorizontalScrollProps, 'blocks'> {
  blocks?: ChatiumChildNode[]
}
export interface HorizontalScrollBlock extends HorizontalScrollProps {
  type: 'horizontal-scroll'
}
export interface HorizontalScrollProps extends CommonBlockProps {
  class?: BlockClass<HorizontalScrollClasses>
  style?: BlockStyle<HorizontalScrollProps.Style>
  snapToBlocks?: BlockProperty<boolean>
  showScrollBar?: BlockProperty<boolean>
  initialSlideIndex?: BlockProperty<number>
  blocks?: ChatiumBlockV2[]
}
export declare namespace HorizontalScrollProps {
  type Style = HorizontalScrollStyle
}
declare type HorizontalScrollClasses = 'section'
export declare type HorizontalScrollStyle = BorderStyle & MarginStyle & SimpleBgColorStyle & PaddingStyle
export declare function HorizontalScrollIndicator(
  this: unknown,
  props: HorizontalScrollIndicatorProps,
): Promise<HorizontalScrollIndicatorBlock>
export declare type HorizontalScrollIndicatorProps = PositionIndicatorDotsAsync | PositionIndicatorTextProps
export declare type HorizontalScrollIndicatorBlock = {
  type: 'horizontal-scroll-indicator'
} & CommonBlockProps &
  (PositionIndicatorDotsProps | PositionIndicatorTextProps)
interface PositionIndicatorCommonProps {
  position?: 'top-left' | 'top-center' | 'top-right' | 'bottom-right' | 'bottom-center' | 'bottom-left'
}
interface PositionIndicatorDotsAsync extends Omit<PositionIndicatorDotsProps, 'inactiveDot' | 'activeDot'> {
  inactiveDot?: ChatiumChildNode
  activeDot?: ChatiumChildNode
}
interface PositionIndicatorDotsProps extends PositionIndicatorCommonProps {
  indicator: 'dots'
  style?: PositionIndicatorDotsStyle
  inactiveDot?: ChatiumBlockV2
  activeDot?: ChatiumBlockV2
}
declare type PositionIndicatorDotsStyle = MarginStyle &
  SimpleBgColorStyle &
  BackgroundGradientStyle &
  ShadowStyle &
  PaddingStyle &
  BoxSizingWidthStyle &
  BorderStyle
interface PositionIndicatorTextProps extends PositionIndicatorCommonProps {
  indicator: 'text'
  style?: PositionIndicatorTextStyle
  text?: TextChildNode | Array<TextChildNode>
}
declare type PositionIndicatorTextStyle = MarginStyle &
  SimpleBgColorStyle &
  BackgroundGradientStyle &
  ShadowStyle &
  PaddingStyle &
  BoxSizingWidthStyle &
  BorderStyle &
  TextStyle
export declare namespace HorizontalScroll {
  const Indicator: typeof HorizontalScrollIndicator
}
export interface IAPProductProps extends CommonBlockProps {
  productId: SingleOrArray<string | ProductDefinition>
  productTemplate: SingleOrArray<ChatiumBlockV2>
  loadingContent?: SingleOrArray<ChatiumBlockV2> | void
  errorContent?: SingleOrArray<ChatiumBlockV2> | void
  style?: BlockStyle<IAPProductProps.Style>
  class?: BoxProps['class']
  onClick?: BoxProps['onClick']
  onContext?: BoxProps['onContext']
}
export declare namespace IAPProductProps {
  type Style = BoxProps.Style
}
export interface ProductDefinition {
  id: string
  googlePlayOfferTags?: string[]
  googlePlayBasePlanId?: string
  googlePlayOfferId?: string
}
export interface IAPProductBlock extends IAPProductProps {
  type: 'iap-product'
}
export interface IAPProductAsyncProps
  extends Omit<IAPProductProps, 'productTemplate' | 'loadingContent' | 'errorContent'> {
  productTemplate?: SingleOrArray<ChatiumChildNode>
  loadingContent?: SingleOrArray<ChatiumChildNode>
  errorContent?: SingleOrArray<ChatiumChildNode>
}
export declare function IAPProduct(
  this: unknown,
  props: IAPProductAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<IAPProductBlock>
export declare function Image(props: ImageProps): ImageBlock
export interface ImageBlock extends ImageProps {
  type: 'image'
}
export interface ImageProps extends CommonBlockProps {
  src: BlockProperty<{
    url: string
    width?: number
    height?: number
  }>
  resizeMode?: BlockProperty<'stretch' | 'contain' | 'cover'>
  class?: BlockClass<'section' | 'absoluteFill'>
  style?: BlockStyle<ImageProps.Style>
  onClick?: BlockActions
  onContext?: BlockActions
}
export declare namespace ImageProps {
  type Style = ImageStyle & ImageStateStyle
}
export interface ImageStateStyle {
  active?: Pick<ImageStyle, 'backgroundColor' | 'opacity'>
}
export declare type ImageStyle = BoxPositionStyle &
  BoxSizingStyle &
  MarginStyle &
  ImageAlignSelfStyle &
  SelfFlexStyle &
  BoxColorStyle &
  BorderStyle &
  ShadowStyle
interface ImageAlignSelfStyle {
  alignSelf?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline'
}
export declare function SmartIcon(props: SmartIconProps): SmartIconBlock
export declare namespace SmartIcon {
  const renderSync = true
}
export interface SmartIconBlock extends SmartIconProps {
  type: 'smart-icon'
}
export interface SmartIconProps extends CommonIconProps {
  class?: BlockClass<'circle' | 'square'>
  style?: BlockStyle<SmartIconProps.Style>
  name?: IconProps['name']
  url?: BlockProperty<string>
  text?: BlockProperty<string | number>
  /**
   * Small icons or text-badges positioned at the corners of this icon
   */
  badges?: SingleOrArray<SubIcon | SmartIconBadgeProps>
}
export declare namespace SmartIconProps {
  type Style = SmartIconStyle & CommonIconStateStyle
}
export interface IconScaleStyle {
  iconScale?: number
}
declare type SmartIconStyle = CommonIconStyle & BackgroundGradientStyle & IconTextStyle & IconScaleStyle
interface SubIcon extends Omit<SmartIconProps, 'badges' | 'style' | 'onClick' | 'onContext'> {
  style?: BlockStyle<SubIconStyle>
  position?: BlockProperty<BadgePosition>
}
declare type SubIconStyle = BorderStyle &
  BoxColorStyle &
  Omit<BoxPositionStyle, 'position'> &
  IconTextStyle &
  PaddingStyle &
  TransformStyle &
  IconScaleStyle &
  ShadowStyle
interface SmartIconBadgeProps {
  badge: BlockProperty<string | number>
  style?: BlockStyle<SmartIconBadgeStyle>
  position?: BlockProperty<BadgePosition>
}
declare type SmartIconBadgeStyle = IconTextStyle &
  BorderStyle &
  SimpleBgColorStyle &
  Omit<BoxPositionStyle, 'position'> &
  BoxSizingStyle &
  PaddingStyle &
  TransformStyle
declare type BadgePosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'custom'
export declare type IconTextStyle = {
  color?: TextStyle['color']
  fontSize?: TextStyle['fontSize']
  fontStyle?: TextStyle['fontStyle']
  fontWeight?: TextStyle['fontWeight']
  fontVariant?: TextStyle['fontVariant']
  letterSpacing?: TextStyle['letterSpacing']
  textDecorationLine?: TextStyle['textDecorationLine']
  textShadowColor?: TextStyle['textShadowColor']
  textShadowOffset?: TextStyle['textShadowOffset']
  textShadowRadius?: TextStyle['textShadowRadius']
  textTransform?: TextStyle['textTransform']
}
export declare function ListItem(
  this: unknown,
  props: ListItemAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<ListItemBlock>
export interface ListItemBlock extends ListItemProps {
  type: 'list-item'
}
export interface ListItemAsyncProps extends Omit<ListItemProps, 'content' | 'customContent'> {
  content?: {
    title?: PlainOrPromise<TextOrBlock>
    rightMiniText?: PlainOrPromise<TextOrBlock>
    subTitle?: PlainOrPromise<TextOrBlock>
    badge?: string | number | ListItemBadgeProps
  }
  customContent?: JSONTemplate<SingleOrArray<ChatiumChildNode>>
}
export interface ListItemProps extends CommonBlockProps {
  icon?: SmartIconProps
  content?: {
    title?: TextOrBlock
    rightMiniText?: TextOrBlock
    subTitle?: TextOrBlock
    badge?: ListItemBadgeProps | TextOrBlock
  }
  class?: BlockClass<ListItemClass>
  style?: BlockStyle<ListItemProps.Style>
  customContent?: SingleOrArray<ChatiumBlockV2>
  onClick?: BlockActions
  /**
   * Long tap - on mobile
   * Right click - on desktop
   */
  onContext?: BlockActions
  /**
   * Defines buttons and corresponding actions that appear when
   *  swiping the list item left or right (on mobile device)
   *  or hovering and context menu (on desktop)
   * To achieve smooth cross-platform behavior
   *  for every button developer should define at least two `on` actions: one - for mobile and one - for desktop.
   */
  actionButtons?: SingleOrArray<ActionButtonProps>
}
export declare namespace ListItemProps {
  type Style = ListItemStyle & ListItemStateStyle
}
interface ListItemStateStyle {
  active?: Pick<ListItemStyle, 'backgroundColor' | 'color' | 'opacity'>
}
declare type ListItemClass = 'muted' | 'selected'
declare type ListItemStyle = BorderStyle &
  BoxColorStyle &
  BoxSizingStyle &
  FlexStyle &
  MarginStyle &
  PaddingStyle &
  TextStyle &
  TransformStyle &
  ShadowStyle
interface ListItemBadgeProps {
  badge: string | number
  style?: BlockStyle<ListItemBadgeStyle>
}
declare type ListItemBadgeStyle = IconTextStyle &
  BorderStyle &
  BoxPositionStyle &
  BoxSizingStyle &
  MarginStyle &
  PaddingStyle &
  SelfAlignFlexStyle &
  SelfFlexStyle &
  SimpleBgColorStyle &
  TransformStyle
interface ActionButtonProps {
  on: SingleOrArray<ListItemActionType>
  class?: SingleOrArray<'reset' | 'danger' | 'warn' | 'success'>
  style?: SingleOrArray<BoxColorStyle & PaddingStyle & TextStyle>
  title?: InnerText
  icon?: IconProps
  onClick?: ChatiumActions
}
declare type ListItemActionType = 'swipe-left' | 'swipe-right' | 'hover' | 'web-context'
export declare function Parallax(
  this: unknown,
  props: ParallaxAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<ParallaxBlock>
export interface ParallaxAsyncProps extends Omit<ParallaxProps, 'background' | 'content'> {
  background?: SingleOrArray<ChatiumChildNode> | ImageProps
  content?: SingleOrArray<ChatiumChildNode>
}
export interface ParallaxBlock extends ParallaxProps {
  type: 'parallax'
}
export interface ParallaxProps extends CommonBlockProps {
  style?: BlockStyle<ParallaxProps.Style>
  contentStyle?: BlockStyle<ContentStyle>
  background?: SingleOrArray<ChatiumBlockV2>
  content?: SingleOrArray<ChatiumBlockV2>
  onClick?: BlockActions
  onContext?: BlockActions
}
export declare namespace ParallaxProps {
  type Style = MarginStyle & ShadowStyle
}
declare type ContentStyle = FlexContainerStyle & PaddingStyle & BorderStyleNoRadius & BoxColorStyle
export declare function Slider(props: SliderProps): Promise<SliderBlock>
export interface SliderBlock extends SliderProps {
  type: 'slider'
}
export interface SliderProps extends CommonBlockProps {
  name?: BlockProperty<string>
  formId?: BlockProperty<string>
  disabled?: BlockProperty<boolean>
  class?: BlockClass<SliderClass>
  style?: BlockStyle<SliderStyle>
  trackStyle?: BlockStyle<SliderTrackStyle>
  thumb?: SliderThumbProps
  initialValue?: BlockProperty<number>
  value?: BlockProperty<number>
  minValue?: BlockProperty<number>
  maxValue?: BlockProperty<number>
  step?: BlockProperty<number>
  onChange?: BlockActions
  onDrag?: BlockActions
  disableErrorHint?: BlockProperty<boolean>
}
declare type SliderThumbProps = {
  style?: BlockStyle<SliderThumbStyle>
  imageUrl?: BlockProperty<string>
}
declare type SliderClass = 'section'
declare type SliderStyle = BorderStyle &
  BoxPositionStyle &
  BoxSizingStyle &
  FlexStyle &
  MarginStyle &
  PaddingStyle &
  ShadowStyle &
  BackgroundColorStyle &
  OpacityStyle
declare type SliderTrackStyle = BoxSizingHeightStyle &
  BorderStyle & {
    leftColor?: Color
    rightColor?: Color
  }
declare type SliderThumbPlainStyle = BorderStyle & BoxSizingStyle & ShadowStyle & BackgroundColorStyle & OpacityStyle
declare type SliderThumbStyle = SliderThumbPlainStyle & {
  active?: SliderThumbPlainStyle
}
export declare function RunActionInterval(props: RunActionIntervalProps): RunActionIntervalBlock
export interface RunActionIntervalBlock extends RunActionIntervalProps {
  type: 'run-action-interval'
}
export interface RunActionIntervalProps extends CommonBlockProps {
  interval: number
  action: BlockActions
}
export declare function Sticky(
  this: unknown,
  props: StickyAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<StickyBlock>
export declare type StickyAsyncProps = Omit<StickyProps, 'blocks'>
export interface StickyBlock extends StickyProps {
  type: 'sticky'
}
export interface StickyProps extends BoxProps {
  style?: BlockStyle<StickyProps.Style>
}
export declare namespace StickyProps {
  type Style = StickyStyle & BoxStateStyle
}
export declare type StickyStyle = BorderStyle &
  ShadowStyle &
  BoxColorStyle &
  BoxSizingStyle &
  BoxOverflowStyle &
  FlexStyle &
  MarginStyle &
  PaddingStyle
export declare function TextInput(
  this: unknown,
  props: TextInputAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<TextInputBlock>
export interface TextInputAsyncProps extends Omit<TextInputProps, 'blocks'> {
  blocks?: ChatiumChildNode[]
}
export interface TextInputBlock extends TextInputProps {
  type: 'text-input'
}
export declare function SearchInput(props: SearchInputProps): SearchInputBlock
export interface SearchInputBlock extends SearchInputProps {
  type: 'search-input'
}
export interface TextInputProps extends CommonInputProps {
  class?: BlockClass<'section'>
  style?: BlockStyle<TextInputProps.Style>
  initialValue?: BlockProperty<string>
  placeholder?: BlockProperty<string>
  multiline?: BlockProperty<boolean>
  inputmode?: BlockProperty<'text' | 'decimal' | 'tel' | 'email' | 'url' | 'password'>
  autoFocus?: BlockProperty<boolean>
  autoCorrect?: BlockProperty<boolean>
  returnKeyType?: BlockProperty<'done' | 'go' | 'next' | 'search' | 'send'>
  onReturnKeyPress?: BlockProperty<InputOnChangeAction>
  autocapitalize?: BlockProperty<'none' | 'sentences' | 'words' | 'characters'>
  maxLength?: BlockProperty<number>
  sendHashed?:
    | boolean
    | {
        salt: string
      }
  disableErrorHint?: BlockProperty<boolean>
  blocks?: ChatiumBlockV2[]
}
export declare namespace TextInputProps {
  type Style = TextInputStyle | TextInputStateStyle
}
declare type TextInputSizingStyle = {
  width?: BoxSizingStyle['width']
  maxWidth?: BoxSizingStyle['maxWidth']
  minWidth?: BoxSizingStyle['minWidth']
}
declare type TextInputTextStyle = Omit<TextStyle, 'textAlignVertical'>
export declare type TextInputStyle = BorderStyle &
  ShadowStyle &
  BoxColorStyle &
  BoxPositionStyle &
  TextInputSizingStyle &
  MarginStyle &
  PaddingStyle &
  TextInputTextStyle &
  SelfAlignFlexStyle &
  SelfFlexStyle
interface TextInputStateStyle {
  disabled?: TextInputStyle
  focus?: TextInputStyle
  valid?: TextInputStyle
  invalid?: TextInputStyle
}
export declare type TextInputValidation =
  | AsyncValidation
  | EmailValidation
  | MaxLengthValidation
  | MinLengthValidation
  | NumberValidation
  | NumberMaxValidation
  | NumberMinValidation
  | PhoneValidation
  | RequiredValidation
  | RegexpValidation
declare type InputOnChangeAction = string | Pick<SubmitFormAction, 'url' | 'params'> | BlockActions
export interface CommonInputProps extends CommonBlockProps {
  formId?: BlockProperty<string>
  name: BlockProperty<string>
  disabled?: BlockProperty<boolean>
  debounceOnChangeMs?: BlockProperty<number>
  onChange?: InputOnChangeAction
  onContext?: BlockActions
}
export interface SearchInputProps extends CommonInputProps {
  class?: BlockClass<'section'>
  style?: BlockStyle<SearchInputProps.Style>
  initialValue?: BlockProperty<string>
  placeholder?: BlockProperty<string>
}
export declare namespace SearchInputProps {
  type Style = TextInputStyle | TextInputStateStyle
}
interface AsyncValidation {
  type: 'async'
  url: string
  message?: string
  debounceMs?: number
}
interface RequiredValidation {
  type: 'required'
  message?: string
}
interface EmailValidation {
  type: 'email'
  message?: string
}
interface PhoneValidation {
  type: 'phone'
  message?: string
}
interface MinLengthValidation {
  type: 'minLength'
  min: number
  message?: string
}
interface MaxLengthValidation {
  type: 'maxLength'
  max: number
  message?: string
}
interface NumberValidation {
  type: 'number'
  message?: string
}
interface NumberMinValidation {
  type: 'numberMin'
  min: number
  message?: string
}
interface NumberMaxValidation {
  type: 'numberMax'
  max: number
  message?: string
}
interface RegexpValidation {
  type: 'regexp'
  regexp: string
  message?: string
}
export declare function TextInputIndicator(props: TextInputIndicatorProps): Promise<TextInputIndicatorBlock>
export interface TextInputIndicatorProps {
  style?: TextInputIndicatorStyle
  text?: TextChildNode | Array<TextChildNode>
}
export declare type TextInputIndicatorBlock = {
  type: 'text-input-indicator'
} & CommonBlockProps &
  TextInputIndicatorProps
declare type TextInputIndicatorStyle = BoxPositionStyle &
  MarginStyle &
  SimpleBgColorStyle &
  BackgroundGradientStyle &
  ShadowStyle &
  PaddingStyle &
  BoxSizingWidthStyle &
  BorderStyle &
  TextStyle
export declare function Video(props: VideoProps): VideoBlock
export declare function VideoPoster(props: VideoPosterProps): VideoPosterBlock
export declare function showVideo(props: VideoPlayerProps): ShowVideoAction
export interface VideoBlock extends VideoProps {
  type: 'video'
}
export interface VideoProps extends Omit<VideoPlayerProps, 'src'>, CommonBlockProps {
  src: VideoPlayerProps['src'] | VideoYoutubeSrcProps
  class?: BlockClass<'section' | 'absoluteFill'>
  style?: BlockStyle<VideoProps.Style>
  poster?: BlockProperty<string>
  resizeMode?: BlockProperty<'stretch' | 'contain' | 'cover'>
  onContext?: BlockActions
}
export declare namespace VideoProps {
  type Style = VideoStyle
}
export declare type VideoStyle = BorderStyle &
  ShadowStyle &
  BoxColorStyle &
  BoxPositionStyle &
  BoxSizingStyle &
  MarginStyle &
  SelfAlignFlexStyle &
  SelfFlexStyle
export interface VideoPosterBlock extends VideoPosterProps {
  type: 'video-poster'
}
export interface VideoPosterProps extends CommonBlockProps {
  src: ImageProps['src']
  resizeMode?: ImageProps['resizeMode']
  icon?: Pick<IconProps, 'name' | 'size' | 'style'>
  video?: Omit<ShowVideoAction, 'type'>
  class?: BlockClass<'section' | 'absoluteFill'>
  style?: BlockStyle<VideoPosterProps.Style>
  onContext?: ChatiumActions
}
export declare namespace VideoPosterProps {
  type Style = VideoStyle
}
export interface ShowVideoAction {
  type: 'showVideo'
  src: VideoPlayerProps['src']
  preferredQuality?: VideoPlayerProps['preferredQuality']
  onVideoEnd?: VideoPlayerProps['onVideoEnd']
}
interface VideoPlayerProps {
  src:
    | {
        hls?: string
        mp4: string
        width?: number
        height?: number
      }
    | {
        hls: string
        mp4?: string
        width?: number
        height?: number
      }
  preferredQuality?: number
  autoplay?: boolean
  loop?: boolean
  muted?: boolean
  onVideoEnd?: ChatiumActions
  controls?: 'full' | 'compact' | 'mini' | 'none'
  ignoreSilentSwitch?: boolean
  playInBackground?: boolean
  playWhenInactive?: boolean
}
interface VideoYoutubeSrcProps {
  youtubeId: string
  width?: number
  height?: number
}
declare type BlocksUnion =
  | AudioBlock
  | BoxBlock
  | ButtonBlock
  | FooterBlock
  | HeaderBlock
  | HorizontalScrollBlock
  | HorizontalScrollIndicatorBlock
  | IAPProductBlock
  | IconBlock
  | ImageBlock
  | ListItemBlock
  | ParallaxBlock
  | SearchInputBlock
  | SmartIconBlock
  | StickyBlock
  | TextBlock
  | TextInputBlock
  | HiddenInputBlock
  | TextInputIndicatorBlock
  | VideoBlock
  | VideoPosterBlock
  | SliderBlock
  | RunActionIntervalBlock
export declare type ChatiumBlockV2 = BlocksUnion | JSONTemplate<BlocksUnion | Array<ChatiumBlockV2>>
declare type Lang = string
declare type UgcFileStorage = 'cgs' | 'db'
declare type CgsRepoVersion = string
interface ChatiumRc {
  defaultDesktopLayout?: DesktopLayout
  favicon?: string
  faviconHash?: string
  fonts?: ScreenPropsV2['fonts']
  htmlTemplate?: string
  ogDescription?: string
  ogImage?: string
  ogImageHash?: string
  ogTitle?: string
  ogType?: string
  title?: string
  titleScreen?: string
  headExtra?: string[]
  bodyExtra?: string[]
  layout?: Layout | string
  i18n?: {
    /**
     * Language, in which the in-code key strings are defined.
     * It's important to only set this if the keys are really of that language, not technical IDs
     *  because this info is used for proper language bundle loading.
     */
    keyLang?: Lang | null
    /**
     * List of languages to which auto-translation actions will target when they are activated
     */
    autoTranslateLangs?: Lang[]
    /**
     * List of languages that are considered supported in this account.
     * 'auto-detect-all' (default) - collect a combined set of translation languages from the account code,
     *                               external dependencies, and all connected plugin apps.
     * 'auto-detect-local-with-externals' - collect a combined set of translation languages only from the account code
     *                                      and external dependencies, without plugin apps
     * 'auto-detect-only-local' - collect a combined set of translation languages only from the account's own code
     *
     * Alternatively, an explicit list of languages may be provided which disable auto-detection.
     * @see getSupportedTranslationLangs
     */
    supportedLangs?: typeof i18nSupportedLangsAutoValues[number] | Lang[]
  }
  signInPath?: string
  globalJsx?: 'app/ui' | false
}
declare const i18nSupportedLangsAutoValues: readonly [
  'auto-detect-all',
  'auto-detect-local-with-externals',
  'auto-detect-only-local',
]
interface Layout {
  leftMenu?: {
    items?: LayoutMenuItem
  }
  bottomTabs?: LayoutBottomTabs
}
interface LayoutBottomTabs {
  tabs?: LayoutMenuItem[]
  activeTintColor?: string
  inactiveTintColor?: string
}
interface LayoutMenuItem {
  id?: string
  type: 'tab' | 'button'
  title?: string
  url?: string
  onClick?: ChatiumActions
  icon: IconProps
  key?: string
}
/**
 * Helper class that translates viewport width into convenient set of size flags according to the breakpoints
 */
export declare class ResponsiveState {
  readonly viewportWidth: number
  readonly breakpoints: ResponsiveBreakpoints
  readonly desktopLayout: DesktopLayout
  constructor(
    ctx: EnvCtx & {
      rc: Pick<ChatiumRc, 'defaultDesktopLayout'>
    },
    options: ResponsiveStateOptions,
  )
  get xl(): boolean
  get xlOnly(): boolean
  get xlDown(): boolean
  get lg(): boolean
  get lgOnly(): boolean
  get lgDown(): boolean
  get md(): boolean
  get mdOnly(): boolean
  get mdDown(): boolean
  get sm(): boolean
  get smOnly(): boolean
  get smDown(): boolean
  get xs(): boolean
  get xsOnly(): boolean
  get xsDown(): boolean
  get currentBreakpoint(): keyof ResponsiveBreakpoints | null
  /**
   * This and following xxxStyle - helper for type-safe and convenient
   *  support of responsive style keys for the corresponding chatium-json block via this format:
   *    {
   *      margin: 10,
   *      xl: { margin: 20 }
   *    }
   *  which is syntax sugar for:
   *    [
   *      { margin: 10 },
   *      responsive.xl && { margin: 20 },
   *    ]
   * @see style
   */
  audioStyle(...style: ResponsiveStyleList<AudioProps.Style>[]): SingleOrArray<AudioProps.Style> | undefined
  boxStyle(...style: ResponsiveStyleList<BoxProps.Style>[]): SingleOrArray<BoxProps.Style> | undefined
  buttonStyle(...style: ResponsiveStyleList<ButtonProps.Style>[]): SingleOrArray<ButtonProps.Style> | undefined
  footerStyle(...style: ResponsiveStyleList<FooterProps.Style>[]): SingleOrArray<FooterProps.Style> | undefined
  headerStyle(...style: ResponsiveStyleList<HeaderProps.Style>[]): SingleOrArray<HeaderProps.Style> | undefined
  horizontalScrollStyle(
    ...style: ResponsiveStyleList<HorizontalScrollProps.Style>[]
  ): SingleOrArray<HorizontalScrollProps.Style> | undefined
  iapProductStyle(
    ...style: ResponsiveStyleList<IAPProductProps.Style>[]
  ): SingleOrArray<IAPProductProps.Style> | undefined
  iconStyle(...style: ResponsiveStyleList<IconProps.Style>[]): SingleOrArray<IconProps.Style> | undefined
  imageStyle(...style: ResponsiveStyleList<ImageProps.Style>[]): SingleOrArray<ImageProps.Style> | undefined
  listItemStyle(...style: ResponsiveStyleList<ListItemProps.Style>[]): SingleOrArray<ListItemProps.Style> | undefined
  parallaxStyle(...style: ResponsiveStyleList<ParallaxProps.Style>[]): SingleOrArray<ParallaxProps.Style> | undefined
  smartIconStyle(...style: ResponsiveStyleList<SmartIconProps.Style>[]): SingleOrArray<SmartIconProps.Style> | undefined
  stickyStyle(...style: ResponsiveStyleList<StickyProps.Style>[]): SingleOrArray<StickyProps.Style> | undefined
  textStyle(...style: ResponsiveStyleList<TextProps.Style>[]): SingleOrArray<TextProps.Style> | undefined
  textInputStyle(...style: ResponsiveStyleList<TextInputProps.Style>[]): SingleOrArray<TextInputProps.Style> | undefined
  searchInputStyle(
    ...style: ResponsiveStyleList<SearchInputProps.Style>[]
  ): SingleOrArray<SearchInputProps.Style> | undefined
  videoStyle(...style: ResponsiveStyleList<VideoProps.Style>[]): SingleOrArray<VideoProps.Style> | undefined
  videoPosterStyle(
    ...style: ResponsiveStyleList<VideoPosterProps.Style>[]
  ): SingleOrArray<VideoPosterProps.Style> | undefined
  /**
   * Common algorithm of converting ResponsiveStyle (style with responsive sub-style keys)
   *  to ordered list of usual styles depending on current responsive state.
   * Precedence of the responsive flags (from least priority to most):
   *   xs, sm, md, lg, xl, xlDown, lgDown, mdDown, smDown, xsDown, xsOnly, smOnly, mdOnly, lgOnly, xlOnly
   * General priciple: more specific and precise predicate data overwrites the less one.
   * @see breakpointPredicatesPriority
   */
  private style
}
export declare type ResponsiveStateOptions = ResponsiveBreakpoints & {
  desktopLayout?: DesktopLayout
}
export interface ResponsiveBreakpoints {
  xs: number
  sm: number
  md: number
  lg: number
  xl: number
}
export interface ResponsiveInfo {
  breakpoints: ResponsiveBreakpoints
  width?: number
  height?: number
}
declare type ResponsiveKeys = keyof ResponsiveBreakpoints
export declare type ResponsiveBreakpointsPredicateKeys =
  | ResponsiveKeys
  | `${ResponsiveKeys}Only`
  | `${ResponsiveKeys}Down`
export declare type ResponsiveStyle<T> = T & {
  [K in ResponsiveBreakpointsPredicateKeys]?: T
}
export declare type ResponsiveStyleList<T> = SingleOrArrayRecursiveNullable<ResponsiveStyle<T>>
export declare const defaultBreakpoints: {
  xs: number
  sm: number
  md: number
  lg: number
  xl: number
}
export declare function Screen(
  this: unknown,
  props: ScreenAsyncProps,
  ...children: ChatiumChildNode[]
): Promise<ScreenPropsV2>
export declare type ScreenAsyncProps = Omit<ScreenPropsV2, 'type' | 'blocks'> & {
  responsive?: ResponsiveInfo | ResponsiveState
}
export interface ScreenPropsV2 extends CommonBlockProps {
  type: 'blocks'
  title?: string
  icon?: Pick<SmartIconProps, 'name' | 'url' | 'text'>
  fonts?: ScreenFonts
  blocks?: ChatiumBlockV2[]
  responsive?: ResponsiveInfo
  style?: BlockStyle<ScreenStyle>
  socketId?: string
  socketIds?: string[] | Record<string, ChatiumActions | 'reload'>
  desktopLayout?: DesktopLayout
  /** @deprecated renamed to desktopLayout */
  layout?: DesktopLayout
  columnLayoutStyle?: BlockStyle<ColumnLayoutStyle>
  meta?: ScreenMeta
  preventScreenCapture?: boolean
  onFocus?: ChatiumActions
}
export declare type DesktopLayout = 'column' | 'empty' | 'mobile'
export declare const validDesktopLayouts: string[]
export declare type ScreenMeta = {
  [key: string]: unknown
  favicon?: string
  faviconHash?: string
  ogType?: string
  ogTitle?: string
  ogDescription?: string
  ogImage?: string
  headExtra?: string[] | string
  bodyExtra?: string[] | string
  layout?: {
    url: string
    bottomTabs: LayoutBottomTabs
  }
}
declare type ScreenFonts = {
  [fontFamily: string]: string | Array<ScreenFontDef>
}
declare type ScreenFontDef = {
  url: string
  fontWeight?: NonNullable<TextProps.Style['fontWeight']>
  fontStyle?: NonNullable<TextProps.Style['fontStyle']>
  fontVariant?: NonNullable<TextProps.Style['fontVariant']>
}
declare type ScreenBackgroundImageStyle = {
  backgroundImage?: string
}
declare type ScreenStyle = BackgroundColorStyle & BackgroundGradientStyle & ScreenBackgroundImageStyle
declare type ColumnLayoutStyle = BackgroundColorStyle &
  BackgroundGradientStyle &
  ScreenBackgroundImageStyle &
  ShadowStyle &
  ColumnLayoutBorderStyle
declare type ColumnLayoutBorderStyle = {
  borderWidth?: BorderWidth
  borderColor?: Color
  border?: BorderShortDef
}
export declare function appendReloadSocket(socketIds: NonNullable<ScreenPropsV2['socketIds']>, socketId: string): void
/**
 * Standard get-screen response for chatium-json v2
 */
export declare type ScreenResponseV2 = ScreenSuccessResponseV2 | ScreenErrorResponseV2
export interface ScreenSuccessResponseV2 extends ScreenResponseFieldsV2 {
  success: true
}
export interface ScreenErrorResponseV2 extends ChatiumErrorResponse, Partial<ScreenResponseFieldsV2> {}
export interface ScreenResponseFieldsV2 {
  data: ScreenPropsV2
  appScreens?: Record<string, ScreenPropsV2>
  preloadMedia?: string[]
}
export interface V2IntrinsicElements {
  audio: AudioProps
  box: BoxAsyncProps
  button: ButtonAsyncProps
  footer: FooterAsyncProps
  header: HeaderAsyncProps
  'horizontal-scroll': HorizontalScrollAsyncProps
  'horizontal-scroll-indicator': HorizontalScrollIndicatorProps
  'iap-product': IAPProductAsyncProps
  icon: IconProps
  image: ImageProps
  'list-item': ListItemAsyncProps
  parallax: ParallaxAsyncProps
  screen: ScreenAsyncProps
  'search-input': SearchInputProps
  'smart-icon': SmartIconProps
  sticky: StickyAsyncProps
  text: TextProps
  'text-input': TextInputProps
  'text-input-indicator': TextInputIndicatorProps
  video: VideoProps
  'video-poster': VideoPosterProps
}
interface EnvAvc {
  id: string
  signature: string
  accMap: Record<
    /** base account ID */
    number,
    [
      /** branch account ID */
      number,
      UgcFileStorage,
      UgcCodeVersion | null,
      /** expiration timestamp in seconds */
      number,
    ]
  >
}
interface EnvCtx {
  env: Env
}
interface Env {
  development: boolean
  production: boolean
  platform: EnvPlatform
  version: number
  appBuildNumber?: number
  ios: boolean
  android: boolean
  web: boolean
  job: boolean
  debugSocketId: string | null
  usePreviewMode: boolean
  viewportWidth: number | null
  viewportHeight: number | null
  devicePixelRatio: number
  alwaysHeader: boolean
  clientScope?: 'modal' | 'desktop' | 'ide'
  desktopLayout?: DesktopLayout
  acceptChatiumJson: boolean
  client?: ClientInfo
  avc?: EnvAvc
}
declare const EnvPlatform: {
  readonly iOS: 'iOS'
  readonly Android: 'Android'
  readonly Web: 'Web'
  readonly Job: 'Job'
}
declare type EnvPlatform = keyof typeof EnvPlatform
interface ClientInfo {
  ip: string
  deviceName: string
  osName: string
}
declare type UgcCodeVersion = CgsRepoVersion

export {}
