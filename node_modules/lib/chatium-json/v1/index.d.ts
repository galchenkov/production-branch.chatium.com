import { ScreenMeta } from '../v2'
import { ChatiumActions } from 'lib/chatium-json'
import { IconProps } from 'lib/chatium-json/v2'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
export interface ButtonProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  bgColor?: Color
  fontColor?: Color
  fontSize?: FontSize
  icon?: Icon
  iconPosition?: 'left' | 'right'
  onClick?: ChatiumActions
  title?: string
  buttonType?: 'primary' | 'transparent' | 'headerRight' | 'headerLeft' | 'warning' | 'warningTransparent' | 'flat'
}
export interface ButtonBlock<ExtraBlocks> extends ButtonProps<ExtraBlocks> {
  type: 'button'
}
export declare function Button<ExtraBlocks>(props: ButtonProps<ExtraBlocks>): ButtonBlock<ExtraBlocks>
export declare function flattenChildren<ExtraBlocks>(
  children: ChatiumChildNode<ExtraBlocks>[],
): Promise<ChatiumBlock<ExtraBlocks>[]>
export declare type ChatiumChildNode<ExtraBlocks> = SyncNode<ExtraBlocks> | Promise<SyncNode<ExtraBlocks>>
declare type SyncNode<ExtraBlocks> = SingleNode<ExtraBlocks> | SingleNode<ExtraBlocks>[]
declare type SingleNode<ExtraBlocks> = ChatiumBlock<ExtraBlocks> | null | undefined | false | 0 | ''
/**
 * Compact auto-generated key encoding.
 * 0-91 are encoded using single character
 * 92-8463 are encoded using ' + two characters
 * 8464-778687 are encoded using ` + three characters
 * Highrer numbers are not supported and return empty string
 * @param idx - must be natural int
 */
export declare function encodeIndex(idx: number): string
export interface FooterProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  blocks?: ChatiumBlock<ExtraBlocks>[]
  visibleAlways?: boolean
}
export interface FooterBlock<ExtraBlocks> extends FooterProps<ExtraBlocks> {
  type: 'footer'
}
export declare function Footer<ExtraBlocks>(
  props: FooterProps<ExtraBlocks>,
  ...children: ChatiumChildNode<ExtraBlocks>[]
): Promise<FooterBlock<ExtraBlocks>>
export declare type GalleryBlock<ExtraBlocks> = GalleryProps<ExtraBlocks> & {
  type: 'gallery'
}
export declare type GalleryProps<ExtraBlocks> = {
  onClick?: ChatiumActions
  initialSlideIndex?: number
  slides?: Array<
    | {
        content?: ChatiumBlock<ExtraBlocks>
      }
    | {
        blocks?: ChatiumBlock<ExtraBlocks>[]
      }
  >
} & CommonBlockProps<ExtraBlocks>
export declare function Gallery<ExtraBlocks>(
  props: GalleryProps<ExtraBlocks>,
  ...children: ChatiumChildNode<ExtraBlocks>[]
): Promise<GalleryBlock<ExtraBlocks>>
export declare type TextBlock<ExtraBlocks> = TextProps<ExtraBlocks> & {
  type: 'text'
  blocks?: ChatiumBlock<ExtraBlocks>[]
}
declare type TextStyle = {
  color?: Color
  fontSize?: FontSize
  styles?: FontStyle | FontStyle[]
  isBold?: boolean
  lineHeight?: number
}
export declare type TextProps<ExtraBlocks> = {
  onClick?: ChatiumActions
} & TextContent &
  CommonBlockProps<ExtraBlocks> &
  TextStyle
export declare type TextContent =
  | {
      text: string
      tokens?: never
    }
  | {
      tokens: TextToken[]
      text?: never
    }
export declare type TextToken = string | CustomToken
interface CustomToken {
  v: string
  s?: FontStyle[]
  onClick?: ChatiumActions
}
export declare function Text<ExtraBlocks>(
  props: TextProps<ExtraBlocks>,
  ...children: ChatiumChildNode<ExtraBlocks>[]
): Promise<TextBlock<ExtraBlocks>>
export interface HeaderProps<ExtraBlocks> extends WithKey {
  blocks?: ChatiumBlock<ExtraBlocks>[]
  compact: boolean
  logo?: {
    icon: Icon
    onClick?: ChatiumActions
    onContext?: ChatiumActions
  }
  title?: TextBlock<ExtraBlocks>
  description?: TextBlock<ExtraBlocks>
  bottomGradientColors?: string[]
  topGradientColors?: string[]
  image?: {
    downloadUrl: string
    imageSize: {
      width: number
      height: number
    }
  }
}
export interface HeaderBlock<ExtraBlocks> extends HeaderProps<ExtraBlocks> {
  type: 'header'
}
export declare type HeaderFnProps<ExtraBlocks> = Omit<HeaderProps<ExtraBlocks>, 'title' | 'description'> & {
  title?: TextBlock<ExtraBlocks> | Promise<TextBlock<ExtraBlocks>>
  description?: TextBlock<ExtraBlocks> | Promise<TextBlock<ExtraBlocks>>
}
export declare function Header<ExtraBlocks>(
  props: HeaderFnProps<ExtraBlocks>,
  ...children: ChatiumChildNode<ExtraBlocks>[]
): Promise<HeaderBlock<ExtraBlocks>>
export interface SearchProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  bgColor?: Color
  borderColor?: Color
  defaultValue?: string
  delayMs?: number
  fontColor?: Color
  inputPlaceholder?: string
  leftIcon?: Icon
  minLength?: number
  placeholderTextColor?: Color
  queryParamKey: string
  spinnerColor?: Color
}
export interface SearchBlock<ExtraBlocks> extends SearchProps<ExtraBlocks> {
  type: 'search'
}
export declare function Search<ExtraBlocks>(props: SearchProps<ExtraBlocks>): SearchBlock<ExtraBlocks>
export interface ChatProps {
  messages_get_url: string
  messages_add_url?: string
  messages_edit_url: string
  messages_delete_url: string
  messages_changes_url: string
  messages_react_url: string
  mark_as_read_url?: string
  last_read_get_url?: string
  last_message_id: string | null
  last_read_message_id: string | null
  support_paging: boolean
  files_put_url: string
  reply_quotes_enabled: boolean
  current_author: Author | null
  group_author: Author | null
  messages_socket_id: string
  reactions_socket_id: string
  last_read_at: number | null
  last_read_socket_id: string
  typing_socket_data?: TypingSocketData
  pinned?: {
    message?: ChatMessage
    update_url?: string
  }
  render_inverted?: boolean
  on_context_api_call_url?: string
}
interface TypingSocketData {
  id: string
  name: string
  uid: string
}
export interface ChatMessage {
  id: string
  text: string | null
  canEdit: boolean
  bgColor: string | null
  author: Author
  isOutgoing: boolean
  files: Array<ChatiumFileInfo>
  replyTo: ChatReplyMessage | null
  createdAt: number
  updatedAt: number
  createdAtTimestamp: number
}
export declare type ChatReplyMessage = Pick<ChatMessage, 'id' | 'text' | 'files' | 'author'>
export interface ChatiumFileInfo {
  url: string
  hash: string
  mime_type: string
  thumbnail_url_400?: string
  thumbnail_url_50?: string
  meta?: {
    mime?: string
    size?: number
    width?: number
    height?: number
    name?: string
    duration?: number
    extra?: string
  }
}
export interface ChatiumScreen<ExtraBlocks> {
  title: string
  description?: string
  backUrl?: string
  header?: HeaderProps<ExtraBlocks>
  headerButton?: HeaderButton<ExtraBlocks>
  headerLeftButton?: HeaderButton<ExtraBlocks>
  contextLinks?: ContextLink[]
  socketId?: string
  socketIds?: string[]
  blocks?: ChatiumBlock<ExtraBlocks>[]
  dropdownMenuBlocks?: ChatiumBlock<ExtraBlocks>[]
  dropdownMenuInitiallyVisible?: boolean
  pinnedBlocks?: ChatiumBlock<ExtraBlocks>[]
  chat?: ChatProps
  fullScreenGallery?: GalleryProps<ExtraBlocks>
  footer?: FooterProps<ExtraBlocks>
  search?: SearchProps<ExtraBlocks>
  needEmailCheck?: boolean
  needPhoneCheck?: boolean
  scrollTo?: string
  logo?: Icon
  desktopLayout?: 'column' | 'empty' | 'mobile'
  layout?: 'column' | 'empty' | 'mobile'
  columnLayoutStyle?: Record<string, unknown>
  bgColor?: string
  style?: Record<string, unknown>
  meta?: ScreenMeta
  v?: 1 | 2
  preventScreenCapture?: boolean
  onFocus?: ChatiumActions
}
export declare type HeaderButton<ExtraBlocks> = Pick<ButtonProps<ExtraBlocks>, 'icon' | 'onClick'>
interface ContextLink {
  title: string
  icon?: Icon
  action: ChatiumActions
}
declare type ScreenProps<ExtraBlocks> = Omit<
  ChatiumScreen<ExtraBlocks>,
  'blocks' | 'search' | 'headerButton' | 'pinnedBlocks' | 'backUrl'
> & {
  headerButton?: HeaderButton<ExtraBlocks> | Promise<HeaderButton<ExtraBlocks>>
  pinnedBlocks?: ChatiumBlock<ExtraBlocks>[] | Promise<ChatiumBlock<ExtraBlocks>[]>
  backUrl?: string | Promise<string>
}
/**
 * Chatium-json screen constructor.
 * Supports Promises and arrays recursive flattening of the given children
 *  and special handling of search block
 */
export declare function Screen<ExtraBlocks>(
  props: ScreenProps<ExtraBlocks>,
  ...children: ChatiumChildNode<ExtraBlocks>[]
): Promise<ChatiumScreen<ExtraBlocks>>
/**
 * Special JSX fragment block,
 *  useful as a container for multiple children blocks that are inserted into single-block placeholder.
 */
export declare function Fragment<ExtraBlocks>(
  _props?: {},
  ...children: ChatiumChildNode<ExtraBlocks>[]
): ChatiumChildNode<ExtraBlocks>[]
/**
 * Creates a jsx-factory function for the given intrinsic chatium blocks
 */
export declare function jsxFactory<IE extends Record<string, object>, K extends keyof IE, ExtraBlocks>(
  intrinsicBlocks: Record<K, BlockFactory<ExtraBlocks, IE[K]>>,
): {
  <P>(
    block: K | BlockFactory<ExtraBlocks, P>,
    props: IE[K] | P,
    ...children: ChatiumChildNode<ExtraBlocks>[]
  ): JsxNode<ExtraBlocks>
  Fragment: typeof Fragment
}
/**
 * Custom JSX factory for the chatium-json blocks.
 * In tsconfig.json
 *   "jsx": "react",
 *   "jsxFactory": "jsx",
 *
 * Usage in screen-source:
 *  import { jsx } from 'lib/chatium-json/v1'
 */
export declare const jsx: {
  <P>(block: string | BlockFactory<unknown, P>, props: object | P, ...children: unknown[]): unknown
  Fragment: typeof Fragment
}
interface BlockFactory<ExtraBlocks, P = {}> {
  (props: P, ...children: ChatiumChildNode<ExtraBlocks>[]): JsxNode<ExtraBlocks>
}
declare type JsxNode<ExtraBlocks> =
  | ChatiumChildNode<ExtraBlocks>
  | ChatiumChildNode<ExtraBlocks>[]
  | Promise<ChatiumScreen<ExtraBlocks>>
export interface CommonBlockProps<ExtraBlocks> extends WithKey {
  containerStyle?: ContainerStyle | null
  fallback?: ChatiumBlock<ExtraBlocks>
  onContext?: ChatiumActions
  meta?: Record<string, unknown>
}
export interface WithKey {
  /**
   * Helps client-side rendering optimization
   * Auto-generated using consistent compact algorithm, but can be provided by developer manually
   * When provided by developer manually, should be unique only on local level
   *  and is augmented/modified automatically to be unique on screen level
   */
  key?: ChatiumJsonKey
  /**
   * The main meaning is block unique ID
   * This is also translated to client-side key of component, but is slightly different than key itself:
   *  1) It's not auto-generated
   *  2) Is passed without any modifications, uniqueness must be provided by the developer
   *  3) Due to (2) can be used for actions that require some manipulations pointing to the exact block
   */
  id?: ChatiumJsonId
}
export declare type ChatiumJsonId = string
export declare type ChatiumJsonKey = string | number
interface TextStyleInterface {
  color?: Color
  fontSize?: number
  lineHeight?: number
}
export declare type Color = string
export declare type FontSize = 'mini' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | 'xxxlarge'
export declare type FontStyle =
  | FontSize
  | 'bold'
  | 'semibold'
  | 'italic'
  | 'underlined'
  | 'link'
  | 'muted'
  | 'warning'
  | TextStyleInterface
export declare type Icon = {
  appIcon?: string
  iconCssClass?: string
  bgColor?: Color
  color?: Color
  image?: string
  imageSize?: ImageSize
  shape?: 'circle' | 'square'
  text?: string | number
}
export interface StatusIcon extends Icon {
  isAvailable: boolean
}
export interface Author {
  id: string
  name: string
  avatar: Icon
  onClick?: ChatiumActions
}
export declare type ImageSize = ImageSizePreset | number
export declare type ImageSizePreset = 'xxlarge' | 'xlarge' | 'large' | 'medium' | 'small' | 'mini'
export interface ContainerStyle {
  alignContent?: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'space-between' | 'space-around'
  alignItems?: FlexAlignType
  alignSelf?: 'auto' | FlexAlignType
  bgColor?: Color
  flexBasis?: number | string
  flexGrow?: number
  flexDirection?: 'row' | 'column' | 'row-reverse' | 'column-reverse'
  flexShrink?: number
  flexWrap?: 'wrap' | 'nowrap' | 'wrap-reverse'
  justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'
  marginBottom?: number | string
  marginLeft?: number | string
  marginRight?: number | string
  marginTop?: number | string
  padding?: number | string
  paddingBottom?: number | string
  paddingLeft?: number | string
  paddingRight?: number | string
  paddingTop?: number | string
  opacity?: number | string
  borderRadius?: number
  borderBottomLeftRadius?: number
  borderBottomRightRadius?: number
  borderTopLeftRadius?: number
  borderTopRightRadius?: number
  borderColor?: Color
  borderBottomColor?: Color
  borderLeftColor?: Color
  borderRightColor?: Color
  borderTopColor?: Color
  borderWidth?: 'hairline' | number
  borderBottomWidth?: 'hairline' | number
  borderLeftWidth?: 'hairline' | number
  borderRightWidth?: 'hairline' | number
  borderTopWidth?: 'hairline' | number
  borderStyle?: 'solid' | 'dotted' | 'dashed'
  position?: 'absolute' | 'relative'
  bottom?: number | string
  left?: number | string
  right?: number | string
  top?: number | string
  height?: number | string
  width?: number | string
  default?: boolean
}
declare type FlexAlignType = 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline'
export interface OverlayProps<ExtraBlocks> {
  id?: ChatiumJsonId
  gradientColors?: string[]
  blocks: ChatiumBlock<ExtraBlocks>[]
  containerStyle?: ContainerStyle
}
export interface AudioProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  title?: string
  description?: string
  downloadUrl: string
  fileHash: string | null
  durationSeconds?: number
}
export interface AudioBlock<ExtraBlocks> extends AudioProps<ExtraBlocks> {
  type: 'audio'
}
export declare function Audio<ExtraBlocks>(props: AudioProps<ExtraBlocks>): AudioBlock<ExtraBlocks>
export interface CardProps {
  id?: string
  text?: string
  imageUrl?: string
  onClick?: ChatiumActions
  onContext?: ChatiumActions
  borderColor?: string
  bgColor?: string
  opacity?: number
}
export interface HorizontalCardsProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  size: 'small' | 'medium' | 'large'
  shape: 'circle' | 'square' | 'rectangleHorizontal' | 'rectangleVertical'
  textPosition: 'none' | 'insideBottom' | 'outsideBottom'
  initialCardId?: string
  cards: Array<CardProps>
}
export interface HorizontalCardsBlock<ExtraBlocks> extends HorizontalCardsProps<ExtraBlocks> {
  type: 'horizontalCards'
}
export declare function HorizontalCards<ExtraBlocks>(
  props: HorizontalCardsProps<ExtraBlocks>,
): HorizontalCardsBlock<ExtraBlocks>
export declare function Card(props: CardProps): CardProps
export interface ImageProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  downloadUrl: string
  onClick?: ChatiumActions
  width?: number
  height?: number
  image?: any
  resizeMode?: string
  imageSize?: {
    width: number
    height: number
  }
}
export interface ImageBlock<ExtraBlocks> extends ImageProps<ExtraBlocks> {
  type: 'image'
}
export declare function Image<ExtraBlocks>(props: ImageProps<ExtraBlocks>): ImageBlock<ExtraBlocks>
export interface ListItemProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  description?: string
  imageSize?: ImageSize
  logo?: Icon
  onClick?: ChatiumActions
  status?: StatusIcon
  title: string
  titleColor?: Color
  updatedAtTimestamp?: number
  unreadBullet?: boolean
  active?: boolean
  upTitle?: string
  upTitleColor?: Color
  url?: string
}
export interface ListItemBlock<ExtraBlocks> extends ListItemProps<ExtraBlocks> {
  type: 'screen'
}
export declare function ListItem<ExtraBlocks>(props: ListItemProps<ExtraBlocks>): ListItemBlock<ExtraBlocks>
interface CommonVideoProps<ExtraBlocks> extends CommonBlockProps<ExtraBlocks> {
  hlsUrl?: string
  imageUrl?: string
  mp4Url?: string
  videoAspectRatio?: [number, number]
}
export interface VideoProps<ExtraBlocks> extends CommonVideoProps<ExtraBlocks> {
  url?: string
  file?: {
    hash: string
  }
}
export interface VideoBlock<ExtraBlocks> extends VideoProps<ExtraBlocks> {
  type: 'video'
}
export declare function Video<ExtraBlocks>(props: VideoProps<ExtraBlocks>): VideoBlock<ExtraBlocks>
export interface InlineVideoProps<ExtraBlocks> extends CommonVideoProps<ExtraBlocks> {
  ignoreSilentSwitch?: 'ignore' | 'obey'
  muted?: boolean
  onProgressChange?: ProgressChangeProps[]
  overlay?: OverlayProps<ExtraBlocks>
  onVideoEnd?: ChatiumActions
  paused?: boolean
  playInBackground?: boolean
  playWhenInactive?: boolean
  repeat?: boolean
  resizeMode?: 'contain' | 'cover' | 'stretch'
  showControls?: 'full' | 'compact' | 'mini' | 'none'
  showTimer?: boolean
  url: string
  videoSize?: VideoSize
}
export interface ProgressChangeProps {
  cond: string
  action: ChatiumActions
}
export interface VideoSize {
  width: number
  height: number
}
export interface InlineVideoBlock<ExtraBlocks> extends InlineVideoProps<ExtraBlocks> {
  type: 'inlineVideo'
}
export declare function InlineVideo<ExtraBlocks>(props: InlineVideoProps<ExtraBlocks>): InlineVideoBlock<ExtraBlocks>
export declare type ChatiumBlock<ExtraBlocks> =
  | AudioBlock<ExtraBlocks>
  | ButtonBlock<ExtraBlocks>
  | FooterBlock<ExtraBlocks>
  | GalleryBlock<ExtraBlocks>
  | HeaderBlock<ExtraBlocks>
  | HorizontalCardsBlock<ExtraBlocks>
  | ImageBlock<ExtraBlocks>
  | InlineVideoBlock<ExtraBlocks>
  | ListItemBlock<ExtraBlocks>
  | SearchBlock<ExtraBlocks>
  | TextBlock<ExtraBlocks>
  | VideoBlock<ExtraBlocks>
  | ExtraBlocks
/**
 * Union of all kinds of responses supported by the chatium router
 */
export declare type ChatiumResponse<ExtraBlocks> =
  | ApiCallResponse<ExtraBlocks>
  | ScreenResponse<ExtraBlocks>
  | CustomResponse
/**
 * Standard response for apiCall client action
 */
export declare type ApiCallResponse<ExtraBlocks> =
  | ApiCallSuccessResponse<ExtraBlocks>
  | ApiCallErrorResponse<ExtraBlocks>
export interface ApiCallErrorResponse<ExtraBlocks> extends ChatiumErrorResponse, ApiCallResponseFields<ExtraBlocks> {}
interface ApiCallSuccessResponse<ExtraBlocks> extends ApiCallResponseFields<ExtraBlocks> {
  success: true
}
export interface ApiCallResponseFields<ExtraBlocks> {
  appAction?: ChatiumActions
  appScreens?: Record<string, ChatiumScreen<ExtraBlocks>>
}
/**
 * Standard get-screen response
 */
export declare type ScreenResponse<ExtraBlocks> = ScreenSuccessResponse<ExtraBlocks> | ScreenErrorResponse<ExtraBlocks>
export interface ScreenSuccessResponse<ExtraBlocks> extends ScreenResponseFields<ExtraBlocks> {
  success: true
}
export interface ScreenErrorResponse<ExtraBlocks>
  extends ChatiumErrorResponse,
    Partial<ScreenResponseFields<ExtraBlocks>> {}
interface ScreenResponseFields<ExtraBlocks> {
  data: ChatiumScreen<ExtraBlocks>
  appScreens?: Record<string, ChatiumScreen<ExtraBlocks>>
  preloadMedia?: string[]
}
/**
 * Untyped direct data response
 */
export declare type CustomResponse = CustomSuccessResponse | CustomErrorResponse
declare type CustomSuccessResponse = unknown | TuneHttpHeadersResponse
export declare type CustomErrorResponse = ChatiumErrorResponse
/**
 * Special format recognized by the router to allow tuning of headers and status code
 */
export interface TuneHttpHeadersResponse<Body = unknown> {
  rawHttpBody: Body
  headers?: Record<string, string | undefined>
  statusCode?: number
}
export declare function isTuneHttpHeadersResponse(resp: any): resp is TuneHttpHeadersResponse
/**
 * Standard error shape
 * Can be extended depending on request type, see below
 */
export interface ChatiumErrorResponse extends ChatiumErrorFields {
  success: false
}
export interface ChatiumErrorFields {
  errorType?: string
  statusCode: number
  reason: string
  [key: string]: unknown
}
export declare function isChatiumErrorResponse(val: any): val is ChatiumErrorResponse
export declare function screenResponse<ExtraBlocks>(props: ScreenResponseFields<ExtraBlocks>): {
  data: ChatiumScreen<ExtraBlocks>
  appScreens?: Record<string, ChatiumScreen<ExtraBlocks>> | undefined
  preloadMedia?: string[] | undefined
  success: boolean
}
export declare function apiCallResponse<ExtraBlocks>(props: ApiCallResponseFields<ExtraBlocks>): {
  appAction?: ChatiumActions | undefined
  appScreens?: Record<string, ChatiumScreen<ExtraBlocks>> | undefined
  success: boolean
}
/**
 * JSX Intrinsic elements support for chatium blocks.
 * To enable jsx typings:
 * ```
 * declare global {
 *   namespace JSX {
 *     interface IntrinsicElements extends ChatiumIntrinsicElements<never> {
 *       // here may be some additional elements declarations
 *     }
 *   }
 * }
 * ```
 */
export interface ChatiumIntrinsicElements<ExtraBlocks> {
  audio: AudioProps<ExtraBlocks>
  button: ButtonProps<ExtraBlocks>
  f: {}
  footer: FooterProps<ExtraBlocks>
  gallery: GalleryProps<ExtraBlocks>
  header: HeaderProps<ExtraBlocks>
  image: ImageProps<ExtraBlocks>
  'list-item': ListItemProps<ExtraBlocks>
  'horizontal-cards': HorizontalCardsProps<ExtraBlocks>
  screen: ScreenProps<ExtraBlocks>
  search: SearchProps<ExtraBlocks>
  text: TextProps<ExtraBlocks>
  video: VideoProps<ExtraBlocks>
}
export declare const intrinsicBlocks: {
  audio: typeof Audio
  button: typeof Button
  f: typeof Fragment
  footer: typeof Footer
  gallery: typeof Gallery
  header: typeof Header
  'horizontal-cards': typeof HorizontalCards
  image: typeof Image
  'list-item': typeof ListItem
  screen: typeof Screen
  search: typeof Search
  text: typeof Text
  video: typeof Video
}
interface LayoutBottomTabs {
  tabs?: LayoutMenuItem[]
  activeTintColor?: string
  inactiveTintColor?: string
}
interface LayoutMenuItem {
  id?: string
  type: 'tab' | 'button'
  title?: string
  url?: string
  onClick?: ChatiumActions
  icon: IconProps
  key?: string
}

export {}
