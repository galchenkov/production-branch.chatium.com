import * as sf from 'core/heap/v2/StorageFile'
import { VideoSize } from 'lib/chatium-json/v1'
import { AudioBlock, ImageBlock, ImageProps, VideoBlock } from 'lib/chatium-json/v2'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare type HashMediaType = 'file' | 'video' | 'image' | 'audio'
export declare function getFileTypeFromHash(hash: string): HashMediaType
export declare function getDurationFromHash(hash: string | undefined): number | undefined
export declare function getSizesFromHash(hash: string | null):
  | {
      width: number
      height: number
    }
  | undefined
interface VideoInfo {
  hash: string
  url: string | null
  hlsUrl: string | undefined
  mp4Url: string | undefined
  status: FileServiceResponse['status']
  progress: number
  imageUrl: string
  /** @deprecated always undefined */
  videoSize: VideoSize | undefined
  videoAspectRatio: [number, number] | undefined
}
interface FileServiceResponse {
  status: 'done' | 'processing' | 'error'
  width_aspect_ratio?: number
  height_aspect_ratio?: number
  progress?: number
  kinescopeVideoId?: string | number
  integrosVideoId?: string | number
  cloudflareVideoId?: string | number
}
declare abstract class StorageFile implements IStorageFile {
  readonly hash: string
  protected abstract readonly fileServiceHost: string
  constructor(hash: string)
  toJSON(): string
  get type(): HashMediaType
  get downloadUrl(): string
}
interface IStorageFile {
  hash: string
  type: HashMediaType
  downloadUrl: string
  toJSON(): string
}
declare abstract class StorageFileWithSizes extends StorageFile implements IStorageFileWithSizes {
  #private
  get width(): number
  get widthMaybe(): number | undefined
  get height(): number
  get heightMaybe(): number | undefined
  get sizes(): {
    width: number
    height: number
  }
  get sizesMaybe():
    | {
        width: number
        height: number
      }
    | undefined
}
interface IStorageFileWithSizes extends IStorageFile {
  width: number
  widthMaybe: number | undefined
  height: number
  heightMaybe: number | undefined
  sizes: {
    width: number
    height: number
  }
  sizesMaybe:
    | {
        width: number
        height: number
      }
    | undefined
}
declare abstract class StorageImageFile extends StorageFileWithSizes implements IStorageImageFile {
  get type(): 'image'
  getThumbnailUrl(width?: number, height?: number): string
  /**
   * Returns the image's URL and sizes in format accepted by src property of <image> block.
   */
  getThumbnailSrc(width?: number, height?: number): ImageBlock['src']
}
interface IStorageImageFile extends IStorageFileWithSizes {
  getThumbnailUrl(width?: number, height?: number): string
  getThumbnailSrc(width?: number, height?: number): ImageBlock['src']
}
declare abstract class StorageVideoFile extends StorageFileWithSizes implements IStorageVideoFile {
  #private
  get type(): 'video'
  getThumbnailUrl(width?: number, height?: number, offsetSeconds?: 'auto' | number): string
  /**
   * Returns the video's frame thumbnail URL and sizes in format accepted by src property of <image> block.
   */
  getThumbnailSrc(width?: number, height?: number, offsetSeconds?: 'auto' | number): ImageBlock['src']
  get duration(): number
  get durationMaybe(): number | undefined
  get videoSrc(): Promise<VideoBlock['src']>
  get status(): Promise<'done' | 'processing' | 'error'>
  get progress(): Promise<number>
  protected abstract getVideoInfo(): Promise<VideoInfo>
  private get videoInfo()
}
interface IStorageVideoFile extends IStorageFileWithSizes {
  duration: number
  durationMaybe: number | undefined
  videoSrc: Promise<VideoBlock['src']>
  status: Promise<'done' | 'processing' | 'error'>
  progress: Promise<number>
  getThumbnailUrl(width?: number, height?: number, offsetSeconds?: 'auto' | number): string
  getThumbnailSrc(width?: number, height?: number, offsetSeconds?: 'auto' | number): ImageBlock['src']
}
declare abstract class StorageAudioFile extends StorageFile implements IStorageAudioFile {
  #private
  get type(): 'audio'
  get duration(): number
  get durationMaybe(): number | undefined
  get audioSrc(): AudioBlock['src']
}
interface IStorageAudioFile extends IStorageFile {
  duration: number
  durationMaybe: number | undefined
  audioSrc: AudioBlock['src']
}
export declare class StorageFile extends sf.StorageFile implements sf.IStorageFile {
  protected readonly fileServiceHost: string
}
export declare class StorageImageFile extends sf.StorageImageFile implements sf.IStorageImageFile {
  protected readonly fileServiceHost: string
}
export declare class StorageVideoFile extends sf.StorageVideoFile implements sf.IStorageVideoFile {
  protected readonly fileServiceHost: string
  protected getVideoInfo(): Promise<VideoInfo>
}
export declare class StorageAudioFile extends sf.StorageAudioFile implements sf.IStorageAudioFile {
  protected readonly fileServiceHost: string
}
export declare function isImageFile(file: sf.IStorageFile): file is sf.IStorageImageFile
export declare function isVideoFile(file: sf.IStorageFile): file is sf.IStorageVideoFile
export declare function isAudioFile(file: sf.IStorageFile): file is sf.IStorageAudioFile
export declare function createStorageFileFromHash(hash: string): sf.IStorageFile
/**
 * current:
 * getVideoInfo(ctx: RichUgcCtx, hash: string)
 *
 * deprecated:
 * getVideoInfo(hash: strign)
 */
export declare function getVideoInfo(one: RichUgcCtx | string | undefined, two?: string): Promise<VideoInfo>
/**
 * current:
 * getThumbnailUrl(ctx: RichUgcCtx, hash: strign, width: number, height: number)
 *
 * deprecated:
 * getThumbnailUrl(hash: strign, width?: number, height?: number)
 */
export declare function getThumbnailUrl(
  one: RichUgcCtx | string | undefined,
  two?: string | number,
  three?: number,
  four?: number,
): string
/**
 * current:
 * getDownloadUrl(ctx: RichUgcCtx, hash: strign)
 *
 * deprecated:
 * getDownloadUrl(hash: strign)
 */
export declare function getDownloadUrl(one: RichUgcCtx | string | undefined, two?: string): string
/**
 * current:
 * getImageSrcFromHash(ctx: RichUgcCtx, hash: string, width?: number, height?: number)
 *
 * deprecated:
 * getImageSrcFromHash(hash: string, width?: number, height?: number)
 */
export declare function getImageSrcFromHash(
  one: string | RichUgcCtx,
  two?: string | number,
  three?: number,
  four?: number,
): ImageProps['src']
export declare const filePutUrl: string

export {}
