/// <reference types="node" />

declare class RequestErrorClass extends Error {}
declare class HTTPErrorClass extends RequestErrorClass {
  readonly request: ChatiumHttpRequestOptions
  readonly response: Response
  constructor(request: ChatiumHttpRequestOptions, response: Response)
}
export declare function request(options: TextResponseOptions): Promise<Response<string>>
export declare function request(options: Merge<TextResponseOptions, ResponseBodyOnly>): Promise<string>
export declare function request<T = unknown>(options: Options): Promise<Response<T>>
export declare function request<T = unknown>(options: Merge<Options, ResponseBodyOnly>): Promise<T>
export declare function request(url: string, options?: NoUrl<TextResponseOptions>): Promise<Response<string>>
export declare function request(
  url: string,
  options?: Merge<NoUrl<TextResponseOptions>, ResponseBodyOnly>,
): Promise<string>
export declare function request<T = unknown>(url: string, options?: NoUrl<Options>): Promise<Response<T>>
export declare function request<T = unknown>(url: string, options?: Merge<NoUrl<Options>, ResponseBodyOnly>): Promise<T>
export declare namespace request {
  var get: typeof reqGet
  var head: typeof reqHead
  var options: typeof reqOptions
  var post: typeof reqPost
  var put: typeof reqPut
  var patch: typeof reqPatch
  var del: typeof reqDel
  var HTTPError: typeof HTTPErrorClass
}
declare type NoUrl<T> = Omit<T, 'url'>
declare type NoBody<T> = Omit<NoMethod<T>, 'body' | 'json' | 'form'>
declare function reqGet(url: string, options?: NoBody<TextResponseOptions>): Promise<Response<string>>
declare function reqGet(url: string, options?: Merge<NoBody<TextResponseOptions>, ResponseBodyOnly>): Promise<string>
declare function reqGet<T = unknown>(url: string, options?: NoBody<Options>): Promise<Response<T>>
declare function reqGet<T = unknown>(url: string, options?: Merge<NoBody<Options>, ResponseBodyOnly>): Promise<T>
declare function reqHead(url: string, options?: NoBody<TextResponseOptions>): Promise<Response<string>>
declare function reqHead(url: string, options?: Merge<NoBody<TextResponseOptions>, ResponseBodyOnly>): Promise<string>
declare function reqHead<T = unknown>(url: string, options?: NoBody<Options>): Promise<Response<T>>
declare function reqHead<T = unknown>(url: string, options?: Merge<NoBody<Options>, ResponseBodyOnly>): Promise<T>
declare function reqOptions(url: string, options?: NoBody<TextResponseOptions>): Promise<Response<string>>
declare function reqOptions(
  url: string,
  options?: Merge<NoBody<TextResponseOptions>, ResponseBodyOnly>,
): Promise<string>
declare function reqOptions<T = unknown>(url: string, options?: NoBody<Options>): Promise<Response<T>>
declare function reqOptions<T = unknown>(url: string, options?: Merge<NoBody<Options>, ResponseBodyOnly>): Promise<T>
declare type NoMethod<T> = Omit<NoUrl<T>, 'method'>
declare function reqPost(
  url: string,
  data?: BodyData,
  options?: NoMethod<TextResponseOptions>,
): Promise<Response<string>>
declare function reqPost(
  url: string,
  data?: BodyData,
  options?: Merge<NoMethod<TextResponseOptions>, ResponseBodyOnly>,
): Promise<string>
declare function reqPost<T = unknown>(url: string, data?: BodyData, options?: NoMethod<Options>): Promise<Response<T>>
declare function reqPost<T = unknown>(
  url: string,
  data?: BodyData,
  options?: Merge<NoMethod<Options>, ResponseBodyOnly>,
): Promise<T>
declare function reqPut(
  url: string,
  data?: BodyData,
  options?: NoMethod<TextResponseOptions>,
): Promise<Response<string>>
declare function reqPut(
  url: string,
  data?: BodyData,
  options?: Merge<NoMethod<TextResponseOptions>, ResponseBodyOnly>,
): Promise<string>
declare function reqPut<T = unknown>(url: string, data?: BodyData, options?: NoMethod<Options>): Promise<Response<T>>
declare function reqPut<T = unknown>(
  url: string,
  data?: BodyData,
  options?: Merge<NoMethod<Options>, ResponseBodyOnly>,
): Promise<T>
declare function reqPatch(
  url: string,
  data?: BodyData,
  options?: NoMethod<TextResponseOptions>,
): Promise<Response<string>>
declare function reqPatch(
  url: string,
  data?: BodyData,
  options?: Merge<NoMethod<TextResponseOptions>, ResponseBodyOnly>,
): Promise<string>
declare function reqPatch<T = unknown>(url: string, data?: BodyData, options?: NoMethod<Options>): Promise<Response<T>>
declare function reqPatch<T = unknown>(
  url: string,
  data?: BodyData,
  options?: Merge<NoMethod<Options>, ResponseBodyOnly>,
): Promise<T>
declare function reqDel(url: string, options?: NoMethod<TextResponseOptions>): Promise<Response<string>>
declare function reqDel(url: string, options?: Merge<NoMethod<TextResponseOptions>, ResponseBodyOnly>): Promise<string>
declare function reqDel<T = unknown>(url: string, options?: NoMethod<Options>): Promise<Response<T>>
declare function reqDel<T = unknown>(url: string, options?: Merge<NoMethod<Options>, ResponseBodyOnly>): Promise<T>
declare type BodyData = string | Record<string, unknown> | unknown[] | null
interface ChatiumHttpRequestOptions {
  url: string
  method?: Method
  body?: string
  json?: Record<string, unknown> | unknown[]
  form?: Record<string, unknown>
  headers?: Record<string, string | string[] | undefined>
  searchParams?: string | Record<string, string | number | boolean | null | undefined>
  responseType?: 'json' | 'text'
  resolveBodyOnly?: boolean
  username?: string
  password?: string
  throwHttpErrors?: boolean
}
declare type Options = ChatiumHttpRequestOptions
declare type TextResponseOptions = Merge<
  Options,
  {
    resolveBodyOnly?: false
    responseType?: 'text'
  }
>
declare type ResponseBodyOnly = {
  resolveBodyOnly: true
}
declare type Except<ObjectType, KeysType extends keyof ObjectType> = Pick<
  ObjectType,
  Exclude<keyof ObjectType, KeysType>
>
declare type Merge<FirstType, SecondType> = Except<FirstType, Extract<keyof FirstType, keyof SecondType>> & SecondType
interface ChatiumHttpResponse<T = unknown> {
  body: T
  statusCode: number
  headers: IncomingHttpHeaders
}
export declare type Response<T = unknown> = ChatiumHttpResponse<T>
declare type Method =
  | 'GET'
  | 'POST'
  | 'PUT'
  | 'PATCH'
  | 'HEAD'
  | 'DELETE'
  | 'OPTIONS'
  | 'TRACE'
  | 'get'
  | 'post'
  | 'put'
  | 'patch'
  | 'head'
  | 'delete'
  | 'options'
  | 'trace'

export {
  HTTPErrorClass as HTTPError,
  reqDel as del,
  reqGet as get,
  reqHead as head,
  reqOptions as options,
  reqPatch as patch,
  reqPost as post,
  reqPut as put,
  request as default,
}

export {}
