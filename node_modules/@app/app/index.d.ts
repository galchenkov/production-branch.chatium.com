import { ChatiumActions } from 'lib/chatium-json'
import { IconProps } from 'lib/chatium-json/v2'
import {
  UgcAppServiceApiAccount,
  UgcAppServiceApiApp,
  UgcAppServiceApiLayout,
  UgcAppServiceApiModule,
} from 'services/ugc-runner/runtime/runtimeTypes'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare enum Currency {
  USD = 'USD',
  RUB = 'RUB',
  EUR = 'EUR',
}
interface Money {
  amount: number
  currency: Currency
}
interface Layout {
  leftMenu?: {
    items?: LayoutMenuItem
  }
  bottomTabs?: LayoutBottomTabs
}
interface LayoutBottomTabs {
  tabs?: LayoutMenuItem[]
  activeTintColor?: string
  inactiveTintColor?: string
}
interface LayoutMenuItem {
  id?: string
  type: 'tab' | 'button'
  title?: string
  url?: string
  onClick?: ChatiumActions
  icon: IconProps
  key?: string
}
export declare function findAuthAccountsWithCurrentApp(ctx: RichUgcCtx): Promise<UgcAppServiceApiAccount[]>
export declare function getAccountApps(_ctx: RichUgcCtx): Promise<UgcAppServiceApiApp[]>
export declare function getAccountUApps(_ctx: RichUgcCtx): Promise<UgcAppServiceApiModule[]>
export declare function getAccountRcLayout(ctx: RichUgcCtx): Promise<UgcAppServiceApiLayout>
export declare function updateUAppSettings(
  ctx: RichUgcCtx,
  uappName: string,
  settingsSlug: string,
  value: object,
): Promise<void>
export declare function readUAppSettings(
  _ctx: RichUgcCtx,
  uappName: string,
  settingsSlug: string,
  defaultValue?: object,
): Promise<object>
export declare function appApiCall<R = Record<string, unknown>>(
  ctx: RichUgcCtx,
  appSlug: string,
  path: string,
  payload: Record<string, unknown>,
): Promise<R>

export {}
