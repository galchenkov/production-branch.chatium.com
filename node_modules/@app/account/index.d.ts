import { ApiCallAction, AttachMediaAction, QueryParamsOption, apiCall, navigate } from 'lib/chatium-json'
import { Icon } from 'lib/chatium-json/v1'
import { UgcAccount, UgcCreateAccountOptions, UgcUpdateAccountSettings } from 'services/ugc-runner/runtime/runtimeTypes'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare type Lang = string
declare type HeapId = string
declare type AccountUrlFn = {
  accountUrlParams: AccountUrlParams
  (path: string, options?: QueryParamsOption): string
}
interface AccountUrlParams {
  accountName: string
  accountHost: string
  accountPathPrefix: string
  pluginAppInfo?: UgcPluginAppUrlInfo
}
declare type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace' | 'unknown'
declare type UgcKvOpts = {
  [key: string]: string | number | undefined
}
declare type LogParams = {
  err?: Error
  kv?: UgcKvOpts
  json?: unknown
  level?: LogLevel
  msg?: string | number
}
declare type LogParamsNoMsg = Omit<LogParams, 'msg'>
declare class RichUgcAccount implements Omit<UgcCtxAccount, 'metaHash'> {
  private acc
  private richUgcCtx
  readonly id: number
  readonly name: string
  readonly host: string
  readonly pathPrefix: string
  readonly authType: AccountAuthType
  private readonly metaHash
  constructor(acc: UgcCtxAccount, richUgcCtx: RichUgcCtx)
  get externalHost(): string | null
  get publishedVersion(): string | null
  url: AccountUrlFn
  apiCall<P>(url: string, apiParams?: P, options?: Parameters<typeof apiCall>[2]): ApiCallAction<P>
  navigate(url: string, options?: Parameters<typeof navigate>[1]): ReturnType<typeof navigate>
  /** @deprecated use ctx.account.url(path) instead */
  externalUrl(path: string): string
  redirect(targetPath: string): never
  /**
   * Returns attachMedia action targeted to the proper chatium file-service url bound to the account
   */
  attachMedia(params: Omit<AttachMediaAction, 'type' | 'filePutUrl' | 'getPutUrl'>): AttachMediaAction
  toJSON(): UgcCtxAccount
  log(params: LogParams): void
  log(msg: string | number, params?: LogParamsNoMsg): void
  log(msg: string | number, err?: Error): void
  log(err: Error): void
}
declare type AccountAuthType = 'Email' | 'Phone' | 'Multi'
interface UgcPluginAppUrlInfo {
  appSlug: string
  /** path to the application root directory */
  directoryPath: string
}
interface UgcCtxAccount {
  id: number
  name: string
  host: string
  authType: AccountAuthType
  /** @deprecated use host instead */
  externalHost: string | null
  publishedVersion: string | null
  metaHash: string
  pathPrefix: string
}
export declare function getOwnedAccountsForUser(ctx: RichUgcCtx, userId?: HeapId): Promise<UgcAccount[]>
export declare function getAccountById(ctx: RichUgcCtx, id: number): Promise<RichUgcAccount>
export declare function findAccountsById(ctx: RichUgcCtx, ids: number[]): Promise<RichUgcAccount[]>
export declare function cloneEntityToAccount(
  userId: string,
  sourceAccountName: string,
  sourceAccountPath: string,
  destAccountName: string,
  destAccountPath?: string,
): Promise<string>
export declare function registerNewAccount(
  ctx: RichUgcCtx,
  name: string,
  options?: UgcCreateAccountOptions,
): Promise<RichUgcAccount>
/**
 * Installs the given application to the given child account
 */
export declare function installAppToChildAccount(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  appSlug: string,
): Promise<void>
export declare function updateChildAccountStartApp(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  startAppSlug: string | null,
): Promise<void>
export declare function getCurrentAccountSettings(_ctx: RichUgcCtx): Promise<UgcAccount>
export declare function updateCurrentAccountSettings(
  _ctx: RichUgcCtx,
  settings: UgcUpdateAccountSettings,
): Promise<void>
/**
 * Installs the given application to the current account.
 * Can be called only from the application with the appropriate permissions.
 * Doesn't work for the account code itself.
 */
export declare function installApp(ctx: RichUgcCtx, appSlug: string): Promise<void>
/**
 * Uninstalls the given application from the current account.
 * Can be called only from the application with the appropriate permissions.
 * Doesn't work for the account code itself.
 */
export declare function uninstallApp(ctx: RichUgcCtx, appSlug: string): Promise<void>
/**
 * @deprecated
 */
export declare function persistentPlaygroundAccount(
  userId: HeapId,
  name: string,
  title?: string,
  logo?: Icon,
): Promise<UgcAccount | null>

export {}
