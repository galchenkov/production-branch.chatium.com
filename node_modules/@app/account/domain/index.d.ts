import { ApiCallAction, AttachMediaAction, QueryParamsOption, apiCall, navigate } from 'lib/chatium-json'
import { UgcAccount, UgcDomain } from 'services/ugc-runner/runtime/runtimeTypes'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare type PublicFieldsOfClass<T> = {
  [Property in keyof T]: T[Property]
}
declare type Lang = string
declare type AccountUrlFn = {
  accountUrlParams: AccountUrlParams
  (path: string, options?: QueryParamsOption): string
}
interface AccountUrlParams {
  accountName: string
  accountHost: string
  accountPathPrefix: string
  pluginAppInfo?: UgcPluginAppUrlInfo
}
declare type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace' | 'unknown'
declare type UgcKvOpts = {
  [key: string]: string | number | undefined
}
declare type LogParams = {
  err?: Error
  kv?: UgcKvOpts
  json?: unknown
  level?: LogLevel
  msg?: string | number
}
declare type LogParamsNoMsg = Omit<LogParams, 'msg'>
declare class RichUgcAccount implements Omit<UgcCtxAccount, 'metaHash'> {
  private acc
  private richUgcCtx
  readonly id: number
  readonly name: string
  readonly host: string
  readonly pathPrefix: string
  readonly authType: AccountAuthType
  private readonly metaHash
  constructor(acc: UgcCtxAccount, richUgcCtx: RichUgcCtx)
  get externalHost(): string | null
  get publishedVersion(): string | null
  url: AccountUrlFn
  apiCall<P>(url: string, apiParams?: P, options?: Parameters<typeof apiCall>[2]): ApiCallAction<P>
  navigate(url: string, options?: Parameters<typeof navigate>[1]): ReturnType<typeof navigate>
  /** @deprecated use ctx.account.url(path) instead */
  externalUrl(path: string): string
  redirect(targetPath: string): never
  /**
   * Returns attachMedia action targeted to the proper chatium file-service url bound to the account
   */
  attachMedia(params: Omit<AttachMediaAction, 'type' | 'filePutUrl' | 'getPutUrl'>): AttachMediaAction
  toJSON(): UgcCtxAccount
  log(params: LogParams): void
  log(msg: string | number, params?: LogParamsNoMsg): void
  log(msg: string | number, err?: Error): void
  log(err: Error): void
}
declare type AccountAuthType = 'Email' | 'Phone' | 'Multi'
interface UgcPluginAppUrlInfo {
  appSlug: string
  /** path to the application root directory */
  directoryPath: string
}
interface UgcCtxAccount {
  id: number
  name: string
  host: string
  authType: AccountAuthType
  /** @deprecated use host instead */
  externalHost: string | null
  publishedVersion: string | null
  metaHash: string
  pathPrefix: string
}
declare type RequestDomainControlType = typeof validRequestDomainControlTypes[number]
declare const validRequestDomainControlTypes: readonly ['ZoneAndCert', 'OnlyCert', 'ProxiedCert', 'OnlyRoute']
declare class DomainHelperClass {
  id: number
  account_id: number
  name: string
  created_at: Date
  is_ready: boolean
  control_type: DomainControlType
  dns_records: DnsRecord[]
  lang: Lang | null
  path_prefix: string
  checked_at: Date
  constructor(
    id: number,
    account_id: number,
    name: string,
    created_at: Date,
    is_ready: boolean,
    control_type: DomainControlType,
    dns_records: DnsRecord[],
    lang: Lang | null,
    path_prefix: string,
    checked_at: Date,
  )
}
export declare type DomainControlType = RequestDomainControlType | 'External'
declare type DnsRecordType = 'A' | 'AAAA' | 'CNAME' | 'TXT' | 'NS' | 'MX' | 'PTR' | 'SRV' | 'CERT'
export interface DnsRecord {
  id: string
  type: DnsRecordType
  name: string
  value: string
  ttl: number
}
declare type Domain = PublicFieldsOfClass<DomainHelperClass>
export declare function addAccountDomain(ctx: RichUgcCtx, props: AddAccountDomainProps): Promise<UgcDomain>
export declare function setAccountPrimaryDomain(
  ctx: RichUgcCtx,
  { domain: domainOrId, childAccount: childAccountOrId }: SetAccountPrimaryDomainProps,
): Promise<void>
interface AddAccountDomainProps {
  childAccount?: number | UgcAccount | RichUgcAccount
  name: string
  controlType: DomainControlType
  lang?: Lang
  dnsRecords?: DnsRecord[]
  pathPrefix?: string
}
interface SetAccountPrimaryDomainProps {
  domain: number | UgcDomain | null
  childAccount?: number | UgcAccount | RichUgcAccount
}

export { UgcDomain as AccountDomain }

export {}
