import { ChatiumActions } from 'lib/chatium-json'
import { DesktopLayout, IconProps, ResponsiveState, ResponsiveStateOptions, ScreenPropsV2 } from 'lib/chatium-json/v2'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare type Lang = string
declare type UgcFileStorage = 'cgs' | 'db'
declare type CgsRepoVersion = string
interface ChatiumRc {
  defaultDesktopLayout?: DesktopLayout
  favicon?: string
  faviconHash?: string
  fonts?: ScreenPropsV2['fonts']
  htmlTemplate?: string
  ogDescription?: string
  ogImage?: string
  ogImageHash?: string
  ogTitle?: string
  ogType?: string
  title?: string
  titleScreen?: string
  headExtra?: string[]
  bodyExtra?: string[]
  layout?: Layout | string
  i18n?: {
    /**
     * Language, in which the in-code key strings are defined.
     * It's important to only set this if the keys are really of that language, not technical IDs
     *  because this info is used for proper language bundle loading.
     */
    keyLang?: Lang | null
    /**
     * List of languages to which auto-translation actions will target when they are activated
     */
    autoTranslateLangs?: Lang[]
    /**
     * List of languages that are considered supported in this account.
     * 'auto-detect-all' (default) - collect a combined set of translation languages from the account code,
     *                               external dependencies, and all connected plugin apps.
     * 'auto-detect-local-with-externals' - collect a combined set of translation languages only from the account code
     *                                      and external dependencies, without plugin apps
     * 'auto-detect-only-local' - collect a combined set of translation languages only from the account's own code
     *
     * Alternatively, an explicit list of languages may be provided which disable auto-detection.
     * @see getSupportedTranslationLangs
     */
    supportedLangs?: typeof i18nSupportedLangsAutoValues[number] | Lang[]
  }
  signInPath?: string
  globalJsx?: 'app/ui' | false
}
declare const i18nSupportedLangsAutoValues: readonly [
  'auto-detect-all',
  'auto-detect-local-with-externals',
  'auto-detect-only-local',
]
interface Layout {
  leftMenu?: {
    items?: LayoutMenuItem
  }
  bottomTabs?: LayoutBottomTabs
}
interface LayoutBottomTabs {
  tabs?: LayoutMenuItem[]
  activeTintColor?: string
  inactiveTintColor?: string
}
interface LayoutMenuItem {
  id?: string
  type: 'tab' | 'button'
  title?: string
  url?: string
  onClick?: ChatiumActions
  icon: IconProps
  key?: string
}
interface EnvAvc {
  id: string
  signature: string
  accMap: Record<
    /** base account ID */
    number,
    [
      /** branch account ID */
      number,
      UgcFileStorage,
      UgcCodeVersion | null,
      /** expiration timestamp in seconds */
      number,
    ]
  >
}
interface EnvCtx {
  env: Env
}
interface Env {
  development: boolean
  production: boolean
  platform: EnvPlatform
  version: number
  appBuildNumber?: number
  ios: boolean
  android: boolean
  web: boolean
  job: boolean
  debugSocketId: string | null
  usePreviewMode: boolean
  viewportWidth: number | null
  viewportHeight: number | null
  devicePixelRatio: number
  alwaysHeader: boolean
  clientScope?: 'modal' | 'desktop' | 'ide'
  desktopLayout?: DesktopLayout
  acceptChatiumJson: boolean
  client?: ClientInfo
  avc?: EnvAvc
}
declare const EnvPlatform: {
  readonly iOS: 'iOS'
  readonly Android: 'Android'
  readonly Web: 'Web'
  readonly Job: 'Job'
}
declare type EnvPlatform = keyof typeof EnvPlatform
interface ClientInfo {
  ip: string
  deviceName: string
  osName: string
}
declare type UgcCodeVersion = CgsRepoVersion
export declare function responsiveState(ctx: RichUgcCtx, options?: ResponsiveStateOptions): ResponsiveState

export {}
