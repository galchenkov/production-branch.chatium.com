import { Fragment as JsxFragment } from './appUi'
import { ChatiumActions, ChatiumScreen } from 'lib/chatium-json'
import { Color } from 'lib/chatium-json/v1'
import {
  BoxProps,
  ChatiumChildNode,
  DesktopLayout,
  IconProps,
  ImageProps,
  ScreenPropsV2,
  StandardFontSize,
  TextProps,
  V2IntrinsicElements,
} from 'lib/chatium-json/v2'

declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare type MessageSticker = {
  url: string
  previewUrl?: string
  emoji?: string[]
}
declare type Lang = string
declare type UgcFileStorage = 'cgs' | 'db'
declare type CgsRepoVersion = string
interface ChatiumRc {
  defaultDesktopLayout?: DesktopLayout
  favicon?: string
  faviconHash?: string
  fonts?: ScreenPropsV2['fonts']
  htmlTemplate?: string
  ogDescription?: string
  ogImage?: string
  ogImageHash?: string
  ogTitle?: string
  ogType?: string
  title?: string
  titleScreen?: string
  headExtra?: string[]
  bodyExtra?: string[]
  layout?: Layout | string
  i18n?: {
    /**
     * Language, in which the in-code key strings are defined.
     * It's important to only set this if the keys are really of that language, not technical IDs
     *  because this info is used for proper language bundle loading.
     */
    keyLang?: Lang | null
    /**
     * List of languages to which auto-translation actions will target when they are activated
     */
    autoTranslateLangs?: Lang[]
    /**
     * List of languages that are considered supported in this account.
     * 'auto-detect-all' (default) - collect a combined set of translation languages from the account code,
     *                               external dependencies, and all connected plugin apps.
     * 'auto-detect-local-with-externals' - collect a combined set of translation languages only from the account code
     *                                      and external dependencies, without plugin apps
     * 'auto-detect-only-local' - collect a combined set of translation languages only from the account's own code
     *
     * Alternatively, an explicit list of languages may be provided which disable auto-detection.
     * @see getSupportedTranslationLangs
     */
    supportedLangs?: typeof i18nSupportedLangsAutoValues[number] | Lang[]
  }
  signInPath?: string
  globalJsx?: 'app/ui' | false
}
declare const i18nSupportedLangsAutoValues: readonly [
  'auto-detect-all',
  'auto-detect-local-with-externals',
  'auto-detect-only-local',
]
interface Layout {
  leftMenu?: {
    items?: LayoutMenuItem
  }
  bottomTabs?: LayoutBottomTabs
}
interface LayoutBottomTabs {
  tabs?: LayoutMenuItem[]
  activeTintColor?: string
  inactiveTintColor?: string
}
interface LayoutMenuItem {
  id?: string
  type: 'tab' | 'button'
  title?: string
  url?: string
  onClick?: ChatiumActions
  icon: IconProps
  key?: string
}
interface EnvAvc {
  id: string
  signature: string
  accMap: Record<
    /** base account ID */
    number,
    [
      /** branch account ID */
      number,
      UgcFileStorage,
      UgcCodeVersion | null,
      /** expiration timestamp in seconds */
      number,
    ]
  >
}
interface EnvCtx {
  env: Env
}
interface Env {
  development: boolean
  production: boolean
  platform: EnvPlatform
  version: number
  appBuildNumber?: number
  ios: boolean
  android: boolean
  web: boolean
  job: boolean
  debugSocketId: string | null
  usePreviewMode: boolean
  viewportWidth: number | null
  viewportHeight: number | null
  devicePixelRatio: number
  alwaysHeader: boolean
  clientScope?: 'modal' | 'desktop' | 'ide'
  desktopLayout?: DesktopLayout
  acceptChatiumJson: boolean
  client?: ClientInfo
  avc?: EnvAvc
}
declare const EnvPlatform: {
  readonly iOS: 'iOS'
  readonly Android: 'Android'
  readonly Web: 'Web'
  readonly Job: 'Job'
}
declare type EnvPlatform = keyof typeof EnvPlatform
interface ClientInfo {
  ip: string
  deviceName: string
  osName: string
}
declare type UgcCodeVersion = CgsRepoVersion
declare type AnyObject = Record<string, unknown>
export {
  Audio,
  Box,
  Button,
  Footer,
  Header,
  HorizontalScroll,
  Icon,
  Image,
  ListItem,
  Parallax,
  SearchInput,
  SmartIcon,
  Sticky,
  Text,
  TextInput,
  Video,
  VideoPoster,
  IAPProduct,
  Slider,
  HiddenInput,
  Screen,
  HorizontalScrollIndicator,
  TextInputIndicator,
  RunActionInterval,
} from 'lib/chatium-json/v2'
export { Fragment } from 'lib/chatium-json/v1'
export {
  audioPlayerNextTrack,
  audioPlayerPause,
  audioPlayerPlay,
  audioPlayerPlayTrack,
  audioPlayerPrevTrack,
  audioPlayerSeekTo,
  audioPlayerTogglePause,
  horizontalScrollSlideToNextSnap,
  horizontalScrollSlideToPrevSnap,
  resetForm,
  setFormInputValue,
  setScreenState,
  setAppState,
  shareText,
  submitForm,
  iapBuyProduct,
  iapRestorePurchases,
  iapOpenSubscriptionsSettings,
  AudioPlayerNextTrackAction,
  AudioPlayerPauseAction,
  AudioPlayerPlayAction,
  AudioPlayerPlayTrackAction,
  AudioPlayerPrevTrackAction,
  AudioPlayerSeekToAction,
  AudioPlayerTogglePauseAction,
  ResetFormAction,
  SetFormInputValueAction,
  SetScreenStateAction,
  SubmitFormAction,
  IapBuyProductAction,
  IapRestorePurchasesAction,
  IapOpenSubscriptionsSettings,
  apiCall,
  attachMedia,
  confirmEmail,
  confirmPhone,
  copyToClipboard,
  goBack,
  navigate,
  refresh,
  scrollToTop,
  selectContacts,
  showContextMenu,
  showDateTimeDialog,
  showTextDialog,
  showToast,
  ApiCallAction,
  AttachMediaAction,
  CopyToClipboardAction,
  GoBackAction,
  NavigateAction,
  RefreshAction,
  ScrollToTopAction,
  SelectContactsAction,
  ShowContextMenuAction,
  ShowDateTimeDialogAction,
  ShowTextDialogAction,
  ShowToastAction,
} from 'lib/chatium-json'
export type {
  ChatiumActions,
  ChatiumAction,
  ChatiumActions as AppUiActions,
  ChatiumAction as AppUiAction,
} from 'lib/chatium-json'
export type {
  AudioProps,
  BoxAsyncProps,
  BoxProps,
  ButtonAsyncProps,
  ButtonProps,
  FooterAsyncProps,
  FooterProps,
  HeaderAsyncProps,
  HeaderProps,
  HorizontalScrollAsyncProps,
  HorizontalScrollProps,
  IconProps,
  ImageProps,
  ListItemAsyncProps,
  ListItemProps,
  ParallaxAsyncProps,
  ParallaxProps,
  SearchInputProps,
  SmartIconProps,
  StickyAsyncProps,
  StickyProps,
  TextProps,
  TextInputAsyncProps,
  TextInputProps,
  VideoProps,
  VideoPosterProps,
  IAPProductProps,
  SliderProps,
  HiddenInputProps,
  ScreenPropsV2 as ScreenProps,
  HorizontalScrollIndicatorProps,
  TextInputIndicatorProps,
  RunActionIntervalProps,
  ChatiumBlockV2 as ChatiumBlock,
  ChatiumBlockV2 as AppUiBlock,
} from 'lib/chatium-json/v2'
declare type SmartTextProps = TextProps & {
  size?: number | StandardFontSize
  color?: Color
}
declare type SmartImageProps = ImageProps & {
  src: ImageProps['src'] | string
}
declare type UGCIntrinsicElements = Omit<V2IntrinsicElements, 'text' | 'image'> & {
  text: SmartTextProps
  image: SmartImageProps
  img: SmartImageProps
  section: BoxProps
  b: SmartTextProps
  p: SmartTextProps
}
export declare function jsx(block: BlockFactory | string, props?: AnyObject, ...children: Array<any>): JsxNode
export declare namespace jsx {
  const Fragment: typeof JsxFragment
  namespace JSX {
    type IntrinsicElements = UGCIntrinsicElements
  }
}
declare type BlockFactory = (props?: AnyObject, ...children: JsxNode[]) => JsxNode
declare type JsxNode =
  | ChatiumChildNode
  | ChatiumChildNode[]
  | ChatiumScreen
  | Promise<ChatiumChildNode | ChatiumChildNode[] | ChatiumScreen>

export {}
