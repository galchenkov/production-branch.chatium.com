declare type ImportMeta = {
  clientVersionUrl: string
}
declare type ExportInfo = [ImportMeta, string]
declare type GetParameters<T> = T extends (...args: any[]) => any ? Parameters<T> : never
declare type SolidComponent<T> = {
  (
    ...args: GetParameters<T> & {
      ctx: InitializerCtx
    }
  ): any
  __solidComponent: true
  __exportInfo: ExportInfo
}
declare type InitializerCtx = RichUgcCtx | ClientCtx
declare type ClientCtx = {
  t: RichUgcCtx['t']
  user: RichUgcCtx['user']
  account: {
    url(path: string): string
  }
  location: RichUgcCtx['location']
}
declare type CustomHtmlElement<Props> =
  | ((props: Props, ...children: Array<jsx.JSX.Child>) => jsx.JSX.Child)
  | SolidComponent<any>
declare type JSONEvent = {
  type: string
  [prop: string]: any
}
declare type HtmlEvent = Function | string | JSONEvent | Array<HtmlEvent>
interface FormEvents {
  onblur?: HtmlEvent
  onchange?: HtmlEvent
  onfocus?: HtmlEvent
  onformchange?: HtmlEvent
  onforminput?: HtmlEvent
  oninput?: HtmlEvent
  oninvalid?: HtmlEvent
  onselect?: HtmlEvent
  onsubmit?: HtmlEvent
}
interface MediaEvents {
  onabort?: HtmlEvent
  oncanplay?: HtmlEvent
  oncanplaythrough?: HtmlEvent
  ondurationchange?: HtmlEvent
  onemptied?: HtmlEvent
  onended?: HtmlEvent
  onerror?: HtmlEvent
  onloadeddata?: HtmlEvent
  onloadedmetadata?: HtmlEvent
  onloadstart?: HtmlEvent
  onpause?: HtmlEvent
  onplay?: HtmlEvent
  onplaying?: HtmlEvent
  onprogress?: HtmlEvent
  onratechange?: HtmlEvent
  onreadystatechange?: HtmlEvent
  onseeked?: HtmlEvent
  onseeking?: HtmlEvent
  onstalled?: HtmlEvent
  onsuspend?: HtmlEvent
  ontimeupdate?: HtmlEvent
  onvolumechange?: HtmlEvent
  onwaiting?: HtmlEvent
}
declare type HtmlClassObjectAttribute = {
  [name: string]: boolean
}
declare type HtmlClassAttribute =
  | null
  | undefined
  | string
  | HtmlClassObjectAttribute
  | Array<string | HtmlClassObjectAttribute | null | undefined>
declare type HtmlStyleObjectAttribute = {
  [name: string]: string | number
}
declare type HtmlStyleAttribute =
  | string
  | HtmlStyleObjectAttribute
  | null
  | undefined
  | Array<string | HtmlStyleObjectAttribute | null | undefined>
interface HtmlTag {
  innerHTML?: string
  accesskey?: string
  class?: HtmlClassAttribute
  contenteditable?: string
  dir?: string
  hidden?: string | boolean
  id?: string
  role?: string
  lang?: string
  draggable?: string | boolean
  spellcheck?: string | boolean
  style?: HtmlStyleAttribute
  tabindex?: string
  title?: string
  translate?: string | boolean
  oncontextmenu?: HtmlEvent
  onkeydown?: HtmlEvent
  onkeypress?: HtmlEvent
  onkeyup?: HtmlEvent
  onclick?: HtmlEvent
  ondblclick?: HtmlEvent
  ondrag?: HtmlEvent
  ondragend?: HtmlEvent
  ondragenter?: HtmlEvent
  ondragleave?: HtmlEvent
  ondragover?: HtmlEvent
  ondragstart?: HtmlEvent
  ondrop?: HtmlEvent
  onmousedown?: HtmlEvent
  onmousemove?: HtmlEvent
  onmouseout?: HtmlEvent
  onmouseover?: HtmlEvent
  onmouseup?: HtmlEvent
  onmousewheel?: HtmlEvent
  onscroll?: HtmlEvent
  portal?: ('body-start' | 'body-end' | 'head-start' | 'head-end') | (string & {})
  portalDedupe?: boolean
}
interface HtmlAnchorTag extends HtmlTag {
  href?: string
  target?: string
  download?: string
  ping?: string
  rel?: string
  media?: string
  hreflang?: string
  type?: string
}
interface HtmlAreaTag extends HtmlTag {
  alt?: string
  coords?: string
  shape?: string
  href?: string
  target?: string
  ping?: string
  rel?: string
  media?: string
  hreflang?: string
  type?: string
}
interface HtmlAudioTag extends HtmlTag, MediaEvents {
  src?: string
  autobuffer?: string
  autoplay?: string
  loop?: string
  controls?: string
}
interface BaseTag extends HtmlTag {
  href?: string
  target?: string
}
interface HtmlQuoteTag extends HtmlTag {
  cite?: string
}
interface HtmlBodyTag extends HtmlTag {
  onafterprint?: HtmlEvent
  onbeforeprint?: HtmlEvent
  onbeforeonload?: HtmlEvent
  onblur?: HtmlEvent
  onerror?: HtmlEvent
  onfocus?: HtmlEvent
  onhaschange?: HtmlEvent
  onload?: HtmlEvent
  onmessage?: HtmlEvent
  onoffline?: HtmlEvent
  ononline?: HtmlEvent
  onpagehide?: HtmlEvent
  onpageshow?: HtmlEvent
  onpopstate?: HtmlEvent
  onredo?: HtmlEvent
  onresize?: HtmlEvent
  onstorage?: HtmlEvent
  onundo?: HtmlEvent
  onunload?: HtmlEvent
}
interface HtmlButtonTag extends HtmlTag {
  action?: string
  autofocus?: string
  disabled?: string
  enctype?: string
  form?: string
  method?: string
  name?: string
  novalidate?: string | boolean
  target?: string
  type?: string
  value?: string
}
interface HtmlDataListTag extends HtmlTag {}
interface HtmlCanvasTag extends HtmlTag {
  width?: string
  height?: string
}
interface HtmlTableColTag extends HtmlTag {
  span?: string
}
interface HtmlTableSectionTag extends HtmlTag {}
interface HtmlTableRowTag extends HtmlTag {}
interface DataTag extends HtmlTag {
  value?: string
}
interface HtmlEmbedTag extends HtmlTag, MediaEvents {
  src?: string
  type?: string
  width?: string
  height?: string
  [anything: string]: any
}
interface HtmlFieldSetTag extends HtmlTag, FormEvents {
  disabled?: string
  form?: string
  name?: string
}
interface HtmlFormTag extends HtmlTag, FormEvents {
  acceptCharset?: string
  action?: string
  autocomplete?: string
  enctype?: string
  method?: string
  name?: string
  novalidate?: string | boolean
  target?: string
}
interface HtmlHtmlTag extends HtmlTag {
  manifest?: string
}
interface HtmlIFrameTag extends HtmlTag {
  src?: string
  srcdoc?: string
  name?: string
  sandbox?: string
  seamless?: string
  width?: string
  height?: string
}
interface HtmlImageTag extends HtmlTag, MediaEvents {
  alt?: string
  src?: string
  crossorigin?: string
  usemap?: string
  ismap?: string
  width?: string
  height?: string
}
interface HtmlInputTag extends HtmlTag, FormEvents {
  accept?: string
  action?: string
  alt?: string
  autocomplete?: string
  autofocus?: string
  checked?: string | boolean
  disabled?: string | boolean
  enctype?: string
  form?: string
  height?: string
  list?: string
  max?: string
  maxlength?: string
  method?: string
  min?: string
  multiple?: string
  name?: string
  novalidate?: string | boolean
  pattern?: string
  placeholder?: string
  readonly?: boolean
  required?: boolean
  size?: string
  src?: string
  step?: string
  target?: string
  type?: string
  value?: string
  width?: string
}
interface HtmlModTag extends HtmlTag {
  cite?: string
  datetime?: string | Date
}
interface KeygenTag extends HtmlTag {
  autofocus?: string
  challenge?: string
  disabled?: string
  form?: string
  keytype?: string
  name?: string
}
interface HtmlLabelTag extends HtmlTag {
  form?: string
  for?: string
}
interface HtmlLITag extends HtmlTag {
  value?: string | number
}
interface HtmlLinkTag extends HtmlTag {
  href?: string
  crossorigin?: string
  rel?: string
  media?: string
  hreflang?: string
  type?: string
  sizes?: string
  integrity?: string
}
interface HtmlMapTag extends HtmlTag {
  name?: string
}
interface HtmlMetaTag extends HtmlTag {
  name?: string
  httpEquiv?: string
  content?: string
  charset?: string
}
interface HtmlMeterTag extends HtmlTag {
  value?: string | number
  min?: string | number
  max?: string | number
  low?: string | number
  high?: string | number
  optimum?: string | number
}
interface HtmlObjectTag extends HtmlTag, MediaEvents {
  data?: string
  type?: string
  name?: string
  usemap?: string
  form?: string
  width?: string
  height?: string
}
interface HtmlOListTag extends HtmlTag {
  reversed?: string
  start?: string | number
}
interface HtmlOptgroupTag extends HtmlTag {
  disabled?: string
  label?: string
}
interface HtmlOptionTag extends HtmlTag {
  disabled?: string
  label?: string
  selected?: boolean
  value?: string
}
interface HtmlOutputTag extends HtmlTag {
  for?: string
  form?: string
  name?: string
}
interface HtmlParamTag extends HtmlTag {
  name?: string
  value?: string
}
interface HtmlProgressTag extends HtmlTag {
  value?: string | number
  max?: string | number
}
interface HtmlCommandTag extends HtmlTag {
  type?: string
  label?: string
  icon?: string
  disabled?: string
  checked?: string
  radiogroup?: string
  default?: string
}
interface HtmlLegendTag extends HtmlTag {}
interface HtmlBrowserButtonTag extends HtmlTag {
  type?: string
}
interface HtmlMenuTag extends HtmlTag {
  type?: string
  label?: string
}
interface HtmlScriptTag extends HtmlTag {
  src?: string
  type?: string
  charset?: string
  async?: boolean
  defer?: boolean
  crossorigin?: string
  integrity?: string
  text?: string
}
interface HtmlDetailsTag extends HtmlTag {
  open?: string
}
interface HtmlSelectTag extends HtmlTag {
  autofocus?: string
  disabled?: string
  form?: string
  multiple?: string
  name?: string
  required?: string
  size?: string
}
interface HtmlSourceTag extends HtmlTag {
  src?: string
  type?: string
  media?: string
}
interface HtmlStyleTag extends HtmlTag {
  media?: string
  type?: string
  disabled?: string
  scoped?: string
}
interface HtmlTableTag extends HtmlTag {}
interface HtmlTableDataCellTag extends HtmlTag {
  colspan?: string | number
  rowspan?: string | number
  headers?: string
}
interface HtmlTextAreaTag extends HtmlTag {
  autofocus?: string
  cols?: string
  dirname?: string
  disabled?: string
  form?: string
  maxlength?: string
  minlength?: string
  name?: string
  placeholder?: string
  readonly?: string
  required?: string
  rows?: string
  wrap?: string
}
interface HtmlTableHeaderCellTag extends HtmlTag {
  colspan?: string | number
  rowspan?: string | number
  headers?: string
  scope?: string
}
interface HtmlTimeTag extends HtmlTag {
  datetime?: string | Date
}
interface HtmlTrackTag extends HtmlTag {
  default?: string
  kind?: string
  label?: string
  src?: string
  srclang?: string
}
interface HtmlVideoTag extends HtmlTag, MediaEvents {
  src?: string
  poster?: string
  autobuffer?: string
  autoplay?: string
  loop?: string
  controls?: string
  width?: string
  height?: string
}
interface HtmlSvgTag extends HtmlTag {
  [anything: string]: any
}
interface HtmlSvgPathTag extends HtmlTag {
  [anything: string]: any
}
interface HtmlJsxIntrinsicElements {
  a: HtmlAnchorTag
  abbr: HtmlTag
  address: HtmlTag
  area: HtmlAreaTag
  article: HtmlTag
  aside: HtmlTag
  audio: HtmlAudioTag
  b: HtmlTag
  bb: HtmlBrowserButtonTag
  base: BaseTag
  bdi: HtmlTag
  bdo: HtmlTag
  blockquote: HtmlQuoteTag
  body: HtmlBodyTag
  br: HtmlTag
  button: HtmlButtonTag
  canvas: HtmlCanvasTag
  caption: HtmlTag
  cite: HtmlTag
  code: HtmlTag
  col: HtmlTableColTag
  colgroup: HtmlTableColTag
  commands: HtmlCommandTag
  data: DataTag
  datalist: HtmlDataListTag
  dd: HtmlTag
  del: HtmlModTag
  details: HtmlDetailsTag
  dfn: HtmlTag
  div: HtmlTag
  dl: HtmlTag
  dt: HtmlTag
  em: HtmlTag
  embed: HtmlEmbedTag
  fieldset: HtmlFieldSetTag
  figcaption: HtmlTag
  figure: HtmlTag
  footer: HtmlTag
  form: HtmlFormTag
  h1: HtmlTag
  h2: HtmlTag
  h3: HtmlTag
  h4: HtmlTag
  h5: HtmlTag
  h6: HtmlTag
  head: HtmlTag
  header: HtmlTag
  hr: HtmlTag
  html: HtmlHtmlTag
  i: HtmlTag
  iframe: HtmlIFrameTag
  img: HtmlImageTag
  input: HtmlInputTag
  ins: HtmlModTag
  kbd: HtmlTag
  keygen: KeygenTag
  label: HtmlLabelTag
  legend: HtmlLegendTag
  li: HtmlLITag
  link: HtmlLinkTag
  main: HtmlTag
  map: HtmlMapTag
  mark: HtmlTag
  menu: HtmlMenuTag
  meta: HtmlMetaTag
  meter: HtmlMeterTag
  nav: HtmlTag
  noscript: HtmlTag
  object: HtmlObjectTag
  ol: HtmlOListTag
  optgroup: HtmlOptgroupTag
  option: HtmlOptionTag
  output: HtmlOutputTag
  p: HtmlTag
  param: HtmlParamTag
  pre: HtmlTag
  progress: HtmlProgressTag
  q: HtmlQuoteTag
  rb: HtmlTag
  rp: HtmlTag
  rt: HtmlTag
  rtc: HtmlTag
  ruby: HtmlTag
  s: HtmlTag
  samp: HtmlTag
  script: HtmlScriptTag
  section: HtmlTag
  select: HtmlSelectTag
  small: HtmlTag
  source: HtmlSourceTag
  span: HtmlTag
  strong: HtmlTag
  style: HtmlStyleTag
  sub: HtmlTag
  sup: HtmlTag
  table: HtmlTableTag
  tbody: HtmlTag
  td: HtmlTableDataCellTag
  template: HtmlTag
  textarea: HtmlTextAreaTag
  tfoot: HtmlTableSectionTag
  th: HtmlTableHeaderCellTag
  thead: HtmlTableSectionTag
  time: HtmlTimeTag
  title: HtmlTag
  tr: HtmlTableRowTag
  track: HtmlTrackTag
  u: HtmlTag
  ul: HtmlTag
  var: HtmlTag
  video: HtmlVideoTag
  wbr: HtmlTag
  svg: HtmlSvgTag
  path: HtmlSvgPathTag
}
declare type AttributeValue =
  | number
  | string
  | Date
  | boolean
  | string[]
  | HtmlClassAttribute
  | HtmlStyleAttribute
  | HtmlEvent
  | ((...args: any[]) => any)
declare class HtmlNode {
  readonly tag: string
  readonly attributes: Attributes
  readonly children: ReadonlyArray<HtmlNodeChild>
  portalValuesById: Map<string, PortalValuesHolder> | undefined
  portalTargetIds: Set<string> | undefined
  augmentCreatedHtmlElement: undefined | ((document: Document, element: Node) => void)
  private readonly mutableChildren
  constructor(tag: string, attributes: Attributes, children: Array<HtmlNodeChild | undefined>)
  appendChild(...children: Array<HtmlNodeChild | undefined | null>): void
}
declare class PortalValue {
  readonly portalId: string
  readonly children: HtmlNodeChild
  readonly dedupe: boolean
  constructor(portalId: string, children: HtmlNodeChild, dedupe: boolean)
}
declare class PortalValuesHolder {
  readonly portalId: string
  readonly values: Array<PortalValue>
  constructor(portalId: string)
  add(value: PortalValue): this
  addAll(holder: PortalValuesHolder): this
}
declare class PortalRenderTarget {
  readonly portalId: string
  constructor(portalId: string)
}
declare type HtmlNodeChild =
  | string
  | number
  | HtmlNode
  | PortalRenderTarget
  | PortalValue
  | ReadonlyArray<HtmlNodeChild>
declare type Attributes = Record<string, AttributeValue>
declare function jsx(
  element: string,
  attributes: Record<string, any>,
  ...children: Array<jsx.JSX.Child>
): Promise<jsx.JSX.SingleElement>
declare function jsx<Props>(
  element: CustomHtmlElement<Props>,
  props: Props,
  ...children: Array<jsx.JSX.Child>
): Promise<jsx.JSX.SingleElement>
declare type JSXIntrinsicElements = HtmlJsxIntrinsicElements & {
  'html-jsx-portal': PortalProps
  'html-jsx-portal-target': PortalTargetProps
}
declare namespace jsx {
  type Ctx = InitializerCtx
  const Fragment: typeof JsxFragment
  type Attributes = JSXIntrinsicElements
  namespace JSX {
    export type SingleElement = string | HtmlNode | PortalValue | PortalRenderTarget
    export type Element = SingleElement | Promise<SingleElement>
    export type IntrinsicElements = JSXIntrinsicElements
    type ChildItem = string | boolean | undefined | null | number | HtmlNode | PortalValue | PortalRenderTarget
    export type Child = ChildItem | Promise<ChildItem> | Array<Child> | ReadonlyArray<Child>
    export {}
  }
}
declare function JsxFragment(_props: unknown, ...children: Array<jsx.JSX.Child>): jsx.JSX.Element
export interface JSModule {
  toString: () => string
  url: () => string
  script: () => string
  bundle: () => unknown
  (props: HtmlScriptTag): jsx.JSX.Element
}
export interface CSSModule {
  toString: () => string
  url: () => string
  link: () => string
  bundle: () => unknown
  (props: HtmlLinkTag): jsx.JSX.Element
}
interface PortalTargetProps {
  name: string
}
interface PortalProps {
  to: string
  dedupe?: boolean
}

export {}
declare module '*.css' {
  const module: CSSModule
  export default module
}

declare module '*.js' {
  const module: JSModule
  export default module
}
