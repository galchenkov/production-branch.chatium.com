/// <reference types="node" />

declare type AnyObject = Record<string, unknown>
export declare function renderHtml(ctx: RichUgcCtx, path: string, props?: AnyObject): Promise<string | null>
export declare class HtmlString extends String {
  readonly portals: Record<string, string[]>
  readonly literalSections: string[]
  readonly substs: unknown[]
  constructor(value: string, portals: Record<string, string[]>, literalSections: string[], substs: unknown[])
}
declare class PortalTarget {
  name: string
  constructor(name: string)
}
declare class PortalString extends String {
  name: string
  constructor(name: string, value: unknown)
}
export declare function html(literalSections: TemplateStringsArray, ...originalSubsts: unknown[]): HtmlString
export declare const portal: (name: string) => {
  (literalSections: TemplateStringsArray, ...substs: any[]): PortalString
  target: PortalTarget
}
export declare function portalTarget(name: string): PortalTarget
export declare const css: {
  (literalSections: TemplateStringsArray, ...substs: any[]): PortalString
  target: PortalTarget
}
export declare const javascript: {
  (literalSections: TemplateStringsArray, ...substs: any[]): PortalString
  target: PortalTarget
}
export declare const js: {
  (literalSections: TemplateStringsArray, ...substs: any[]): PortalString
  target: PortalTarget
}
export declare const cssBundle: {
  (literalSections: TemplateStringsArray, ...substs: any[]): PortalString
  target: PortalTarget
}
export declare const javascriptBundle: {
  (literalSections: TemplateStringsArray, ...substs: any[]): PortalString
  target: PortalTarget
}
export declare const jsBundle: {
  (literalSections: TemplateStringsArray, ...substs: any[]): PortalString
  target: PortalTarget
}
declare type BundleHtmlString = HtmlString & {
  css: PortalTarget
  js: PortalTarget
  javascript: PortalTarget
  cssLinks: PortalTarget
  jsScripts: PortalTarget
  javascriptScripts: PortalTarget
}
export declare function htmlEscape(str: string | null | undefined): string
interface HtmlResponse {
  rawHttpBody: string
  headers: Record<string, string>
}
export declare function htmlResponse(
  rawHttpBody: string | null | undefined | HtmlString,
  headers?: Record<string, string>,
): HtmlResponse
export declare function getBundle(): BundleHtmlString

export {}
