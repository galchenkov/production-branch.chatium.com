import * as csstype from 'csstype'

declare type ImportMeta = {
  clientVersionUrl: string
}
declare type ExportInfo = [ImportMeta, string]
declare type GetParameters<T> = T extends (...args: any[]) => any ? Parameters<T> : never
declare type SolidComponent<T> = {
  (
    ...args: GetParameters<T> & {
      ctx: InitializerCtx
    }
  ): any
  __solidComponent: true
  __exportInfo: ExportInfo
}
declare type InitializerCtx = RichUgcCtx | ClientCtx
declare type ClientCtx = {
  t: RichUgcCtx['t']
  user: RichUgcCtx['user']
  account: {
    url(path: string): string
  }
  location: RichUgcCtx['location']
}
declare type CustomHtmlElement<Props> =
  | ((props: Props, ...children: Array<jsx.JSX.Child>) => jsx.JSX.Child)
  | SolidComponent<any>
declare type JSONEvent = {
  type: string
  [prop: string]: any
}
declare type HtmlEvent = Function | string | JSONEvent | Array<HtmlEvent>
interface FormEvents {
  onblur?: HtmlEvent
  onchange?: HtmlEvent
  onfocus?: HtmlEvent
  onformchange?: HtmlEvent
  onforminput?: HtmlEvent
  oninput?: HtmlEvent
  oninvalid?: HtmlEvent
  onselect?: HtmlEvent
  onsubmit?: HtmlEvent
}
interface MediaEvents {
  onabort?: HtmlEvent
  oncanplay?: HtmlEvent
  oncanplaythrough?: HtmlEvent
  ondurationchange?: HtmlEvent
  onemptied?: HtmlEvent
  onended?: HtmlEvent
  onerror?: HtmlEvent
  onloadeddata?: HtmlEvent
  onloadedmetadata?: HtmlEvent
  onloadstart?: HtmlEvent
  onpause?: HtmlEvent
  onplay?: HtmlEvent
  onplaying?: HtmlEvent
  onprogress?: HtmlEvent
  onratechange?: HtmlEvent
  onreadystatechange?: HtmlEvent
  onseeked?: HtmlEvent
  onseeking?: HtmlEvent
  onstalled?: HtmlEvent
  onsuspend?: HtmlEvent
  ontimeupdate?: HtmlEvent
  onvolumechange?: HtmlEvent
  onwaiting?: HtmlEvent
}
declare type HtmlClassObjectAttribute = {
  [name: string]: boolean
}
declare type HtmlClassAttribute =
  | null
  | undefined
  | string
  | HtmlClassObjectAttribute
  | Array<string | HtmlClassObjectAttribute | null | undefined>
declare type HtmlStyleObjectAttribute = {
  [name: string]: string | number
}
declare type HtmlStyleAttribute =
  | string
  | HtmlStyleObjectAttribute
  | null
  | undefined
  | Array<string | HtmlStyleObjectAttribute | null | undefined>
interface HtmlTag {
  innerHTML?: string
  accesskey?: string
  class?: HtmlClassAttribute
  contenteditable?: string
  dir?: string
  hidden?: string | boolean
  id?: string
  role?: string
  lang?: string
  draggable?: string | boolean
  spellcheck?: string | boolean
  style?: HtmlStyleAttribute
  tabindex?: string
  title?: string
  translate?: string | boolean
  oncontextmenu?: HtmlEvent
  onkeydown?: HtmlEvent
  onkeypress?: HtmlEvent
  onkeyup?: HtmlEvent
  onclick?: HtmlEvent
  ondblclick?: HtmlEvent
  ondrag?: HtmlEvent
  ondragend?: HtmlEvent
  ondragenter?: HtmlEvent
  ondragleave?: HtmlEvent
  ondragover?: HtmlEvent
  ondragstart?: HtmlEvent
  ondrop?: HtmlEvent
  onmousedown?: HtmlEvent
  onmousemove?: HtmlEvent
  onmouseout?: HtmlEvent
  onmouseover?: HtmlEvent
  onmouseup?: HtmlEvent
  onmousewheel?: HtmlEvent
  onscroll?: HtmlEvent
  portal?: ('body-start' | 'body-end' | 'head-start' | 'head-end') | (string & {})
  portalDedupe?: boolean
}
interface HtmlAnchorTag extends HtmlTag {
  href?: string
  target?: string
  download?: string
  ping?: string
  rel?: string
  media?: string
  hreflang?: string
  type?: string
}
interface HtmlAreaTag extends HtmlTag {
  alt?: string
  coords?: string
  shape?: string
  href?: string
  target?: string
  ping?: string
  rel?: string
  media?: string
  hreflang?: string
  type?: string
}
interface HtmlAudioTag extends HtmlTag, MediaEvents {
  src?: string
  autobuffer?: string
  autoplay?: string
  loop?: string
  controls?: string
}
interface BaseTag extends HtmlTag {
  href?: string
  target?: string
}
interface HtmlQuoteTag extends HtmlTag {
  cite?: string
}
interface HtmlBodyTag extends HtmlTag {
  onafterprint?: HtmlEvent
  onbeforeprint?: HtmlEvent
  onbeforeonload?: HtmlEvent
  onblur?: HtmlEvent
  onerror?: HtmlEvent
  onfocus?: HtmlEvent
  onhaschange?: HtmlEvent
  onload?: HtmlEvent
  onmessage?: HtmlEvent
  onoffline?: HtmlEvent
  ononline?: HtmlEvent
  onpagehide?: HtmlEvent
  onpageshow?: HtmlEvent
  onpopstate?: HtmlEvent
  onredo?: HtmlEvent
  onresize?: HtmlEvent
  onstorage?: HtmlEvent
  onundo?: HtmlEvent
  onunload?: HtmlEvent
}
interface HtmlButtonTag extends HtmlTag {
  action?: string
  autofocus?: string
  disabled?: string
  enctype?: string
  form?: string
  method?: string
  name?: string
  novalidate?: string | boolean
  target?: string
  type?: string
  value?: string
}
interface HtmlDataListTag extends HtmlTag {}
interface HtmlCanvasTag extends HtmlTag {
  width?: string
  height?: string
}
interface HtmlTableColTag extends HtmlTag {
  span?: string
}
interface HtmlTableSectionTag extends HtmlTag {}
interface HtmlTableRowTag extends HtmlTag {}
interface DataTag extends HtmlTag {
  value?: string
}
interface HtmlEmbedTag extends HtmlTag, MediaEvents {
  src?: string
  type?: string
  width?: string
  height?: string
  [anything: string]: any
}
interface HtmlFieldSetTag extends HtmlTag, FormEvents {
  disabled?: string
  form?: string
  name?: string
}
interface HtmlFormTag extends HtmlTag, FormEvents {
  acceptCharset?: string
  action?: string
  autocomplete?: string
  enctype?: string
  method?: string
  name?: string
  novalidate?: string | boolean
  target?: string
}
interface HtmlHtmlTag extends HtmlTag {
  manifest?: string
}
interface HtmlIFrameTag extends HtmlTag {
  src?: string
  srcdoc?: string
  name?: string
  sandbox?: string
  seamless?: string
  width?: string
  height?: string
}
interface HtmlImageTag extends HtmlTag, MediaEvents {
  alt?: string
  src?: string
  crossorigin?: string
  usemap?: string
  ismap?: string
  width?: string
  height?: string
}
interface HtmlInputTag extends HtmlTag, FormEvents {
  accept?: string
  action?: string
  alt?: string
  autocomplete?: string
  autofocus?: string
  checked?: string | boolean
  disabled?: string | boolean
  enctype?: string
  form?: string
  height?: string
  list?: string
  max?: string
  maxlength?: string
  method?: string
  min?: string
  multiple?: string
  name?: string
  novalidate?: string | boolean
  pattern?: string
  placeholder?: string
  readonly?: boolean
  required?: boolean
  size?: string
  src?: string
  step?: string
  target?: string
  type?: string
  value?: string
  width?: string
}
interface HtmlModTag extends HtmlTag {
  cite?: string
  datetime?: string | Date
}
interface KeygenTag extends HtmlTag {
  autofocus?: string
  challenge?: string
  disabled?: string
  form?: string
  keytype?: string
  name?: string
}
interface HtmlLabelTag extends HtmlTag {
  form?: string
  for?: string
}
interface HtmlLITag extends HtmlTag {
  value?: string | number
}
interface HtmlLinkTag extends HtmlTag {
  href?: string
  crossorigin?: string
  rel?: string
  media?: string
  hreflang?: string
  type?: string
  sizes?: string
  integrity?: string
}
interface HtmlMapTag extends HtmlTag {
  name?: string
}
interface HtmlMetaTag extends HtmlTag {
  name?: string
  httpEquiv?: string
  content?: string
  charset?: string
}
interface HtmlMeterTag extends HtmlTag {
  value?: string | number
  min?: string | number
  max?: string | number
  low?: string | number
  high?: string | number
  optimum?: string | number
}
interface HtmlObjectTag extends HtmlTag, MediaEvents {
  data?: string
  type?: string
  name?: string
  usemap?: string
  form?: string
  width?: string
  height?: string
}
interface HtmlOListTag extends HtmlTag {
  reversed?: string
  start?: string | number
}
interface HtmlOptgroupTag extends HtmlTag {
  disabled?: string
  label?: string
}
interface HtmlOptionTag extends HtmlTag {
  disabled?: string
  label?: string
  selected?: boolean
  value?: string
}
interface HtmlOutputTag extends HtmlTag {
  for?: string
  form?: string
  name?: string
}
interface HtmlParamTag extends HtmlTag {
  name?: string
  value?: string
}
interface HtmlProgressTag extends HtmlTag {
  value?: string | number
  max?: string | number
}
interface HtmlCommandTag extends HtmlTag {
  type?: string
  label?: string
  icon?: string
  disabled?: string
  checked?: string
  radiogroup?: string
  default?: string
}
interface HtmlLegendTag extends HtmlTag {}
interface HtmlBrowserButtonTag extends HtmlTag {
  type?: string
}
interface HtmlMenuTag extends HtmlTag {
  type?: string
  label?: string
}
interface HtmlScriptTag extends HtmlTag {
  src?: string
  type?: string
  charset?: string
  async?: boolean
  defer?: boolean
  crossorigin?: string
  integrity?: string
  text?: string
}
interface HtmlDetailsTag extends HtmlTag {
  open?: string
}
interface HtmlSelectTag extends HtmlTag {
  autofocus?: string
  disabled?: string
  form?: string
  multiple?: string
  name?: string
  required?: string
  size?: string
}
interface HtmlSourceTag extends HtmlTag {
  src?: string
  type?: string
  media?: string
}
interface HtmlStyleTag extends HtmlTag {
  media?: string
  type?: string
  disabled?: string
  scoped?: string
}
interface HtmlTableTag extends HtmlTag {}
interface HtmlTableDataCellTag extends HtmlTag {
  colspan?: string | number
  rowspan?: string | number
  headers?: string
}
interface HtmlTextAreaTag extends HtmlTag {
  autofocus?: string
  cols?: string
  dirname?: string
  disabled?: string
  form?: string
  maxlength?: string
  minlength?: string
  name?: string
  placeholder?: string
  readonly?: string
  required?: string
  rows?: string
  wrap?: string
}
interface HtmlTableHeaderCellTag extends HtmlTag {
  colspan?: string | number
  rowspan?: string | number
  headers?: string
  scope?: string
}
interface HtmlTimeTag extends HtmlTag {
  datetime?: string | Date
}
interface HtmlTrackTag extends HtmlTag {
  default?: string
  kind?: string
  label?: string
  src?: string
  srclang?: string
}
interface HtmlVideoTag extends HtmlTag, MediaEvents {
  src?: string
  poster?: string
  autobuffer?: string
  autoplay?: string
  loop?: string
  controls?: string
  width?: string
  height?: string
}
interface HtmlSvgTag extends HtmlTag {
  [anything: string]: any
}
interface HtmlSvgPathTag extends HtmlTag {
  [anything: string]: any
}
interface HtmlJsxIntrinsicElements {
  a: HtmlAnchorTag
  abbr: HtmlTag
  address: HtmlTag
  area: HtmlAreaTag
  article: HtmlTag
  aside: HtmlTag
  audio: HtmlAudioTag
  b: HtmlTag
  bb: HtmlBrowserButtonTag
  base: BaseTag
  bdi: HtmlTag
  bdo: HtmlTag
  blockquote: HtmlQuoteTag
  body: HtmlBodyTag
  br: HtmlTag
  button: HtmlButtonTag
  canvas: HtmlCanvasTag
  caption: HtmlTag
  cite: HtmlTag
  code: HtmlTag
  col: HtmlTableColTag
  colgroup: HtmlTableColTag
  commands: HtmlCommandTag
  data: DataTag
  datalist: HtmlDataListTag
  dd: HtmlTag
  del: HtmlModTag
  details: HtmlDetailsTag
  dfn: HtmlTag
  div: HtmlTag
  dl: HtmlTag
  dt: HtmlTag
  em: HtmlTag
  embed: HtmlEmbedTag
  fieldset: HtmlFieldSetTag
  figcaption: HtmlTag
  figure: HtmlTag
  footer: HtmlTag
  form: HtmlFormTag
  h1: HtmlTag
  h2: HtmlTag
  h3: HtmlTag
  h4: HtmlTag
  h5: HtmlTag
  h6: HtmlTag
  head: HtmlTag
  header: HtmlTag
  hr: HtmlTag
  html: HtmlHtmlTag
  i: HtmlTag
  iframe: HtmlIFrameTag
  img: HtmlImageTag
  input: HtmlInputTag
  ins: HtmlModTag
  kbd: HtmlTag
  keygen: KeygenTag
  label: HtmlLabelTag
  legend: HtmlLegendTag
  li: HtmlLITag
  link: HtmlLinkTag
  main: HtmlTag
  map: HtmlMapTag
  mark: HtmlTag
  menu: HtmlMenuTag
  meta: HtmlMetaTag
  meter: HtmlMeterTag
  nav: HtmlTag
  noscript: HtmlTag
  object: HtmlObjectTag
  ol: HtmlOListTag
  optgroup: HtmlOptgroupTag
  option: HtmlOptionTag
  output: HtmlOutputTag
  p: HtmlTag
  param: HtmlParamTag
  pre: HtmlTag
  progress: HtmlProgressTag
  q: HtmlQuoteTag
  rb: HtmlTag
  rp: HtmlTag
  rt: HtmlTag
  rtc: HtmlTag
  ruby: HtmlTag
  s: HtmlTag
  samp: HtmlTag
  script: HtmlScriptTag
  section: HtmlTag
  select: HtmlSelectTag
  small: HtmlTag
  source: HtmlSourceTag
  span: HtmlTag
  strong: HtmlTag
  style: HtmlStyleTag
  sub: HtmlTag
  sup: HtmlTag
  table: HtmlTableTag
  tbody: HtmlTag
  td: HtmlTableDataCellTag
  template: HtmlTag
  textarea: HtmlTextAreaTag
  tfoot: HtmlTableSectionTag
  th: HtmlTableHeaderCellTag
  thead: HtmlTableSectionTag
  time: HtmlTimeTag
  title: HtmlTag
  tr: HtmlTableRowTag
  track: HtmlTrackTag
  u: HtmlTag
  ul: HtmlTag
  var: HtmlTag
  video: HtmlVideoTag
  wbr: HtmlTag
  svg: HtmlSvgTag
  path: HtmlSvgPathTag
}
declare type AttributeValue =
  | number
  | string
  | Date
  | boolean
  | string[]
  | HtmlClassAttribute
  | HtmlStyleAttribute
  | HtmlEvent
  | ((...args: any[]) => any)
declare class HtmlNode {
  readonly tag: string
  readonly attributes: Attributes
  readonly children: ReadonlyArray<HtmlNodeChild>
  portalValuesById: Map<string, PortalValuesHolder> | undefined
  portalTargetIds: Set<string> | undefined
  augmentCreatedHtmlElement: undefined | ((document: Document, element: Node) => void)
  private readonly mutableChildren
  constructor(tag: string, attributes: Attributes, children: Array<HtmlNodeChild | undefined>)
  appendChild(...children: Array<HtmlNodeChild | undefined | null>): void
}
declare class PortalValue {
  readonly portalId: string
  readonly children: HtmlNodeChild
  readonly dedupe: boolean
  constructor(portalId: string, children: HtmlNodeChild, dedupe: boolean)
}
declare class PortalValuesHolder {
  readonly portalId: string
  readonly values: Array<PortalValue>
  constructor(portalId: string)
  add(value: PortalValue): this
  addAll(holder: PortalValuesHolder): this
}
declare class PortalRenderTarget {
  readonly portalId: string
  constructor(portalId: string)
}
declare type HtmlNodeChild =
  | string
  | number
  | HtmlNode
  | PortalRenderTarget
  | PortalValue
  | ReadonlyArray<HtmlNodeChild>
declare type Attributes = Record<string, AttributeValue>
declare function jsx(
  element: string,
  attributes: Record<string, any>,
  ...children: Array<jsx.JSX.Child>
): Promise<jsx.JSX.SingleElement>
declare function jsx<Props>(
  element: CustomHtmlElement<Props>,
  props: Props,
  ...children: Array<jsx.JSX.Child>
): Promise<jsx.JSX.SingleElement>
declare type JSXIntrinsicElements = HtmlJsxIntrinsicElements & {
  'html-jsx-portal': PortalProps
  'html-jsx-portal-target': PortalTargetProps
}
declare namespace jsx {
  type Ctx = InitializerCtx
  const Fragment: typeof JsxFragment
  type Attributes = JSXIntrinsicElements
  namespace JSX {
    export type SingleElement = string | HtmlNode | PortalValue | PortalRenderTarget
    export type Element = SingleElement | Promise<SingleElement>
    export type IntrinsicElements = JSXIntrinsicElements
    type ChildItem = string | boolean | undefined | null | number | HtmlNode | PortalValue | PortalRenderTarget
    export type Child = ChildItem | Promise<ChildItem> | Array<Child> | ReadonlyArray<Child>
    export {}
  }
}
declare function JsxFragment(_props: unknown, ...children: Array<jsx.JSX.Child>): jsx.JSX.Element
interface CSSModule {
  toString: () => string
  url: () => string
  link: () => string
  bundle: () => unknown
  (props: HtmlLinkTag): jsx.JSX.Element
}
interface PortalTargetProps {
  name: string
}
interface PortalProps {
  to: string
  dedupe?: boolean
}
export interface Task {
  id: number
  fn: ((didTimeout: boolean) => void) | null
  startTime: number
  expirationTime: number
}
export declare function requestCallback(
  fn: () => void,
  options?: {
    timeout: number
  },
): Task
export declare function cancelCallback(task: Task): void
type DOMElement = Element
export namespace JSX {
  type Element = Node | ArrayElement | (string & {}) | number | boolean | null | undefined
  interface ArrayElement extends Array<Element> {}
  interface ElementClass {}
  interface ElementAttributesProperty {}
  interface ElementChildrenAttribute {
    children: {}
  }
  interface EventHandler<T, E extends Event> {
    (
      e: E & {
        currentTarget: T
        target: DOMElement
      },
    ): void
  }
  interface BoundEventHandler<T, E extends Event> {
    0: (
      data: any,
      e: E & {
        currentTarget: T
        target: DOMElement
      },
    ) => void
    1: any
  }
  type EventHandlerUnion<T, E extends Event> = EventHandler<T, E> | BoundEventHandler<T, E>
  interface InputEventHandler<T, E extends InputEvent> {
    (
      e: E & {
        currentTarget: T
        target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement
      },
    ): void
  }
  interface BoundInputEventHandler<T, E extends InputEvent> {
    0: (
      data: any,
      e: E & {
        currentTarget: T
        target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement
      },
    ) => void
    1: any
  }
  type InputEventHandlerUnion<T, E extends InputEvent> = InputEventHandler<T, E> | BoundInputEventHandler<T, E>
  interface ChangeEventHandler<T, E extends Event> {
    (
      e: E & {
        currentTarget: T
        target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement
      },
    ): void
  }
  interface BoundChangeEventHandler<T, E extends Event> {
    0: (
      data: any,
      e: E & {
        currentTarget: T
        target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement
      },
    ) => void
    1: any
  }
  type ChangeEventHandlerUnion<T, E extends Event> = ChangeEventHandler<T, E> | BoundChangeEventHandler<T, E>
  interface FocusEventHandler<T, E extends FocusEvent> {
    (
      e: E & {
        currentTarget: T
        target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement
      },
    ): void
  }
  interface BoundFocusEventHandler<T, E extends FocusEvent> {
    0: (
      data: any,
      e: E & {
        currentTarget: T
        target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : DOMElement
      },
    ) => void
    1: any
  }
  type FocusEventHandlerUnion<T, E extends FocusEvent> = FocusEventHandler<T, E> | BoundFocusEventHandler<T, E>
  interface IntrinsicAttributes {
    ref?: unknown | ((e: unknown) => void)
  }
  interface CustomAttributes<T> {
    ref?: T | ((el: T) => void)
    classList?: {
      [k: string]: boolean | undefined
    }
    $ServerOnly?: boolean
  }
  type Accessor<T> = () => T
  interface Directives {}
  interface DirectiveFunctions {
    [x: string]: (el: Element, accessor: Accessor<any>) => void
  }
  interface ExplicitProperties {}
  interface ExplicitAttributes {}
  interface CustomEvents {}
  interface CustomCaptureEvents {}
  type DirectiveAttributes = {
    [Key in keyof Directives as `use:${Key}`]?: Directives[Key]
  }
  type DirectiveFunctionAttributes<T> = {
    [K in keyof DirectiveFunctions as string extends K ? never : `use:${K}`]?: DirectiveFunctions[K] extends (
      el: infer E, // will be unknown if not provided
      ...rest: infer R // use rest so that we can check whether it's provided or not
    ) => void
      ? T extends E // everything extends unknown if E is unknown
        ? R extends [infer A] // check if has accessor provided
          ? A extends Accessor<infer V>
            ? V // it's an accessor
            : never // it isn't, type error
          : true // no accessor provided
        : never // T is the wrong element
      : never
  }
  type PropAttributes = {
    [Key in keyof ExplicitProperties as `prop:${Key}`]?: ExplicitProperties[Key]
  }
  type AttrAttributes = {
    [Key in keyof ExplicitAttributes as `attr:${Key}`]?: ExplicitAttributes[Key]
  }
  type OnAttributes<T> = {
    [Key in keyof CustomEvents as `on:${Key}`]?: EventHandler<T, CustomEvents[Key]>
  }
  type OnCaptureAttributes<T> = {
    [Key in keyof CustomCaptureEvents as `oncapture:${Key}`]?: EventHandler<T, CustomCaptureEvents[Key]>
  }
  interface DOMAttributes<T>
    extends CustomAttributes<T>,
      DirectiveAttributes,
      DirectiveFunctionAttributes<T>,
      PropAttributes,
      AttrAttributes,
      OnAttributes<T>,
      OnCaptureAttributes<T>,
      CustomEventHandlersCamelCase<T>,
      CustomEventHandlersLowerCase<T> {
    children?: Element
    innerHTML?: string
    innerText?: string | number
    textContent?: string | number
    // camel case events
    onCopy?: EventHandlerUnion<T, ClipboardEvent>
    onCut?: EventHandlerUnion<T, ClipboardEvent>
    onPaste?: EventHandlerUnion<T, ClipboardEvent>
    onCompositionEnd?: EventHandlerUnion<T, CompositionEvent>
    onCompositionStart?: EventHandlerUnion<T, CompositionEvent>
    onCompositionUpdate?: EventHandlerUnion<T, CompositionEvent>
    onFocusOut?: FocusEventHandlerUnion<T, FocusEvent>
    onFocusIn?: FocusEventHandlerUnion<T, FocusEvent>
    onEncrypted?: EventHandlerUnion<T, Event>
    onDragExit?: EventHandlerUnion<T, DragEvent>
    // lower case events
    oncopy?: EventHandlerUnion<T, ClipboardEvent>
    oncut?: EventHandlerUnion<T, ClipboardEvent>
    onpaste?: EventHandlerUnion<T, ClipboardEvent>
    oncompositionend?: EventHandlerUnion<T, CompositionEvent>
    oncompositionstart?: EventHandlerUnion<T, CompositionEvent>
    oncompositionupdate?: EventHandlerUnion<T, CompositionEvent>
    onfocusout?: FocusEventHandlerUnion<T, FocusEvent>
    onfocusin?: FocusEventHandlerUnion<T, FocusEvent>
    onencrypted?: EventHandlerUnion<T, Event>
    ondragexit?: EventHandlerUnion<T, DragEvent>
  }
  interface CustomEventHandlersCamelCase<T> {
    onAbort?: EventHandlerUnion<T, Event>
    onAnimationEnd?: EventHandlerUnion<T, AnimationEvent>
    onAnimationIteration?: EventHandlerUnion<T, AnimationEvent>
    onAnimationStart?: EventHandlerUnion<T, AnimationEvent>
    onAuxClick?: EventHandlerUnion<T, MouseEvent>
    onBeforeInput?: InputEventHandlerUnion<T, InputEvent>
    onBlur?: FocusEventHandlerUnion<T, FocusEvent>
    onCanPlay?: EventHandlerUnion<T, Event>
    onCanPlayThrough?: EventHandlerUnion<T, Event>
    onChange?: ChangeEventHandlerUnion<T, Event>
    onClick?: EventHandlerUnion<T, MouseEvent>
    onContextMenu?: EventHandlerUnion<T, MouseEvent>
    onDblClick?: EventHandlerUnion<T, MouseEvent>
    onDrag?: EventHandlerUnion<T, DragEvent>
    onDragEnd?: EventHandlerUnion<T, DragEvent>
    onDragEnter?: EventHandlerUnion<T, DragEvent>
    onDragLeave?: EventHandlerUnion<T, DragEvent>
    onDragOver?: EventHandlerUnion<T, DragEvent>
    onDragStart?: EventHandlerUnion<T, DragEvent>
    onDrop?: EventHandlerUnion<T, DragEvent>
    onDurationChange?: EventHandlerUnion<T, Event>
    onEmptied?: EventHandlerUnion<T, Event>
    onEnded?: EventHandlerUnion<T, Event>
    onError?: EventHandlerUnion<T, Event>
    onFocus?: FocusEventHandlerUnion<T, FocusEvent>
    onGotPointerCapture?: EventHandlerUnion<T, PointerEvent>
    onInput?: InputEventHandlerUnion<T, InputEvent>
    onInvalid?: EventHandlerUnion<T, Event>
    onKeyDown?: EventHandlerUnion<T, KeyboardEvent>
    onKeyPress?: EventHandlerUnion<T, KeyboardEvent>
    onKeyUp?: EventHandlerUnion<T, KeyboardEvent>
    onLoad?: EventHandlerUnion<T, Event>
    onLoadedData?: EventHandlerUnion<T, Event>
    onLoadedMetadata?: EventHandlerUnion<T, Event>
    onLoadStart?: EventHandlerUnion<T, Event>
    onLostPointerCapture?: EventHandlerUnion<T, PointerEvent>
    onMouseDown?: EventHandlerUnion<T, MouseEvent>
    onMouseEnter?: EventHandlerUnion<T, MouseEvent>
    onMouseLeave?: EventHandlerUnion<T, MouseEvent>
    onMouseMove?: EventHandlerUnion<T, MouseEvent>
    onMouseOut?: EventHandlerUnion<T, MouseEvent>
    onMouseOver?: EventHandlerUnion<T, MouseEvent>
    onMouseUp?: EventHandlerUnion<T, MouseEvent>
    onPause?: EventHandlerUnion<T, Event>
    onPlay?: EventHandlerUnion<T, Event>
    onPlaying?: EventHandlerUnion<T, Event>
    onPointerCancel?: EventHandlerUnion<T, PointerEvent>
    onPointerDown?: EventHandlerUnion<T, PointerEvent>
    onPointerEnter?: EventHandlerUnion<T, PointerEvent>
    onPointerLeave?: EventHandlerUnion<T, PointerEvent>
    onPointerMove?: EventHandlerUnion<T, PointerEvent>
    onPointerOut?: EventHandlerUnion<T, PointerEvent>
    onPointerOver?: EventHandlerUnion<T, PointerEvent>
    onPointerUp?: EventHandlerUnion<T, PointerEvent>
    onProgress?: EventHandlerUnion<T, Event>
    onRateChange?: EventHandlerUnion<T, Event>
    onReset?: EventHandlerUnion<T, Event>
    onScroll?: EventHandlerUnion<T, UIEvent>
    onSeeked?: EventHandlerUnion<T, Event>
    onSeeking?: EventHandlerUnion<T, Event>
    onSelect?: EventHandlerUnion<T, UIEvent>
    onStalled?: EventHandlerUnion<T, Event>
    onSubmit?: EventHandlerUnion<
      T,
      Event & {
        submitter: HTMLElement
      }
    >
    onSuspend?: EventHandlerUnion<T, Event>
    onTimeUpdate?: EventHandlerUnion<T, Event>
    onTouchCancel?: EventHandlerUnion<T, TouchEvent>
    onTouchEnd?: EventHandlerUnion<T, TouchEvent>
    onTouchMove?: EventHandlerUnion<T, TouchEvent>
    onTouchStart?: EventHandlerUnion<T, TouchEvent>
    onTransitionEnd?: EventHandlerUnion<T, TransitionEvent>
    onVolumeChange?: EventHandlerUnion<T, Event>
    onWaiting?: EventHandlerUnion<T, Event>
    onWheel?: EventHandlerUnion<T, WheelEvent>
  }
  /**
   * @type {GlobalEventHandlers}
   */
  interface CustomEventHandlersLowerCase<T> {
    onabort?: EventHandlerUnion<T, Event>
    onanimationend?: EventHandlerUnion<T, AnimationEvent>
    onanimationiteration?: EventHandlerUnion<T, AnimationEvent>
    onanimationstart?: EventHandlerUnion<T, AnimationEvent>
    onauxclick?: EventHandlerUnion<T, MouseEvent>
    onbeforeinput?: InputEventHandlerUnion<T, InputEvent>
    onblur?: FocusEventHandlerUnion<T, FocusEvent>
    oncanplay?: EventHandlerUnion<T, Event>
    oncanplaythrough?: EventHandlerUnion<T, Event>
    onchange?: ChangeEventHandlerUnion<T, Event>
    onclick?: EventHandlerUnion<T, MouseEvent>
    oncontextmenu?: EventHandlerUnion<T, MouseEvent>
    ondblclick?: EventHandlerUnion<T, MouseEvent>
    ondrag?: EventHandlerUnion<T, DragEvent>
    ondragend?: EventHandlerUnion<T, DragEvent>
    ondragenter?: EventHandlerUnion<T, DragEvent>
    ondragleave?: EventHandlerUnion<T, DragEvent>
    ondragover?: EventHandlerUnion<T, DragEvent>
    ondragstart?: EventHandlerUnion<T, DragEvent>
    ondrop?: EventHandlerUnion<T, DragEvent>
    ondurationchange?: EventHandlerUnion<T, Event>
    onemptied?: EventHandlerUnion<T, Event>
    onended?: EventHandlerUnion<T, Event>
    onerror?: EventHandlerUnion<T, Event>
    onfocus?: FocusEventHandlerUnion<T, FocusEvent>
    ongotpointercapture?: EventHandlerUnion<T, PointerEvent>
    oninput?: InputEventHandlerUnion<T, InputEvent>
    oninvalid?: EventHandlerUnion<T, Event>
    onkeydown?: EventHandlerUnion<T, KeyboardEvent>
    onkeypress?: EventHandlerUnion<T, KeyboardEvent>
    onkeyup?: EventHandlerUnion<T, KeyboardEvent>
    onload?: EventHandlerUnion<T, Event>
    onloadeddata?: EventHandlerUnion<T, Event>
    onloadedmetadata?: EventHandlerUnion<T, Event>
    onloadstart?: EventHandlerUnion<T, Event>
    onlostpointercapture?: EventHandlerUnion<T, PointerEvent>
    onmousedown?: EventHandlerUnion<T, MouseEvent>
    onmouseenter?: EventHandlerUnion<T, MouseEvent>
    onmouseleave?: EventHandlerUnion<T, MouseEvent>
    onmousemove?: EventHandlerUnion<T, MouseEvent>
    onmouseout?: EventHandlerUnion<T, MouseEvent>
    onmouseover?: EventHandlerUnion<T, MouseEvent>
    onmouseup?: EventHandlerUnion<T, MouseEvent>
    onpause?: EventHandlerUnion<T, Event>
    onplay?: EventHandlerUnion<T, Event>
    onplaying?: EventHandlerUnion<T, Event>
    onpointercancel?: EventHandlerUnion<T, PointerEvent>
    onpointerdown?: EventHandlerUnion<T, PointerEvent>
    onpointerenter?: EventHandlerUnion<T, PointerEvent>
    onpointerleave?: EventHandlerUnion<T, PointerEvent>
    onpointermove?: EventHandlerUnion<T, PointerEvent>
    onpointerout?: EventHandlerUnion<T, PointerEvent>
    onpointerover?: EventHandlerUnion<T, PointerEvent>
    onpointerup?: EventHandlerUnion<T, PointerEvent>
    onprogress?: EventHandlerUnion<T, Event>
    onratechange?: EventHandlerUnion<T, Event>
    onreset?: EventHandlerUnion<T, Event>
    onscroll?: EventHandlerUnion<T, UIEvent>
    onseeked?: EventHandlerUnion<T, Event>
    onseeking?: EventHandlerUnion<T, Event>
    onselect?: EventHandlerUnion<T, UIEvent>
    onstalled?: EventHandlerUnion<T, Event>
    onsubmit?: EventHandlerUnion<
      T,
      Event & {
        submitter: HTMLElement
      }
    >
    onsuspend?: EventHandlerUnion<T, Event>
    ontimeupdate?: EventHandlerUnion<T, Event>
    ontouchcancel?: EventHandlerUnion<T, TouchEvent>
    ontouchend?: EventHandlerUnion<T, TouchEvent>
    ontouchmove?: EventHandlerUnion<T, TouchEvent>
    ontouchstart?: EventHandlerUnion<T, TouchEvent>
    ontransitionend?: EventHandlerUnion<T, TransitionEvent>
    onvolumechange?: EventHandlerUnion<T, Event>
    onwaiting?: EventHandlerUnion<T, Event>
    onwheel?: EventHandlerUnion<T, WheelEvent>
  }
  interface CSSProperties extends csstype.PropertiesHyphen {
    // Override
    [key: `-${string}`]: string | number | undefined
  }
  type HTMLAutocapitalize = 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'
  type HTMLDir = 'ltr' | 'rtl' | 'auto'
  type HTMLFormEncType = 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'
  type HTMLFormMethod = 'post' | 'get' | 'dialog'
  type HTMLCrossorigin = 'anonymous' | 'use-credentials' | ''
  type HTMLReferrerPolicy =
    | 'no-referrer'
    | 'no-referrer-when-downgrade'
    | 'origin'
    | 'origin-when-cross-origin'
    | 'same-origin'
    | 'strict-origin'
    | 'strict-origin-when-cross-origin'
    | 'unsafe-url'
  type HTMLIframeSandbox =
    | 'allow-downloads-without-user-activation'
    | 'allow-downloads'
    | 'allow-forms'
    | 'allow-modals'
    | 'allow-orientation-lock'
    | 'allow-pointer-lock'
    | 'allow-popups'
    | 'allow-popups-to-escape-sandbox'
    | 'allow-presentation'
    | 'allow-same-origin'
    | 'allow-scripts'
    | 'allow-storage-access-by-user-activation'
    | 'allow-top-navigation'
    | 'allow-top-navigation-by-user-activation'
  type HTMLLinkAs =
    | 'audio'
    | 'document'
    | 'embed'
    | 'fetch'
    | 'font'
    | 'image'
    | 'object'
    | 'script'
    | 'style'
    | 'track'
    | 'video'
    | 'worker'
  // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
  interface AriaAttributes {
    /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
    'aria-activedescendant'?: string
    /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
    'aria-atomic'?: boolean | 'false' | 'true'
    /**
     * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
     * presented if they are made.
     */
    'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both'
    /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
    'aria-busy'?: boolean | 'false' | 'true'
    /**
     * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
     * @see aria-pressed @see aria-selected.
     */
    'aria-checked'?: boolean | 'false' | 'mixed' | 'true'
    /**
     * Defines the total number of columns in a table, grid, or treegrid.
     * @see aria-colindex.
     */
    'aria-colcount'?: number | string
    /**
     * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
     * @see aria-colcount @see aria-colspan.
     */
    'aria-colindex'?: number | string
    /**
     * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
     * @see aria-colindex @see aria-rowspan.
     */
    'aria-colspan'?: number | string
    /**
     * Identifies the element (or elements) whose contents or presence are controlled by the current element.
     * @see aria-owns.
     */
    'aria-controls'?: string
    /** Indicates the element that represents the current item within a container or set of related elements. */
    'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time'
    /**
     * Identifies the element (or elements) that describes the object.
     * @see aria-labelledby
     */
    'aria-describedby'?: string
    /**
     * Identifies the element that provides a detailed, extended description for the object.
     * @see aria-describedby.
     */
    'aria-details'?: string
    /**
     * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
     * @see aria-hidden @see aria-readonly.
     */
    'aria-disabled'?: boolean | 'false' | 'true'
    /**
     * Indicates what functions can be performed when a dragged object is released on the drop target.
     * @deprecated in ARIA 1.1
     */
    'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup'
    /**
     * Identifies the element that provides an error message for the object.
     * @see aria-invalid @see aria-describedby.
     */
    'aria-errormessage'?: string
    /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
    'aria-expanded'?: boolean | 'false' | 'true'
    /**
     * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
     * allows assistive technology to override the general default of reading in document source order.
     */
    'aria-flowto'?: string
    /**
     * Indicates an element's "grabbed" state in a drag-and-drop operation.
     * @deprecated in ARIA 1.1
     */
    'aria-grabbed'?: boolean | 'false' | 'true'
    /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
    'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog'
    /**
     * Indicates whether the element is exposed to an accessibility API.
     * @see aria-disabled.
     */
    'aria-hidden'?: boolean | 'false' | 'true'
    /**
     * Indicates the entered value does not conform to the format expected by the application.
     * @see aria-errormessage.
     */
    'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling'
    /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
    'aria-keyshortcuts'?: string
    /**
     * Defines a string value that labels the current element.
     * @see aria-labelledby.
     */
    'aria-label'?: string
    /**
     * Identifies the element (or elements) that labels the current element.
     * @see aria-describedby.
     */
    'aria-labelledby'?: string
    /** Defines the hierarchical level of an element within a structure. */
    'aria-level'?: number | string
    /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
    'aria-live'?: 'off' | 'assertive' | 'polite'
    /** Indicates whether an element is modal when displayed. */
    'aria-modal'?: boolean | 'false' | 'true'
    /** Indicates whether a text box accepts multiple lines of input or only a single line. */
    'aria-multiline'?: boolean | 'false' | 'true'
    /** Indicates that the user may select more than one item from the current selectable descendants. */
    'aria-multiselectable'?: boolean | 'false' | 'true'
    /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
    'aria-orientation'?: 'horizontal' | 'vertical'
    /**
     * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
     * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
     * @see aria-controls.
     */
    'aria-owns'?: string
    /**
     * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
     * A hint could be a sample value or a brief description of the expected format.
     */
    'aria-placeholder'?: string
    /**
     * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
     * @see aria-setsize.
     */
    'aria-posinset'?: number | string
    /**
     * Indicates the current "pressed" state of toggle buttons.
     * @see aria-checked @see aria-selected.
     */
    'aria-pressed'?: boolean | 'false' | 'mixed' | 'true'
    /**
     * Indicates that the element is not editable, but is otherwise operable.
     * @see aria-disabled.
     */
    'aria-readonly'?: boolean | 'false' | 'true'
    /**
     * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
     * @see aria-atomic.
     */
    'aria-relevant'?:
      | 'additions'
      | 'additions removals'
      | 'additions text'
      | 'all'
      | 'removals'
      | 'removals additions'
      | 'removals text'
      | 'text'
      | 'text additions'
      | 'text removals'
    /** Indicates that user input is required on the element before a form may be submitted. */
    'aria-required'?: boolean | 'false' | 'true'
    /** Defines a human-readable, author-localized description for the role of an element. */
    'aria-roledescription'?: string
    /**
     * Defines the total number of rows in a table, grid, or treegrid.
     * @see aria-rowindex.
     */
    'aria-rowcount'?: number | string
    /**
     * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
     * @see aria-rowcount @see aria-rowspan.
     */
    'aria-rowindex'?: number | string
    /**
     * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
     * @see aria-rowindex @see aria-colspan.
     */
    'aria-rowspan'?: number | string
    /**
     * Indicates the current "selected" state of various widgets.
     * @see aria-checked @see aria-pressed.
     */
    'aria-selected'?: boolean | 'false' | 'true'
    /**
     * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
     * @see aria-posinset.
     */
    'aria-setsize'?: number | string
    /** Indicates if items in a table or grid are sorted in ascending or descending order. */
    'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other'
    /** Defines the maximum allowed value for a range widget. */
    'aria-valuemax'?: number | string
    /** Defines the minimum allowed value for a range widget. */
    'aria-valuemin'?: number | string
    /**
     * Defines the current value for a range widget.
     * @see aria-valuetext.
     */
    'aria-valuenow'?: number | string
    /** Defines the human readable text alternative of aria-valuenow for a range widget. */
    'aria-valuetext'?: string
    role?:
      | 'alert'
      | 'alertdialog'
      | 'application'
      | 'article'
      | 'banner'
      | 'button'
      | 'cell'
      | 'checkbox'
      | 'columnheader'
      | 'combobox'
      | 'complementary'
      | 'contentinfo'
      | 'definition'
      | 'dialog'
      | 'directory'
      | 'document'
      | 'feed'
      | 'figure'
      | 'form'
      | 'grid'
      | 'gridcell'
      | 'group'
      | 'heading'
      | 'img'
      | 'link'
      | 'list'
      | 'listbox'
      | 'listitem'
      | 'log'
      | 'main'
      | 'marquee'
      | 'math'
      | 'menu'
      | 'menubar'
      | 'menuitem'
      | 'menuitemcheckbox'
      | 'menuitemradio'
      | 'meter'
      | 'navigation'
      | 'none'
      | 'note'
      | 'option'
      | 'presentation'
      | 'progressbar'
      | 'radio'
      | 'radiogroup'
      | 'region'
      | 'row'
      | 'rowgroup'
      | 'rowheader'
      | 'scrollbar'
      | 'search'
      | 'searchbox'
      | 'separator'
      | 'slider'
      | 'spinbutton'
      | 'status'
      | 'switch'
      | 'tab'
      | 'table'
      | 'tablist'
      | 'tabpanel'
      | 'term'
      | 'textbox'
      | 'timer'
      | 'toolbar'
      | 'tooltip'
      | 'tree'
      | 'treegrid'
      | 'treeitem'
  }
  // TODO: Should we allow this?
  // type ClassKeys = `class:${string}`;
  // type CSSKeys = Exclude<keyof csstype.PropertiesHyphen, `-${string}`>;
  // type CSSAttributes = {
  //   [key in CSSKeys as `style:${key}`]: csstype.PropertiesHyphen[key];
  // };
  interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
    // [key: ClassKeys]: boolean;
    accessKey?: string
    class?: string | undefined
    contenteditable?: boolean | 'inherit'
    contextmenu?: string
    dir?: HTMLDir
    draggable?: boolean
    hidden?: boolean
    id?: string
    lang?: string
    spellcheck?: boolean
    style?: CSSProperties | string
    tabindex?: number | string
    title?: string
    translate?: 'yes' | 'no'
    about?: string
    datatype?: string
    inlist?: any
    prefix?: string
    property?: string
    resource?: string
    typeof?: string
    vocab?: string
    autocapitalize?: HTMLAutocapitalize
    slot?: string
    color?: string
    itemprop?: string
    itemscope?: boolean
    itemtype?: string
    itemid?: string
    itemref?: string
    part?: string
    exportparts?: string
    inputmode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'
    contentEditable?: boolean | 'inherit'
    contextMenu?: string
    tabIndex?: number | string
    autoCapitalize?: HTMLAutocapitalize
    itemProp?: string
    itemScope?: boolean
    itemType?: string
    itemId?: string
    itemRef?: string
    exportParts?: string
    inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'
  }
  interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {
    download?: any
    href?: string
    hreflang?: string
    media?: string
    ping?: string
    referrerpolicy?: HTMLReferrerPolicy
    rel?: string
    target?: string
    type?: string
    referrerPolicy?: HTMLReferrerPolicy
  }
  interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}
  interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {
    alt?: string
    coords?: string
    download?: any
    href?: string
    hreflang?: string
    ping?: string
    referrerpolicy?: HTMLReferrerPolicy
    rel?: string
    shape?: 'rect' | 'circle' | 'poly' | 'default'
    target?: string
    referrerPolicy?: HTMLReferrerPolicy
  }
  interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {
    href?: string
    target?: string
  }
  interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {
    cite?: string
  }
  interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {
    autofocus?: boolean
    disabled?: boolean
    form?: string
    formaction?: string
    formenctype?: HTMLFormEncType
    formmethod?: HTMLFormMethod
    formnovalidate?: boolean
    formtarget?: string
    name?: string
    type?: 'submit' | 'reset' | 'button'
    value?: string
    formAction?: string
    formEnctype?: HTMLFormEncType
    formMethod?: HTMLFormMethod
    formNoValidate?: boolean
    formTarget?: string
  }
  interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {
    width?: number | string
    height?: number | string
  }
  interface ColHTMLAttributes<T> extends HTMLAttributes<T> {
    span?: number | string
    width?: number | string
  }
  interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {
    span?: number | string
  }
  interface DataHTMLAttributes<T> extends HTMLAttributes<T> {
    value?: string | string[] | number
  }
  interface DetailsHtmlAttributes<T> extends HTMLAttributes<T> {
    open?: boolean
    onToggle?: EventHandlerUnion<T, Event>
    ontoggle?: EventHandlerUnion<T, Event>
  }
  interface DialogHtmlAttributes<T> extends HTMLAttributes<T> {
    open?: boolean
    onClose?: EventHandlerUnion<T, Event>
    onCancel?: EventHandlerUnion<T, Event>
  }
  interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {
    height?: number | string
    src?: string
    type?: string
    width?: number | string
  }
  interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {
    disabled?: boolean
    form?: string
    name?: string
  }
  interface FormHTMLAttributes<T> extends HTMLAttributes<T> {
    acceptcharset?: string
    action?: string
    autocomplete?: string
    encoding?: HTMLFormEncType
    enctype?: HTMLFormEncType
    method?: HTMLFormMethod
    name?: string
    novalidate?: boolean
    target?: string
    acceptCharset?: string
    noValidate?: boolean
  }
  interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {
    allow?: string
    allowfullscreen?: boolean
    height?: number | string
    loading?: 'eager' | 'lazy'
    name?: string
    referrerpolicy?: HTMLReferrerPolicy
    sandbox?: HTMLIframeSandbox | string
    src?: string
    srcdoc?: string
    width?: number | string
    referrerPolicy?: HTMLReferrerPolicy
  }
  interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {
    alt?: string
    crossorigin?: HTMLCrossorigin
    decoding?: 'sync' | 'async' | 'auto'
    height?: number | string
    ismap?: boolean
    isMap?: boolean
    loading?: 'eager' | 'lazy'
    referrerpolicy?: HTMLReferrerPolicy
    referrerPolicy?: HTMLReferrerPolicy
    sizes?: string
    src?: string
    srcset?: string
    srcSet?: string
    usemap?: string
    useMap?: string
    width?: number | string
    crossOrigin?: HTMLCrossorigin
  }
  interface InputHTMLAttributes<T> extends HTMLAttributes<T> {
    accept?: string
    alt?: string
    autocomplete?: string
    autocorrect?: 'on' | 'off'
    autofocus?: boolean
    capture?: boolean | string
    checked?: boolean
    crossorigin?: HTMLCrossorigin
    disabled?: boolean
    enterkeyhint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'
    form?: string
    formaction?: string
    formenctype?: HTMLFormEncType
    formmethod?: HTMLFormMethod
    formnovalidate?: boolean
    formtarget?: string
    height?: number | string
    incremental?: boolean
    list?: string
    max?: number | string
    maxlength?: number | string
    min?: number | string
    minlength?: number | string
    multiple?: boolean
    name?: string
    pattern?: string
    placeholder?: string
    readonly?: boolean
    results?: number
    required?: boolean
    size?: number | string
    src?: string
    step?: number | string
    type?: string
    value?: string | string[] | number
    width?: number | string
    crossOrigin?: HTMLCrossorigin
    formAction?: string
    formEnctype?: HTMLFormEncType
    formMethod?: HTMLFormMethod
    formNoValidate?: boolean
    formTarget?: string
    maxLength?: number | string
    minLength?: number | string
    readOnly?: boolean
  }
  interface InsHTMLAttributes<T> extends HTMLAttributes<T> {
    cite?: string
    dateTime?: string
  }
  interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {
    autofocus?: boolean
    challenge?: string
    disabled?: boolean
    form?: string
    keytype?: string
    keyparams?: string
    name?: string
  }
  interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {
    for?: string
    form?: string
  }
  interface LiHTMLAttributes<T> extends HTMLAttributes<T> {
    value?: number | string
  }
  interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {
    as?: HTMLLinkAs
    crossorigin?: HTMLCrossorigin
    disabled?: boolean
    href?: string
    hreflang?: string
    integrity?: string
    media?: string
    referrerpolicy?: HTMLReferrerPolicy
    rel?: string
    sizes?: string
    type?: string
    crossOrigin?: HTMLCrossorigin
    referrerPolicy?: HTMLReferrerPolicy
  }
  interface MapHTMLAttributes<T> extends HTMLAttributes<T> {
    name?: string
  }
  interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {
    autoplay?: boolean
    controls?: boolean
    crossorigin?: HTMLCrossorigin
    loop?: boolean
    mediagroup?: string
    muted?: boolean
    preload?: 'none' | 'metadata' | 'auto' | ''
    src?: string
    crossOrigin?: HTMLCrossorigin
    mediaGroup?: string
  }
  interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {
    label?: string
    type?: 'context' | 'toolbar'
  }
  interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {
    charset?: string
    content?: string
    httpequiv?: string
    name?: string
    httpEquiv?: string
  }
  interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {
    form?: string
    high?: number | string
    low?: number | string
    max?: number | string
    min?: number | string
    optimum?: number | string
    value?: string | string[] | number
  }
  interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {
    cite?: string
  }
  interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {
    data?: string
    form?: string
    height?: number | string
    name?: string
    type?: string
    usemap?: string
    width?: number | string
    useMap?: string
  }
  interface OlHTMLAttributes<T> extends HTMLAttributes<T> {
    reversed?: boolean
    start?: number | string
    type?: '1' | 'a' | 'A' | 'i' | 'I'
  }
  interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {
    disabled?: boolean
    label?: string
  }
  interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {
    disabled?: boolean
    label?: string
    selected?: boolean
    value?: string | string[] | number
  }
  interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {
    form?: string
    for?: string
    name?: string
  }
  interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {
    name?: string
    value?: string | string[] | number
  }
  interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {
    max?: number | string
    value?: string | string[] | number
  }
  interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {
    async?: boolean
    charset?: string
    crossorigin?: HTMLCrossorigin
    defer?: boolean
    integrity?: string
    nomodule?: boolean
    nonce?: string
    referrerpolicy?: HTMLReferrerPolicy
    src?: string
    type?: string
    crossOrigin?: HTMLCrossorigin
    noModule?: boolean
    referrerPolicy?: HTMLReferrerPolicy
  }
  interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {
    autocomplete?: string
    autofocus?: boolean
    disabled?: boolean
    form?: string
    multiple?: boolean
    name?: string
    required?: boolean
    size?: number | string
    value?: string | string[] | number
  }
  interface HTMLSlotElementAttributes<T = HTMLSlotElement> extends HTMLAttributes<T> {
    name?: string
  }
  interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {
    media?: string
    sizes?: string
    src?: string
    srcset?: string
    type?: string
  }
  interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {
    media?: string
    nonce?: string
    scoped?: boolean
    type?: string
  }
  interface TdHTMLAttributes<T> extends HTMLAttributes<T> {
    colspan?: number | string
    headers?: string
    rowspan?: number | string
    colSpan?: number | string
    rowSpan?: number | string
  }
  interface TemplateHTMLAttributes<T extends HTMLTemplateElement> extends HTMLAttributes<T> {
    content?: DocumentFragment
  }
  interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {
    autocomplete?: string
    autofocus?: boolean
    cols?: number | string
    dirname?: string
    disabled?: boolean
    form?: string
    maxlength?: number | string
    minlength?: number | string
    name?: string
    placeholder?: string
    readonly?: boolean
    required?: boolean
    rows?: number | string
    value?: string | string[] | number
    wrap?: 'hard' | 'soft' | 'off'
    maxLength?: number | string
    minLength?: number | string
    readOnly?: boolean
  }
  interface ThHTMLAttributes<T> extends HTMLAttributes<T> {
    colspan?: number | string
    headers?: string
    rowspan?: number | string
    colSpan?: number | string
    rowSpan?: number | string
    scope?: 'col' | 'row' | 'rowgroup' | 'colgroup'
  }
  interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {
    datetime?: string
    dateTime?: string
  }
  interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {
    default?: boolean
    kind?: 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata'
    label?: string
    src?: string
    srclang?: string
  }
  interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {
    height?: number | string
    playsinline?: boolean
    poster?: string
    width?: number | string
  }
  type SVGPreserveAspectRatio =
    | 'none'
    | 'xMinYMin'
    | 'xMidYMin'
    | 'xMaxYMin'
    | 'xMinYMid'
    | 'xMidYMid'
    | 'xMaxYMid'
    | 'xMinYMax'
    | 'xMidYMax'
    | 'xMaxYMax'
    | 'xMinYMin meet'
    | 'xMidYMin meet'
    | 'xMaxYMin meet'
    | 'xMinYMid meet'
    | 'xMidYMid meet'
    | 'xMaxYMid meet'
    | 'xMinYMax meet'
    | 'xMidYMax meet'
    | 'xMaxYMax meet'
    | 'xMinYMin slice'
    | 'xMidYMin slice'
    | 'xMaxYMin slice'
    | 'xMinYMid slice'
    | 'xMidYMid slice'
    | 'xMaxYMid slice'
    | 'xMinYMax slice'
    | 'xMidYMax slice'
    | 'xMaxYMax slice'
  type ImagePreserveAspectRatio =
    | SVGPreserveAspectRatio
    | 'defer none'
    | 'defer xMinYMin'
    | 'defer xMidYMin'
    | 'defer xMaxYMin'
    | 'defer xMinYMid'
    | 'defer xMidYMid'
    | 'defer xMaxYMid'
    | 'defer xMinYMax'
    | 'defer xMidYMax'
    | 'defer xMaxYMax'
    | 'defer xMinYMin meet'
    | 'defer xMidYMin meet'
    | 'defer xMaxYMin meet'
    | 'defer xMinYMid meet'
    | 'defer xMidYMid meet'
    | 'defer xMaxYMid meet'
    | 'defer xMinYMax meet'
    | 'defer xMidYMax meet'
    | 'defer xMaxYMax meet'
    | 'defer xMinYMin slice'
    | 'defer xMidYMin slice'
    | 'defer xMaxYMin slice'
    | 'defer xMinYMid slice'
    | 'defer xMidYMid slice'
    | 'defer xMaxYMid slice'
    | 'defer xMinYMax slice'
    | 'defer xMidYMax slice'
    | 'defer xMaxYMax slice'
  type SVGUnits = 'userSpaceOnUse' | 'objectBoundingBox'
  interface CoreSVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {
    id?: string
    lang?: string
    tabIndex?: number | string
    tabindex?: number | string
  }
  interface StylableSVGAttributes {
    class?: string | undefined
    style?: CSSProperties | string
  }
  interface TransformableSVGAttributes {
    transform?: string
  }
  interface ConditionalProcessingSVGAttributes {
    requiredExtensions?: string
    requiredFeatures?: string
    systemLanguage?: string
  }
  interface ExternalResourceSVGAttributes {
    externalResourcesRequired?: 'true' | 'false'
  }
  interface AnimationTimingSVGAttributes {
    begin?: string
    dur?: string
    end?: string
    min?: string
    max?: string
    restart?: 'always' | 'whenNotActive' | 'never'
    repeatCount?: number | 'indefinite'
    repeatDur?: string
    fill?: 'freeze' | 'remove'
  }
  interface AnimationValueSVGAttributes {
    calcMode?: 'discrete' | 'linear' | 'paced' | 'spline'
    values?: string
    keyTimes?: string
    keySplines?: string
    from?: number | string
    to?: number | string
    by?: number | string
  }
  interface AnimationAdditionSVGAttributes {
    attributeName?: string
    additive?: 'replace' | 'sum'
    accumulate?: 'none' | 'sum'
  }
  interface AnimationAttributeTargetSVGAttributes {
    attributeName?: string
    attributeType?: 'CSS' | 'XML' | 'auto'
  }
  interface PresentationSVGAttributes {
    'alignment-baseline'?:
      | 'auto'
      | 'baseline'
      | 'before-edge'
      | 'text-before-edge'
      | 'middle'
      | 'central'
      | 'after-edge'
      | 'text-after-edge'
      | 'ideographic'
      | 'alphabetic'
      | 'hanging'
      | 'mathematical'
      | 'inherit'
    'baseline-shift'?: number | string
    clip?: string
    'clip-path'?: string
    'clip-rule'?: 'nonzero' | 'evenodd' | 'inherit'
    color?: string
    'color-interpolation'?: 'auto' | 'sRGB' | 'linearRGB' | 'inherit'
    'color-interpolation-filters'?: 'auto' | 'sRGB' | 'linearRGB' | 'inherit'
    'color-profile'?: string
    'color-rendering'?: 'auto' | 'optimizeSpeed' | 'optimizeQuality' | 'inherit'
    cursor?: string
    direction?: 'ltr' | 'rtl' | 'inherit'
    display?: string
    'dominant-baseline'?:
      | 'auto'
      | 'text-bottom'
      | 'alphabetic'
      | 'ideographic'
      | 'middle'
      | 'central'
      | 'mathematical'
      | 'hanging'
      | 'text-top'
      | 'inherit'
    'enable-background'?: string
    fill?: string
    'fill-opacity'?: number | string | 'inherit'
    'fill-rule'?: 'nonzero' | 'evenodd' | 'inherit'
    filter?: string
    'flood-color'?: string
    'flood-opacity'?: number | string | 'inherit'
    'font-family'?: string
    'font-size'?: string
    'font-size-adjust'?: number | string
    'font-stretch'?: string
    'font-style'?: 'normal' | 'italic' | 'oblique' | 'inherit'
    'font-variant'?: string
    'font-weight'?: number | string
    'glyph-orientation-horizontal'?: string
    'glyph-orientation-vertical'?: string
    'image-rendering'?: 'auto' | 'optimizeQuality' | 'optimizeSpeed' | 'inherit'
    kerning?: string
    'letter-spacing'?: number | string
    'lighting-color'?: string
    'marker-end'?: string
    'marker-mid'?: string
    'marker-start'?: string
    mask?: string
    opacity?: number | string | 'inherit'
    overflow?: 'visible' | 'hidden' | 'scroll' | 'auto' | 'inherit'
    pathLength?: string | number
    'pointer-events'?:
      | 'bounding-box'
      | 'visiblePainted'
      | 'visibleFill'
      | 'visibleStroke'
      | 'visible'
      | 'painted'
      | 'color'
      | 'fill'
      | 'stroke'
      | 'all'
      | 'none'
      | 'inherit'
    'shape-rendering'?: 'auto' | 'optimizeSpeed' | 'crispEdges' | 'geometricPrecision' | 'inherit'
    'stop-color'?: string
    'stop-opacity'?: number | string | 'inherit'
    stroke?: string
    'stroke-dasharray'?: string
    'stroke-dashoffset'?: number | string
    'stroke-linecap'?: 'butt' | 'round' | 'square' | 'inherit'
    'stroke-linejoin'?: 'arcs' | 'bevel' | 'miter' | 'miter-clip' | 'round' | 'inherit'
    'stroke-miterlimit'?: number | string | 'inherit'
    'stroke-opacity'?: number | string | 'inherit'
    'stroke-width'?: number | string
    'text-anchor'?: 'start' | 'middle' | 'end' | 'inherit'
    'text-decoration'?: 'none' | 'underline' | 'overline' | 'line-through' | 'blink' | 'inherit'
    'text-rendering'?: 'auto' | 'optimizeSpeed' | 'optimizeLegibility' | 'geometricPrecision' | 'inherit'
    'unicode-bidi'?: string
    visibility?: 'visible' | 'hidden' | 'collapse' | 'inherit'
    'word-spacing'?: number | string
    'writing-mode'?: 'lr-tb' | 'rl-tb' | 'tb-rl' | 'lr' | 'rl' | 'tb' | 'inherit'
  }
  interface AnimationElementSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      ExternalResourceSVGAttributes,
      ConditionalProcessingSVGAttributes {}
  interface ContainerElementSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      Pick<
        PresentationSVGAttributes,
        | 'clip-path'
        | 'mask'
        | 'cursor'
        | 'opacity'
        | 'filter'
        | 'enable-background'
        | 'color-interpolation'
        | 'color-rendering'
      > {}
  interface FilterPrimitiveElementSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      Pick<PresentationSVGAttributes, 'color-interpolation-filters'> {
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
    result?: string
  }
  interface SingleInputFilterSVGAttributes {
    in?: string
  }
  interface DoubleInputFilterSVGAttributes {
    in?: string
    in2?: string
  }
  interface FitToViewBoxSVGAttributes {
    viewBox?: string
    preserveAspectRatio?: SVGPreserveAspectRatio
  }
  interface GradientElementSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes {
    gradientUnits?: SVGUnits
    gradientTransform?: string
    spreadMethod?: 'pad' | 'reflect' | 'repeat'
    href?: string
  }
  interface GraphicsElementSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      Pick<
        PresentationSVGAttributes,
        | 'clip-rule'
        | 'mask'
        | 'pointer-events'
        | 'cursor'
        | 'opacity'
        | 'filter'
        | 'display'
        | 'visibility'
        | 'color-interpolation'
        | 'color-rendering'
      > {}
  interface LightSourceElementSVGAttributes<T> extends CoreSVGAttributes<T> {}
  interface NewViewportSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      Pick<PresentationSVGAttributes, 'overflow' | 'clip'> {
    viewBox?: string
  }
  interface ShapeElementSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      Pick<
        PresentationSVGAttributes,
        | 'color'
        | 'fill'
        | 'fill-rule'
        | 'fill-opacity'
        | 'stroke'
        | 'stroke-width'
        | 'stroke-linecap'
        | 'stroke-linejoin'
        | 'stroke-miterlimit'
        | 'stroke-dasharray'
        | 'stroke-dashoffset'
        | 'stroke-opacity'
        | 'shape-rendering'
        | 'pathLength'
      > {}
  interface TextContentElementSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      Pick<
        PresentationSVGAttributes,
        | 'font-family'
        | 'font-style'
        | 'font-variant'
        | 'font-weight'
        | 'font-stretch'
        | 'font-size'
        | 'font-size-adjust'
        | 'kerning'
        | 'letter-spacing'
        | 'word-spacing'
        | 'text-decoration'
        | 'glyph-orientation-horizontal'
        | 'glyph-orientation-vertical'
        | 'direction'
        | 'unicode-bidi'
        | 'text-anchor'
        | 'dominant-baseline'
        | 'color'
        | 'fill'
        | 'fill-rule'
        | 'fill-opacity'
        | 'stroke'
        | 'stroke-width'
        | 'stroke-linecap'
        | 'stroke-linejoin'
        | 'stroke-miterlimit'
        | 'stroke-dasharray'
        | 'stroke-dashoffset'
        | 'stroke-opacity'
      > {}
  interface ZoomAndPanSVGAttributes {
    zoomAndPan?: 'disable' | 'magnify'
  }
  interface AnimateSVGAttributes<T>
    extends AnimationElementSVGAttributes<T>,
      AnimationAttributeTargetSVGAttributes,
      AnimationTimingSVGAttributes,
      AnimationValueSVGAttributes,
      AnimationAdditionSVGAttributes,
      Pick<PresentationSVGAttributes, 'color-interpolation' | 'color-rendering'> {}
  interface AnimateMotionSVGAttributes<T>
    extends AnimationElementSVGAttributes<T>,
      AnimationTimingSVGAttributes,
      AnimationValueSVGAttributes,
      AnimationAdditionSVGAttributes {
    path?: string
    keyPoints?: string
    rotate?: number | string | 'auto' | 'auto-reverse'
    origin?: 'default'
  }
  interface AnimateTransformSVGAttributes<T>
    extends AnimationElementSVGAttributes<T>,
      AnimationAttributeTargetSVGAttributes,
      AnimationTimingSVGAttributes,
      AnimationValueSVGAttributes,
      AnimationAdditionSVGAttributes {
    type?: 'translate' | 'scale' | 'rotate' | 'skewX' | 'skewY'
  }
  interface CircleSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes {
    cx?: number | string
    cy?: number | string
    r?: number | string
  }
  interface ClipPathSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'clip-path'> {
    clipPathUnits?: SVGUnits
  }
  interface DefsSVGAttributes<T>
    extends ContainerElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes {}
  interface DescSVGAttributes<T> extends CoreSVGAttributes<T>, StylableSVGAttributes {}
  interface EllipseSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes {
    cx?: number | string
    cy?: number | string
    rx?: number | string
    ry?: number | string
  }
  interface FeBlendSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      DoubleInputFilterSVGAttributes,
      StylableSVGAttributes {
    mode?: 'normal' | 'multiply' | 'screen' | 'darken' | 'lighten'
  }
  interface FeColorMatrixSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes {
    type?: 'matrix' | 'saturate' | 'hueRotate' | 'luminanceToAlpha'
    values?: string
  }
  interface FeComponentTransferSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes {}
  interface FeCompositeSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      DoubleInputFilterSVGAttributes,
      StylableSVGAttributes {
    operator?: 'over' | 'in' | 'out' | 'atop' | 'xor' | 'arithmetic'
    k1?: number | string
    k2?: number | string
    k3?: number | string
    k4?: number | string
  }
  interface FeConvolveMatrixSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes {
    order?: number | string
    kernelMatrix?: string
    divisor?: number | string
    bias?: number | string
    targetX?: number | string
    targetY?: number | string
    edgeMode?: 'duplicate' | 'wrap' | 'none'
    kernelUnitLength?: number | string
    preserveAlpha?: 'true' | 'false'
  }
  interface FeDiffuseLightingSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes,
      Pick<PresentationSVGAttributes, 'color' | 'lighting-color'> {
    surfaceScale?: number | string
    diffuseConstant?: number | string
    kernelUnitLength?: number | string
  }
  interface FeDisplacementMapSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      DoubleInputFilterSVGAttributes,
      StylableSVGAttributes {
    scale?: number | string
    xChannelSelector?: 'R' | 'G' | 'B' | 'A'
    yChannelSelector?: 'R' | 'G' | 'B' | 'A'
  }
  interface FeDistantLightSVGAttributes<T> extends LightSourceElementSVGAttributes<T> {
    azimuth?: number | string
    elevation?: number | string
  }
  interface FeFloodSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      StylableSVGAttributes,
      Pick<PresentationSVGAttributes, 'color' | 'flood-color' | 'flood-opacity'> {}
  interface FeFuncSVGAttributes<T> extends CoreSVGAttributes<T> {
    type?: 'identity' | 'table' | 'discrete' | 'linear' | 'gamma'
    tableValues?: string
    slope?: number | string
    intercept?: number | string
    amplitude?: number | string
    exponent?: number | string
    offset?: number | string
  }
  interface FeGaussianBlurSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes {
    stdDeviation?: number | string
  }
  interface FeImageSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes {
    preserveAspectRatio?: SVGPreserveAspectRatio
    href?: string
  }
  interface FeMergeSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, StylableSVGAttributes {}
  interface FeMergeNodeSVGAttributes<T> extends CoreSVGAttributes<T>, SingleInputFilterSVGAttributes {}
  interface FeMorphologySVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes {
    operator?: 'erode' | 'dilate'
    radius?: number | string
  }
  interface FeOffsetSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes {
    dx?: number | string
    dy?: number | string
  }
  interface FePointLightSVGAttributes<T> extends LightSourceElementSVGAttributes<T> {
    x?: number | string
    y?: number | string
    z?: number | string
  }
  interface FeSpecularLightingSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes,
      Pick<PresentationSVGAttributes, 'color' | 'lighting-color'> {
    surfaceScale?: string
    specularConstant?: string
    specularExponent?: string
    kernelUnitLength?: number | string
  }
  interface FeSpotLightSVGAttributes<T> extends LightSourceElementSVGAttributes<T> {
    x?: number | string
    y?: number | string
    z?: number | string
    pointsAtX?: number | string
    pointsAtY?: number | string
    pointsAtZ?: number | string
    specularExponent?: number | string
    limitingConeAngle?: number | string
  }
  interface FeTileSVGAttributes<T>
    extends FilterPrimitiveElementSVGAttributes<T>,
      SingleInputFilterSVGAttributes,
      StylableSVGAttributes {}
  interface FeTurbulanceSVGAttributes<T> extends FilterPrimitiveElementSVGAttributes<T>, StylableSVGAttributes {
    baseFrequency?: number | string
    numOctaves?: number | string
    seed?: number | string
    stitchTiles?: 'stitch' | 'noStitch'
    type?: 'fractalNoise' | 'turbulence'
  }
  interface FilterSVGAttributes<T> extends CoreSVGAttributes<T>, ExternalResourceSVGAttributes, StylableSVGAttributes {
    filterUnits?: SVGUnits
    primitiveUnits?: SVGUnits
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
    filterRes?: number | string
  }
  interface ForeignObjectSVGAttributes<T>
    extends NewViewportSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'display' | 'visibility'> {
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
  }
  interface GSVGAttributes<T>
    extends ContainerElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'display' | 'visibility'> {}
  interface ImageSVGAttributes<T>
    extends NewViewportSVGAttributes<T>,
      GraphicsElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'color-profile' | 'image-rendering'> {
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
    preserveAspectRatio?: ImagePreserveAspectRatio
    href?: string
  }
  interface LineSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'marker-start' | 'marker-mid' | 'marker-end'> {
    x1?: number | string
    y1?: number | string
    x2?: number | string
    y2?: number | string
  }
  interface LinearGradientSVGAttributes<T> extends GradientElementSVGAttributes<T> {
    x1?: number | string
    x2?: number | string
    y1?: number | string
    y2?: number | string
  }
  interface MarkerSVGAttributes<T>
    extends ContainerElementSVGAttributes<T>,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      FitToViewBoxSVGAttributes,
      Pick<PresentationSVGAttributes, 'overflow' | 'clip'> {
    markerUnits?: 'strokeWidth' | 'userSpaceOnUse'
    refX?: number | string
    refY?: number | string
    markerWidth?: number | string
    markerHeight?: number | string
    orient?: string
  }
  interface MaskSVGAttributes<T>
    extends Omit<ContainerElementSVGAttributes<T>, 'opacity' | 'filter'>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes {
    maskUnits?: SVGUnits
    maskContentUnits?: SVGUnits
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
  }
  interface MetadataSVGAttributes<T> extends CoreSVGAttributes<T> {}
  interface PathSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'marker-start' | 'marker-mid' | 'marker-end'> {
    d?: string
    pathLength?: number | string
  }
  interface PatternSVGAttributes<T>
    extends ContainerElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      FitToViewBoxSVGAttributes,
      Pick<PresentationSVGAttributes, 'overflow' | 'clip'> {
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
    patternUnits?: SVGUnits
    patternContentUnits?: SVGUnits
    patternTransform?: string
    href?: string
  }
  interface PolygonSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'marker-start' | 'marker-mid' | 'marker-end'> {
    points?: string
  }
  interface PolylineSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'marker-start' | 'marker-mid' | 'marker-end'> {
    points?: string
  }
  interface RadialGradientSVGAttributes<T> extends GradientElementSVGAttributes<T> {
    cx?: number | string
    cy?: number | string
    r?: number | string
    fx?: number | string
    fy?: number | string
  }
  interface RectSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ShapeElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes {
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
    rx?: number | string
    ry?: number | string
  }
  interface StopSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      StylableSVGAttributes,
      Pick<PresentationSVGAttributes, 'color' | 'stop-color' | 'stop-opacity'> {
    offset?: number | string
  }
  interface SvgSVGAttributes<T>
    extends ContainerElementSVGAttributes<T>,
      NewViewportSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      FitToViewBoxSVGAttributes,
      ZoomAndPanSVGAttributes,
      PresentationSVGAttributes {
    version?: string
    baseProfile?: string
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
    contentScriptType?: string
    contentStyleType?: string
    xmlns?: string
  }
  interface SwitchSVGAttributes<T>
    extends ContainerElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'display' | 'visibility'> {}
  interface SymbolSVGAttributes<T>
    extends ContainerElementSVGAttributes<T>,
      NewViewportSVGAttributes<T>,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      FitToViewBoxSVGAttributes {}
  interface TextSVGAttributes<T>
    extends TextContentElementSVGAttributes<T>,
      GraphicsElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes,
      Pick<PresentationSVGAttributes, 'writing-mode' | 'text-rendering'> {
    x?: number | string
    y?: number | string
    dx?: number | string
    dy?: number | string
    rotate?: number | string
    textLength?: number | string
    lengthAdjust?: 'spacing' | 'spacingAndGlyphs'
  }
  interface TextPathSVGAttributes<T>
    extends TextContentElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      Pick<PresentationSVGAttributes, 'alignment-baseline' | 'baseline-shift' | 'display' | 'visibility'> {
    startOffset?: number | string
    method?: 'align' | 'stretch'
    spacing?: 'auto' | 'exact'
    href?: string
  }
  interface TSpanSVGAttributes<T>
    extends TextContentElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      Pick<PresentationSVGAttributes, 'alignment-baseline' | 'baseline-shift' | 'display' | 'visibility'> {
    x?: number | string
    y?: number | string
    dx?: number | string
    dy?: number | string
    rotate?: number | string
    textLength?: number | string
    lengthAdjust?: 'spacing' | 'spacingAndGlyphs'
  }
  interface UseSVGAttributes<T>
    extends GraphicsElementSVGAttributes<T>,
      ConditionalProcessingSVGAttributes,
      ExternalResourceSVGAttributes,
      StylableSVGAttributes,
      TransformableSVGAttributes {
    x?: number | string
    y?: number | string
    width?: number | string
    height?: number | string
    href?: string
  }
  interface ViewSVGAttributes<T>
    extends CoreSVGAttributes<T>,
      ExternalResourceSVGAttributes,
      FitToViewBoxSVGAttributes,
      ZoomAndPanSVGAttributes {
    viewTarget?: string
  }
  /**
   * @type {HTMLElementTagNameMap}
   */
  interface HTMLElementTags {
    a: AnchorHTMLAttributes<HTMLAnchorElement>
    abbr: HTMLAttributes<HTMLElement>
    address: HTMLAttributes<HTMLElement>
    area: AreaHTMLAttributes<HTMLAreaElement>
    article: HTMLAttributes<HTMLElement>
    aside: HTMLAttributes<HTMLElement>
    audio: AudioHTMLAttributes<HTMLAudioElement>
    b: HTMLAttributes<HTMLElement>
    base: BaseHTMLAttributes<HTMLBaseElement>
    bdi: HTMLAttributes<HTMLElement>
    bdo: HTMLAttributes<HTMLElement>
    blockquote: BlockquoteHTMLAttributes<HTMLElement>
    body: HTMLAttributes<HTMLBodyElement>
    br: HTMLAttributes<HTMLBRElement>
    button: ButtonHTMLAttributes<HTMLButtonElement>
    canvas: CanvasHTMLAttributes<HTMLCanvasElement>
    caption: HTMLAttributes<HTMLElement>
    cite: HTMLAttributes<HTMLElement>
    code: HTMLAttributes<HTMLElement>
    col: ColHTMLAttributes<HTMLTableColElement>
    colgroup: ColgroupHTMLAttributes<HTMLTableColElement>
    data: DataHTMLAttributes<HTMLElement>
    datalist: HTMLAttributes<HTMLDataListElement>
    dd: HTMLAttributes<HTMLElement>
    del: HTMLAttributes<HTMLElement>
    details: DetailsHtmlAttributes<HTMLDetailsElement>
    dfn: HTMLAttributes<HTMLElement>
    dialog: DialogHtmlAttributes<HTMLDialogElement>
    div: HTMLAttributes<HTMLDivElement>
    dl: HTMLAttributes<HTMLDListElement>
    dt: HTMLAttributes<HTMLElement>
    em: HTMLAttributes<HTMLElement>
    embed: EmbedHTMLAttributes<HTMLEmbedElement>
    fieldset: FieldsetHTMLAttributes<HTMLFieldSetElement>
    figcaption: HTMLAttributes<HTMLElement>
    figure: HTMLAttributes<HTMLElement>
    footer: HTMLAttributes<HTMLElement>
    form: FormHTMLAttributes<HTMLFormElement>
    h1: HTMLAttributes<HTMLHeadingElement>
    h2: HTMLAttributes<HTMLHeadingElement>
    h3: HTMLAttributes<HTMLHeadingElement>
    h4: HTMLAttributes<HTMLHeadingElement>
    h5: HTMLAttributes<HTMLHeadingElement>
    h6: HTMLAttributes<HTMLHeadingElement>
    head: HTMLAttributes<HTMLHeadElement>
    header: HTMLAttributes<HTMLElement>
    hgroup: HTMLAttributes<HTMLElement>
    hr: HTMLAttributes<HTMLHRElement>
    html: HTMLAttributes<HTMLHtmlElement>
    i: HTMLAttributes<HTMLElement>
    iframe: IframeHTMLAttributes<HTMLIFrameElement>
    img: ImgHTMLAttributes<HTMLImageElement>
    input: InputHTMLAttributes<HTMLInputElement>
    ins: InsHTMLAttributes<HTMLModElement>
    kbd: HTMLAttributes<HTMLElement>
    label: LabelHTMLAttributes<HTMLLabelElement>
    legend: HTMLAttributes<HTMLLegendElement>
    li: LiHTMLAttributes<HTMLLIElement>
    link: LinkHTMLAttributes<HTMLLinkElement>
    main: HTMLAttributes<HTMLElement>
    map: MapHTMLAttributes<HTMLMapElement>
    mark: HTMLAttributes<HTMLElement>
    menu: MenuHTMLAttributes<HTMLElement>
    meta: MetaHTMLAttributes<HTMLMetaElement>
    meter: MeterHTMLAttributes<HTMLElement>
    nav: HTMLAttributes<HTMLElement>
    noscript: HTMLAttributes<HTMLElement>
    object: ObjectHTMLAttributes<HTMLObjectElement>
    ol: OlHTMLAttributes<HTMLOListElement>
    optgroup: OptgroupHTMLAttributes<HTMLOptGroupElement>
    option: OptionHTMLAttributes<HTMLOptionElement>
    output: OutputHTMLAttributes<HTMLElement>
    p: HTMLAttributes<HTMLParagraphElement>
    picture: HTMLAttributes<HTMLElement>
    pre: HTMLAttributes<HTMLPreElement>
    progress: ProgressHTMLAttributes<HTMLProgressElement>
    q: QuoteHTMLAttributes<HTMLQuoteElement>
    rp: HTMLAttributes<HTMLElement>
    rt: HTMLAttributes<HTMLElement>
    ruby: HTMLAttributes<HTMLElement>
    s: HTMLAttributes<HTMLElement>
    samp: HTMLAttributes<HTMLElement>
    script: ScriptHTMLAttributes<HTMLElement>
    section: HTMLAttributes<HTMLElement>
    select: SelectHTMLAttributes<HTMLSelectElement>
    slot: HTMLSlotElementAttributes
    small: HTMLAttributes<HTMLElement>
    source: SourceHTMLAttributes<HTMLSourceElement>
    span: HTMLAttributes<HTMLSpanElement>
    strong: HTMLAttributes<HTMLElement>
    style: StyleHTMLAttributes<HTMLStyleElement>
    sub: HTMLAttributes<HTMLElement>
    summary: HTMLAttributes<HTMLElement>
    sup: HTMLAttributes<HTMLElement>
    table: HTMLAttributes<HTMLTableElement>
    tbody: HTMLAttributes<HTMLTableSectionElement>
    td: TdHTMLAttributes<HTMLTableCellElement>
    template: TemplateHTMLAttributes<HTMLTemplateElement>
    textarea: TextareaHTMLAttributes<HTMLTextAreaElement>
    tfoot: HTMLAttributes<HTMLTableSectionElement>
    th: ThHTMLAttributes<HTMLTableCellElement>
    thead: HTMLAttributes<HTMLTableSectionElement>
    time: TimeHTMLAttributes<HTMLElement>
    title: HTMLAttributes<HTMLTitleElement>
    tr: HTMLAttributes<HTMLTableRowElement>
    track: TrackHTMLAttributes<HTMLTrackElement>
    u: HTMLAttributes<HTMLElement>
    ul: HTMLAttributes<HTMLUListElement>
    var: HTMLAttributes<HTMLElement>
    video: VideoHTMLAttributes<HTMLVideoElement>
    wbr: HTMLAttributes<HTMLElement>
  }
  /**
   * @type {HTMLElementDeprecatedTagNameMap}
   */
  interface HTMLElementDeprecatedTags {
    big: HTMLAttributes<HTMLElement>
    keygen: KeygenHTMLAttributes<HTMLElement>
    menuitem: HTMLAttributes<HTMLElement>
    noindex: HTMLAttributes<HTMLElement>
    param: ParamHTMLAttributes<HTMLParamElement>
  }
  /**
   * @type {SVGElementTagNameMap}
   */
  interface SVGElementTags {
    animate: AnimateSVGAttributes<SVGAnimateElement>
    animateMotion: AnimateMotionSVGAttributes<SVGAnimateMotionElement>
    animateTransform: AnimateTransformSVGAttributes<SVGAnimateTransformElement>
    circle: CircleSVGAttributes<SVGCircleElement>
    clipPath: ClipPathSVGAttributes<SVGClipPathElement>
    defs: DefsSVGAttributes<SVGDefsElement>
    desc: DescSVGAttributes<SVGDescElement>
    ellipse: EllipseSVGAttributes<SVGEllipseElement>
    feBlend: FeBlendSVGAttributes<SVGFEBlendElement>
    feColorMatrix: FeColorMatrixSVGAttributes<SVGFEColorMatrixElement>
    feComponentTransfer: FeComponentTransferSVGAttributes<SVGFEComponentTransferElement>
    feComposite: FeCompositeSVGAttributes<SVGFECompositeElement>
    feConvolveMatrix: FeConvolveMatrixSVGAttributes<SVGFEConvolveMatrixElement>
    feDiffuseLighting: FeDiffuseLightingSVGAttributes<SVGFEDiffuseLightingElement>
    feDisplacementMap: FeDisplacementMapSVGAttributes<SVGFEDisplacementMapElement>
    feDistantLight: FeDistantLightSVGAttributes<SVGFEDistantLightElement>
    feDropShadow: Partial<SVGFEDropShadowElement>
    feFlood: FeFloodSVGAttributes<SVGFEFloodElement>
    feFuncA: FeFuncSVGAttributes<SVGFEFuncAElement>
    feFuncB: FeFuncSVGAttributes<SVGFEFuncBElement>
    feFuncG: FeFuncSVGAttributes<SVGFEFuncGElement>
    feFuncR: FeFuncSVGAttributes<SVGFEFuncRElement>
    feGaussianBlur: FeGaussianBlurSVGAttributes<SVGFEGaussianBlurElement>
    feImage: FeImageSVGAttributes<SVGFEImageElement>
    feMerge: FeMergeSVGAttributes<SVGFEMergeElement>
    feMergeNode: FeMergeNodeSVGAttributes<SVGFEMergeNodeElement>
    feMorphology: FeMorphologySVGAttributes<SVGFEMorphologyElement>
    feOffset: FeOffsetSVGAttributes<SVGFEOffsetElement>
    fePointLight: FePointLightSVGAttributes<SVGFEPointLightElement>
    feSpecularLighting: FeSpecularLightingSVGAttributes<SVGFESpecularLightingElement>
    feSpotLight: FeSpotLightSVGAttributes<SVGFESpotLightElement>
    feTile: FeTileSVGAttributes<SVGFETileElement>
    feTurbulence: FeTurbulanceSVGAttributes<SVGFETurbulenceElement>
    filter: FilterSVGAttributes<SVGFilterElement>
    foreignObject: ForeignObjectSVGAttributes<SVGForeignObjectElement>
    g: GSVGAttributes<SVGGElement>
    image: ImageSVGAttributes<SVGImageElement>
    line: LineSVGAttributes<SVGLineElement>
    linearGradient: LinearGradientSVGAttributes<SVGLinearGradientElement>
    marker: MarkerSVGAttributes<SVGMarkerElement>
    mask: MaskSVGAttributes<SVGMaskElement>
    metadata: MetadataSVGAttributes<SVGMetadataElement>
    mpath: Partial<SVGMPathElement>
    path: PathSVGAttributes<SVGPathElement>
    pattern: PatternSVGAttributes<SVGPatternElement>
    polygon: PolygonSVGAttributes<SVGPolygonElement>
    polyline: PolylineSVGAttributes<SVGPolylineElement>
    radialGradient: RadialGradientSVGAttributes<SVGRadialGradientElement>
    rect: RectSVGAttributes<SVGRectElement>
    set: Partial<SVGSetElement>
    stop: StopSVGAttributes<SVGStopElement>
    svg: SvgSVGAttributes<SVGSVGElement>
    switch: SwitchSVGAttributes<SVGSwitchElement>
    symbol: SymbolSVGAttributes<SVGSymbolElement>
    text: TextSVGAttributes<SVGTextElement>
    textPath: TextPathSVGAttributes<SVGTextPathElement>
    tspan: TSpanSVGAttributes<SVGTSpanElement>
    use: UseSVGAttributes<SVGUseElement>
    view: ViewSVGAttributes<SVGViewElement>
  }
  interface IntrinsicElements extends HTMLElementTags, HTMLElementDeprecatedTags, SVGElementTags {}
}
export declare function enableHydration(): void
/**
 * A general `Component` has no implicit `children` prop.  If desired, you can
 * specify one as in `Component<{name: String, children: JSX.Element}>`.
 */
export type Component<P = {}> = (props: P) => JSX.Element
/**
 * Extend props to forbid the `children` prop.
 * Use this to prevent accidentally passing `children` to components that
 * would silently throw them away.
 */
export type VoidProps<P = {}> = P & {
  children?: never
}
/**
 * `VoidComponent` forbids the `children` prop.
 * Use this to prevent accidentally passing `children` to components that
 * would silently throw them away.
 */
export type VoidComponent<P = {}> = Component<VoidProps<P>>
/**
 * Extend props to allow an optional `children` prop with the usual
 * type in JSX, `JSX.Element` (which allows elements, arrays, functions, etc.).
 * Use this for components that you want to accept children.
 */
export type ParentProps<P = {}> = P & {
  children?: JSX.Element
}
/**
 * `ParentComponent` allows an optional `children` prop with the usual
 * type in JSX, `JSX.Element` (which allows elements, arrays, functions, etc.).
 * Use this for components that you want to accept children.
 */
export type ParentComponent<P = {}> = Component<ParentProps<P>>
/**
 * Extend props to require a `children` prop with the specified type.
 * Use this for components where you need a specific child type,
 * typically a function that receives specific argument types.
 * Note that all JSX <Elements> are of the type `JSX.Element`.
 */
export type FlowProps<P = {}, C = JSX.Element> = P & {
  children: C
}
/**
 * `FlowComponent` requires a `children` prop with the specified type.
 * Use this for components where you need a specific child type,
 * typically a function that receives specific argument types.
 * Note that all JSX <Elements> are of the type `JSX.Element`.
 */
export type FlowComponent<P = {}, C = JSX.Element> = Component<FlowProps<P, C>>
/** @deprecated: use `ParentProps` instead */
export type PropsWithChildren<P = {}> = ParentProps<P>
export type ValidComponent = keyof JSX.IntrinsicElements | Component<any> | (string & {})
/**
 * Takes the props of the passed component and returns its type
 *
 * @example
 * ComponentProps<typeof Portal> // { mount?: Node; useShadow?: boolean; children: JSX.Element }
 * ComponentProps<'div'> // JSX.HTMLAttributes<HTMLDivElement>
 */
export type ComponentProps<T extends ValidComponent> = T extends Component<infer P>
  ? P
  : T extends keyof JSX.IntrinsicElements
  ? JSX.IntrinsicElements[T]
  : Record<string, unknown>
/**
 * Type of `props.ref`, for use in `Component` or `props` typing.
 *
 * @example Component<{ref: Ref<Element>}>
 */
export type Ref<T> = T | ((val: T) => void)
export declare function createComponent<T>(Comp: Component<T>, props: T): JSX.Element
type DistributeOverride<T, F> = T extends undefined ? F : T
type Override<T, U> = T extends any
  ? U extends any
    ? {
        [K in keyof T]: K extends keyof U ? DistributeOverride<U[K], T[K]> : T[K]
      } & {
        [K in keyof U]: K extends keyof T ? DistributeOverride<U[K], T[K]> : U[K]
      }
    : T & U
  : T & U
type OverrideSpread<T, U> = T extends any
  ? {
      [K in keyof ({
        [K in keyof T]: any
      } & {
        [K in keyof U]?: any
      } & {
        [K in U extends any ? keyof U : keyof U]?: any
      })]: K extends keyof T
        ? Exclude<U extends any ? U[K & keyof U] : never, undefined> | T[K]
        : U extends any
        ? U[K & keyof U]
        : never
    }
  : T & U
type Simplify<T> = T extends any
  ? {
      [K in keyof T]: T[K]
    }
  : T
type _MergeProps<T extends unknown[], Curr = {}> = T extends [infer Next | (() => infer Next), ...infer Rest]
  ? _MergeProps<Rest, Override<Curr, Next>>
  : T extends [...infer Rest, infer Next | (() => infer Next)]
  ? Override<_MergeProps<Rest, Curr>, Next>
  : T extends []
  ? Curr
  : T extends (infer I | (() => infer I))[]
  ? OverrideSpread<Curr, I>
  : Curr
export type MergeProps<T extends unknown[]> = Simplify<_MergeProps<T>>
export declare function mergeProps<T extends unknown[]>(...sources: T): MergeProps<T>
export type SplitProps<T, K extends (readonly (keyof T)[])[]> = [
  ...{
    [P in keyof K]: P extends `${number}` ? Pick<T, Extract<K[P], readonly (keyof T)[]>[number]> : never
  },
  Omit<T, K[number][number]>,
]
export declare function splitProps<
  T extends Record<any, any>,
  K extends [readonly (keyof T)[], ...(readonly (keyof T)[])[]],
>(props: T, ...keys: K): SplitProps<T, K>
export declare function lazy<T extends Component<any>>(
  fn: () => Promise<{
    default: T
  }>,
): T & {
  preload: () => Promise<{
    default: T
  }>
}
export declare function createUniqueId(): string
/**
 * creates a list elements from a list
 *
 * it receives a map function as its child that receives a list element and an accessor with the index and returns a JSX-Element; if the list is empty, an optional fallback is returned:
 * ```typescript
 * <For each={items} fallback={<div>No items</div>}>
 *   {(item, index) => <div data-index={index()}>{item}</div>}
 * </For>
 * ```
 * If you have a list with fixed indices and changing values, consider using `<Index>` instead.
 *
 * @description https://www.solidjs.com/docs/latest/api#for
 */
export declare function For<T extends readonly any[], U extends JSX.Element>(props: {
  each: T | undefined | null | false
  fallback?: JSX.Element
  children: (item: T[number], index: Accessor<number>) => U
}): JSX.Element
/**
 * Non-keyed iteration over a list creating elements from its items
 *
 * To be used if you have a list with fixed indices, but changing values.
 * ```typescript
 * <Index each={items} fallback={<div>No items</div>}>
 *   {(item, index) => <div data-index={index}>{item()}</div>}
 * </Index>
 * ```
 * If you have a list with changing indices, better use `<For>`.
 *
 * @description https://www.solidjs.com/docs/latest/api#index
 */
export declare function Index<T extends readonly any[], U extends JSX.Element>(props: {
  each: T | undefined | null | false
  fallback?: JSX.Element
  children: (item: Accessor<T[number]>, index: number) => U
}): JSX.Element
type RequiredParameter<T> = T extends () => unknown ? never : T
/**
 * Conditionally render its children or an optional fallback component
 * @description https://www.solidjs.com/docs/latest/api#show
 */
export declare function Show<T, TRenderFunction extends (item: Accessor<NonNullable<T>>) => JSX.Element>(props: {
  when: T | undefined | null | false
  keyed?: false
  fallback?: JSX.Element
  children: JSX.Element | RequiredParameter<TRenderFunction>
}): JSX.Element
export declare function Show<T, TRenderFunction extends (item: NonNullable<T>) => JSX.Element>(props: {
  when: T | undefined | null | false
  keyed: true
  fallback?: JSX.Element
  children: JSX.Element | RequiredParameter<TRenderFunction>
}): JSX.Element
/**
 * switches between content based on mutually exclusive conditions
 * ```typescript
 * <Switch fallback={<FourOhFour />}>
 *   <Match when={state.route === 'home'}>
 *     <Home />
 *   </Match>
 *   <Match when={state.route === 'settings'}>
 *     <Settings />
 *   </Match>
 * </Switch>
 * ```
 * @description https://www.solidjs.com/docs/latest/api#switchmatch
 */
export declare function Switch(props: { fallback?: JSX.Element; children: JSX.Element }): JSX.Element
export type MatchProps<T> = {
  when: T | undefined | null | false
  keyed?: boolean
  children: JSX.Element | ((item: NonNullable<T> | Accessor<NonNullable<T>>) => JSX.Element)
}
/**
 * selects a content based on condition when inside a `<Switch>` control flow
 * ```typescript
 * <Match when={condition()}>
 *   <Content/>
 * </Match>
 * ```
 * @description https://www.solidjs.com/docs/latest/api#switchmatch
 */
export declare function Match<T, TRenderFunction extends (item: Accessor<NonNullable<T>>) => JSX.Element>(props: {
  when: T | undefined | null | false
  keyed?: false
  children: JSX.Element | RequiredParameter<TRenderFunction>
}): JSX.Element
export declare function Match<T, TRenderFunction extends (item: NonNullable<T>) => JSX.Element>(props: {
  when: T | undefined | null | false
  keyed: true
  children: JSX.Element | RequiredParameter<TRenderFunction>
}): JSX.Element
export declare function resetErrorBoundaries(): void
/**
 * catches uncaught errors inside components and renders a fallback content
 *
 * Also supports a callback form that passes the error and a reset function:
 * ```typescript
 * <ErrorBoundary fallback={
 *   (err, reset) => <div onClick={reset}>Error: {err.toString()}</div>
 * }>
 *   <MyComp />
 * </ErrorBoundary>
 * ```
 * Errors thrown from the fallback can be caught by a parent ErrorBoundary
 *
 * @description https://www.solidjs.com/docs/latest/api#errorboundary
 */
export declare function ErrorBoundary(props: {
  fallback: JSX.Element | ((err: any, reset: () => void) => JSX.Element)
  children: JSX.Element
}): JSX.Element
/**
 * **[experimental]** controls the order in which suspended content is rendered
 *
 * @description https://www.solidjs.com/docs/latest/api#suspenselist-experimental
 */
export declare function SuspenseList(props: {
  children: JSX.Element
  revealOrder: 'forwards' | 'backwards' | 'together'
  tail?: 'collapsed' | 'hidden'
}): JSX.Element
/**
 * tracks all resources inside a component and renders a fallback until they are all resolved
 * ```typescript
 * const AsyncComponent = lazy(() => import('./component'));
 *
 * <Suspense fallback={<LoadingIndicator />}>
 *   <AsyncComponent />
 * </Suspense>
 * ```
 * @description https://www.solidjs.com/docs/latest/api#suspense
 */
export declare function Suspense(props: { fallback?: JSX.Element; children: JSX.Element }): JSX.Element
type HydrationContext = {
  id: string
  count: number
}
type SharedConfig = {
  context?: HydrationContext
  resources?: {
    [key: string]: any
  }
  load?: (id: string) => Promise<any> | any | undefined
  gather?: (key: string) => void
  registry?: Map<string, Element>
  done?: boolean
}
export declare const sharedConfig: SharedConfig
export declare const equalFn: <T>(a: T, b: T) => boolean
export declare const $PROXY: unique symbol
export declare const $TRACK: unique symbol
export declare const $DEVCOMP: unique symbol
export declare var Owner: Owner | null
declare let Transition: TransitionState | null
declare let ExternalSourceFactory: ExternalSourceFactory | null
type ComputationState = 0 | 1 | 2
interface SourceMapValue {
  value: unknown
  name?: string
  graph?: Owner
}
interface SignalState<T> extends SourceMapValue {
  value: T
  observers: Computation<any>[] | null
  observerSlots: number[] | null
  tValue?: T
  comparator?: (prev: T, next: T) => boolean
}
export interface Owner {
  owned: Computation<any>[] | null
  cleanups: (() => void)[] | null
  owner: Owner | null
  context: any | null
  sourceMap?: SourceMapValue[]
  name?: string
}
interface Computation<Init, Next extends Init = Init> extends Owner {
  fn: EffectFunction<Init, Next>
  state: ComputationState
  tState?: ComputationState
  sources: SignalState<Next>[] | null
  sourceSlots: number[] | null
  value?: Init
  updatedAt: number | null
  pure: boolean
  user?: boolean
  suspense?: SuspenseContextType
}
interface TransitionState {
  sources: Set<SignalState<any>>
  effects: Computation<any>[]
  promises: Set<Promise<any>>
  disposed: Set<Computation<any>>
  queue: Set<Computation<any>>
  scheduler?: (fn: () => void) => unknown
  running: boolean
  done?: Promise<void>
  resolve?: () => void
}
type ExternalSourceFactory = <Prev, Next extends Prev = Prev>(
  fn: EffectFunction<Prev, Next>,
  trigger: () => void,
) => ExternalSource
interface ExternalSource {
  track: EffectFunction<any, any>
  dispose: () => void
}
type RootFunction<T> = (dispose: () => void) => T
/**
 * Creates a new non-tracked reactive context that doesn't auto-dispose
 *
 * @param fn a function in which the reactive state is scoped
 * @param detachedOwner optional reactive context to bind the root to
 * @returns the output of `fn`.
 *
 * @description https://www.solidjs.com/docs/latest/api#createroot
 */
export declare function createRoot<T>(fn: RootFunction<T>, detachedOwner?: typeof Owner): T
export type Accessor<T> = () => T
export type Setter<T> = (undefined extends T ? () => undefined : {}) &
  (<U extends T>(value: (prev: T) => U) => U) &
  (<U extends T>(value: Exclude<U, Function>) => U) &
  (<U extends T>(value: Exclude<U, Function> | ((prev: T) => U)) => U)
export type Signal<T> = [get: Accessor<T>, set: Setter<T>]
export interface SignalOptions<T> extends MemoOptions<T> {
  internal?: boolean
}
/**
 * Creates a simple reactive state with a getter and setter
 * ```typescript
 * const [state: Accessor<T>, setState: Setter<T>] = createSignal<T>(
 *  value: T,
 *  options?: { name?: string, equals?: false | ((prev: T, next: T) => boolean) }
 * )
 * ```
 * @param value initial value of the state; if empty, the state's type will automatically extended with undefined; otherwise you need to extend the type manually if you want setting to undefined not be an error
 * @param options optional object with a name for debugging purposes and equals, a comparator function for the previous and next value to allow fine-grained control over the reactivity
 *
 * @returns ```typescript
 * [state: Accessor<T>, setState: Setter<T>]
 * ```
 * * the Accessor is merely a function that returns the current value and registers each call to the reactive root
 * * the Setter is a function that allows directly setting or mutating the value:
 * ```typescript
 * const [count, setCount] = createSignal(0);
 * setCount(count => count + 1);
 * ```
 *
 * @description https://www.solidjs.com/docs/latest/api#createsignal
 */
export declare function createSignal<T>(): Signal<T | undefined>
export declare function createSignal<T>(value: T, options?: SignalOptions<T>): Signal<T>
interface BaseOptions {
  name?: string
}
export type NoInfer<T extends any> = [T][T extends any ? 0 : never]
export interface EffectOptions extends BaseOptions {}
export type EffectFunction<Prev, Next extends Prev = Prev> = (v: Prev) => Next
/**
 * Creates a reactive computation that runs immediately before render, mainly used to write to other reactive primitives
 * ```typescript
 * export function createComputed<Next, Init = Next>(
 *   fn: (v: Init | Next) => Next,
 *   value?: Init,
 *   options?: { name?: string }
 * ): void;
 * ```
 * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation
 * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument
 * @param options allows to set a name in dev mode for debugging purposes
 *
 * @description https://www.solidjs.com/docs/latest/api#createcomputed
 */
export declare function createComputed<Next>(fn: EffectFunction<undefined | NoInfer<Next>, Next>): void
export declare function createComputed<Next, Init = Next>(
  fn: EffectFunction<Init | Next, Next>,
  value: Init,
  options?: EffectOptions,
): void
/**
 * Creates a reactive computation that runs during the render phase as DOM elements are created and updated but not necessarily connected
 * ```typescript
 * export function createRenderEffect<T>(
 *   fn: (v: T) => T,
 *   value?: T,
 *   options?: { name?: string }
 * ): void;
 * ```
 * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation
 * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument
 * @param options allows to set a name in dev mode for debugging purposes
 *
 * @description https://www.solidjs.com/docs/latest/api#createrendereffect
 */
export declare function createRenderEffect<Next>(fn: EffectFunction<undefined | NoInfer<Next>, Next>): void
export declare function createRenderEffect<Next, Init = Next>(
  fn: EffectFunction<Init | Next, Next>,
  value: Init,
  options?: EffectOptions,
): void
/**
 * Creates a reactive computation that runs after the render phase
 * ```typescript
 * export function createEffect<T>(
 *   fn: (v: T) => T,
 *   value?: T,
 *   options?: { name?: string }
 * ): void;
 * ```
 * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation
 * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument
 * @param options allows to set a name in dev mode for debugging purposes
 *
 * @description https://www.solidjs.com/docs/latest/api#createeffect
 */
export declare function createEffect<Next>(fn: EffectFunction<undefined | NoInfer<Next>, Next>): void
export declare function createEffect<Next, Init = Next>(
  fn: EffectFunction<Init | Next, Next>,
  value: Init,
  options?: EffectOptions & {
    render?: boolean
  },
): void
/**
 * Creates a reactive computation that runs after the render phase with flexible tracking
 * ```typescript
 * export function createReaction(
 *   onInvalidate: () => void,
 *   options?: { name?: string }
 * ): (fn: () => void) => void;
 * ```
 * @param invalidated a function that is called when tracked function is invalidated.
 * @param options allows to set a name in dev mode for debugging purposes
 *
 * @description https://www.solidjs.com/docs/latest/api#createreaction
 */
export declare function createReaction(
  onInvalidate: () => void,
  options?: EffectOptions,
): (tracking: () => void) => void
interface Memo<Prev, Next = Prev> extends SignalState<Next>, Computation<Next> {
  value: Next
  tOwned?: Computation<Prev | Next, Next>[]
}
export interface MemoOptions<T> extends EffectOptions {
  equals?: false | ((prev: T, next: T) => boolean)
}
/**
 * Creates a readonly derived reactive memoized signal
 * ```typescript
 * export function createMemo<T>(
 *   fn: (v: T) => T,
 *   value?: T,
 *   options?: { name?: string, equals?: false | ((prev: T, next: T) => boolean) }
 * ): () => T;
 * ```
 * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation
 * @param value an optional initial value for the computation; if set, fn will never receive undefined as first argument
 * @param options allows to set a name in dev mode for debugging purposes and use a custom comparison function in equals
 *
 * @description https://www.solidjs.com/docs/latest/api#creatememo
 */
export declare function createMemo<Next extends Prev, Prev = Next>(
  fn: EffectFunction<undefined | NoInfer<Prev>, Next>,
): Accessor<Next>
export declare function createMemo<Next extends Prev, Init = Next, Prev = Next>(
  fn: EffectFunction<Init | Prev, Next>,
  value: Init,
  options?: MemoOptions<Next>,
): Accessor<Next>
interface Unresolved {
  state: 'unresolved'
  loading: false
  error: undefined
  latest: undefined
  (): undefined
}
interface Pending {
  state: 'pending'
  loading: true
  error: undefined
  latest: undefined
  (): undefined
}
interface Ready<T> {
  state: 'ready'
  loading: false
  error: undefined
  latest: T
  (): T
}
interface Refreshing<T> {
  state: 'refreshing'
  loading: true
  error: undefined
  latest: T
  (): T
}
interface Errored {
  state: 'errored'
  loading: false
  error: any
  latest: never
  (): never
}
export type Resource<T> = Unresolved | Pending | Ready<T> | Refreshing<T> | Errored
export type InitializedResource<T> = Ready<T> | Refreshing<T> | Errored
export type ResourceActions<T, R = unknown> = {
  mutate: Setter<T>
  refetch: (info?: R) => T | Promise<T> | undefined | null
}
export type ResourceSource<S> = S | false | null | undefined | (() => S | false | null | undefined)
export type ResourceFetcher<S, T, R = unknown> = (k: S, info: ResourceFetcherInfo<T, R>) => T | Promise<T>
export type ResourceFetcherInfo<T, R = unknown> = {
  value: T | undefined
  refetching: R | boolean
}
export type ResourceOptions<T, S = unknown> = {
  initialValue?: T
  name?: string
  deferStream?: boolean
  ssrLoadFrom?: 'initial' | 'server'
  storage?: (init: T | undefined) => [Accessor<T | undefined>, Setter<T | undefined>]
  onHydrated?: (
    k: S | undefined,
    info: {
      value: T | undefined
    },
  ) => void
}
export type InitializedResourceOptions<T, S = unknown> = ResourceOptions<T, S> & {
  initialValue: T
}
export type ResourceReturn<T, R = unknown> = [Resource<T>, ResourceActions<T | undefined, R>]
export type InitializedResourceReturn<T, R = unknown> = [InitializedResource<T>, ResourceActions<T, R>]
/**
 * Creates a resource that wraps a repeated promise in a reactive pattern:
 * ```typescript
 * // Without source
 * const [resource, { mutate, refetch }] = createResource(fetcher, options);
 * // With source
 * const [resource, { mutate, refetch }] = createResource(source, fetcher, options);
 * ```
 * @param source - reactive data function which has its non-nullish and non-false values passed to the fetcher, optional
 * @param fetcher - function that receives the source (true if source not provided), the last or initial value, and whether the resource is being refetched, and returns a value or a Promise:
 * ```typescript
 * const fetcher: ResourceFetcher<S, T, R> = (
 *   sourceOutput: S,
 *   info: { value: T | undefined, refetching: R | boolean }
 * ) => T | Promise<T>;
 * ```
 * @param options - an optional object with the initialValue and the name (for debugging purposes); see {@link ResourceOptions}
 *
 * @returns ```typescript
 * [Resource<T>, { mutate: Setter<T>, refetch: () => void }]
 * ```
 *
 * * Setting an `initialValue` in the options will mean that both the prev() accessor and the resource should never return undefined (if that is wanted, you need to extend the type with undefined)
 * * `mutate` allows to manually overwrite the resource without calling the fetcher
 * * `refetch` will re-run the fetcher without changing the source, and if called with a value, that value will be passed to the fetcher via the `refetching` property on the fetcher's second parameter
 *
 * @description https://www.solidjs.com/docs/latest/api#createresource
 */
export declare function createResource<T, R = unknown>(
  fetcher: ResourceFetcher<true, T, R>,
  options: InitializedResourceOptions<NoInfer<T>, true>,
): InitializedResourceReturn<T, R>
export declare function createResource<T, R = unknown>(
  fetcher: ResourceFetcher<true, T, R>,
  options?: ResourceOptions<NoInfer<T>, true>,
): ResourceReturn<T, R>
export declare function createResource<T, S, R = unknown>(
  source: ResourceSource<S>,
  fetcher: ResourceFetcher<S, T, R>,
  options: InitializedResourceOptions<NoInfer<T>, S>,
): InitializedResourceReturn<T, R>
export declare function createResource<T, S, R = unknown>(
  source: ResourceSource<S>,
  fetcher: ResourceFetcher<S, T, R>,
  options?: ResourceOptions<NoInfer<T>, S>,
): ResourceReturn<T, R>
interface DeferredOptions<T> {
  equals?: false | ((prev: T, next: T) => boolean)
  name?: string
  timeoutMs?: number
}
/**
 * Creates a reactive computation that only runs and notifies the reactive context when the browser is idle
 * ```typescript
 * export function createDeferred<T>(
 *   fn: (v: T) => T,
 *   options?: { timeoutMs?: number, name?: string, equals?: false | ((prev: T, next: T) => boolean) }
 * ): () => T);
 * ```
 * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation
 * @param options allows to set the timeout in milliseconds, use a custom comparison function and set a name in dev mode for debugging purposes
 *
 * @description https://www.solidjs.com/docs/latest/api#createdeferred
 */
export declare function createDeferred<T>(source: Accessor<T>, options?: DeferredOptions<T>): Accessor<T>
type EqualityCheckerFunction<T, U> = (a: U, b: T) => boolean
/**
 * Creates a conditional signal that only notifies subscribers when entering or exiting their key matching the value
 * ```typescript
 * export function createSelector<T, U>(
 *   source: () => T
 *   fn: (a: U, b: T) => boolean,
 *   options?: { name?: string }
 * ): (k: U) => boolean;
 * ```
 * @param source
 * @param fn a function that receives its previous or the initial value, if set, and returns a new value used to react on a computation
 * @param options allows to set a name in dev mode for debugging purposes, optional
 *
 * ```typescript
 * const isSelected = createSelector(selectedId);
 * <For each={list()}>
 *   {(item) => <li classList={{ active: isSelected(item.id) }}>{item.name}</li>}
 * </For>
 * ```
 *
 * This makes the operation O(2) instead of O(n).
 *
 * @description https://www.solidjs.com/docs/latest/api#createselector
 */
export declare function createSelector<T, U>(
  source: Accessor<T>,
  fn?: EqualityCheckerFunction<T, U>,
  options?: BaseOptions,
): (key: U) => boolean
/**
 * Holds changes inside the block before the reactive context is updated
 * @param fn wraps the reactive updates that should be batched
 * @returns the return value from `fn`
 *
 * @description https://www.solidjs.com/docs/latest/api#batch
 */
export declare function batch<T>(fn: Accessor<T>): T
/**
 * Ignores tracking context inside its scope
 * @param fn the scope that is out of the tracking context
 * @returns the return value of `fn`
 *
 * @description https://www.solidjs.com/docs/latest/api#untrack
 */
export declare function untrack<T>(fn: Accessor<T>): T
/** @deprecated */
export type ReturnTypes<T> = T extends readonly Accessor<unknown>[]
  ? {
      [K in keyof T]: T[K] extends Accessor<infer I> ? I : never
    }
  : T extends Accessor<infer I>
  ? I
  : never
export type AccessorArray<T> = [
  ...Extract<
    {
      [K in keyof T]: Accessor<T[K]>
    },
    readonly unknown[]
  >
]
export type OnEffectFunction<S, Prev, Next extends Prev = Prev> = (
  input: S,
  prevInput: S | undefined,
  prev: Prev,
) => Next
export interface OnOptions {
  defer?: boolean
}
/**
 * on - make dependencies of a computation explicit
 * ```typescript
 * export function on<S, U>(
 *   deps: Accessor<S> | AccessorArray<S>,
 *   fn: (input: S, prevInput: S | undefined, prevValue: U | undefined) => U,
 *   options?: { defer?: boolean } = {}
 * ): (prevValue: U | undefined) => U;
 * ```
 * @param deps list of reactive dependencies or a single reactive dependency
 * @param fn computation on input; the current previous content(s) of input and the previous value are given as arguments and it returns a new value
 * @param options optional, allows deferred computation until at the end of the next change
 * @returns an effect function that is passed into createEffect. For example:
 *
 * ```typescript
 * createEffect(on(a, (v) => console.log(v, b())));
 *
 * // is equivalent to:
 * createEffect(() => {
 *   const v = a();
 *   untrack(() => console.log(v, b()));
 * });
 * ```
 *
 * @description https://www.solidjs.com/docs/latest/api#on
 */
export declare function on<S, Next extends Prev, Prev = Next>(
  deps: AccessorArray<S> | Accessor<S>,
  fn: OnEffectFunction<S, undefined | NoInfer<Prev>, Next>,
  options?: OnOptions & {
    defer?: false
  },
): EffectFunction<undefined | NoInfer<Next>, NoInfer<Next>>
export declare function on<S, Next extends Prev, Prev = Next>(
  deps: AccessorArray<S> | Accessor<S>,
  fn: OnEffectFunction<S, undefined | NoInfer<Prev>, Next>,
  options: OnOptions & {
    defer: true
  },
): EffectFunction<undefined | NoInfer<Next>>
/**
 * onMount - run an effect only after initial render on mount
 * @param fn an effect that should run only once on mount
 *
 * @description https://www.solidjs.com/docs/latest/api#onmount
 */
export declare function onMount(fn: () => void): void
/**
 * onCleanup - run an effect once before the reactive scope is disposed
 * @param fn an effect that should run only once on cleanup
 *
 * @returns the same {@link fn} function that was passed in
 *
 * @description https://www.solidjs.com/docs/latest/api#oncleanup
 */
export declare function onCleanup<T extends () => any>(fn: T): T
/**
 * catchError - run an effect whenever an error is thrown within the context of the child scopes
 * @param fn boundary for the error
 * @param handler an error handler that receives the error
 *
 * * If the error is thrown again inside the error handler, it will trigger the next available parent handler
 *
 * @description https://www.solidjs.com/docs/latest/api#catcherror
 */
export declare function catchError<T>(fn: () => T, handler: (err: Error) => void): T | undefined
/**
 * @deprecated since version 1.7.0 and will be removed in next major - use catchError instead
 * onError - run an effect whenever an error is thrown within the context of the child scopes
 * @param fn an error handler that receives the error
 *
 * * If the error is thrown again inside the error handler, it will trigger the next available parent handler
 *
 * @description https://www.solidjs.com/docs/latest/api#onerror
 */
export declare function onError(fn: (err: Error) => void): void
export declare function getListener(): Computation<any, any> | null
export declare function getOwner(): Owner | null
export declare function runWithOwner<T>(o: typeof Owner, fn: () => T): T | undefined
export declare function enableScheduling(scheduler?: typeof requestCallback): void
/**
 * ```typescript
 * export function startTransition(fn: () => void) => Promise<void>
 *
 * @description https://www.solidjs.com/docs/latest/api#usetransition
 */
export declare function startTransition(fn: () => unknown): Promise<void>
type Transition = [Accessor<boolean>, (fn: () => void) => Promise<void>]
/**
 * ```typescript
 * export function useTransition(): [
 *   () => boolean,
 *   (fn: () => void, cb?: () => void) => void
 * ];
 * @returns a tuple; first value is an accessor if the transition is pending and a callback to start the transition
 *
 * @description https://www.solidjs.com/docs/latest/api#usetransition
 */
export declare function useTransition(): Transition
declare function registerGraph(value: SourceMapValue): void
type ContextProviderComponent<T> = FlowComponent<{
  value: T
}>
export interface Context<T> {
  id: symbol
  Provider: ContextProviderComponent<T>
  defaultValue: T
}
/**
 * Creates a Context to handle a state scoped for the children of a component
 * ```typescript
 * interface Context<T> {
 *   id: symbol;
 *   Provider: FlowComponent<{ value: T }>;
 *   defaultValue: T;
 * }
 * export function createContext<T>(
 *   defaultValue?: T,
 *   options?: { name?: string }
 * ): Context<T | undefined>;
 * ```
 * @param defaultValue optional default to inject into context
 * @param options allows to set a name in dev mode for debugging purposes
 * @returns The context that contains the Provider Component and that can be used with `useContext`
 *
 * @description https://www.solidjs.com/docs/latest/api#createcontext
 */
export declare function createContext<T>(defaultValue?: undefined, options?: EffectOptions): Context<T | undefined>
export declare function createContext<T>(defaultValue: T, options?: EffectOptions): Context<T>
/**
 * use a context to receive a scoped state from a parent's Context.Provider
 *
 * @param context Context object made by `createContext`
 * @returns the current or `defaultValue`, if present
 *
 * @description https://www.solidjs.com/docs/latest/api#usecontext
 */
export declare function useContext<T>(context: Context<T>): T
type ResolvedJSXElement = Exclude<JSX.Element, JSX.ArrayElement>
type ResolvedChildren = ResolvedJSXElement | ResolvedJSXElement[]
export type ChildrenReturn = Accessor<ResolvedChildren> & {
  toArray: () => ResolvedJSXElement[]
}
/**
 * Resolves child elements to help interact with children
 *
 * @param fn an accessor for the children
 * @returns a accessor of the same children, but resolved
 *
 * @description https://www.solidjs.com/docs/latest/api#children
 */
export declare function children(fn: Accessor<JSX.Element>): ChildrenReturn
type SuspenseContextType = {
  increment?: () => void
  decrement?: () => void
  inFallback?: () => boolean
  effects?: Computation<any>[]
  resolved?: boolean
}
export declare function enableExternalSource(factory: ExternalSourceFactory): void
declare function writeSignal(node: SignalState<any> | Memo<any>, value: any, isComp?: boolean): any
interface Observable<T> {
  subscribe(observer: ObservableObserver<T>): {
    unsubscribe(): void
  }
  [Symbol.observable](): Observable<T>
}
export type ObservableObserver<T> =
  | ((v: T) => void)
  | {
      next?: (v: T) => void
      error?: (v: any) => void
      complete?: (v: boolean) => void
    }
/**
 * creates a simple observable from a signal's accessor to be used with the `from` operator of observable libraries like e.g. rxjs
 * ```typescript
 * import { from } from "rxjs";
 * const [s, set] = createSignal(0);
 * const obsv$ = from(observable(s));
 * obsv$.subscribe((v) => console.log(v));
 * ```
 * description https://www.solidjs.com/docs/latest/api#observable
 */
export declare function observable<T>(input: Accessor<T>): Observable<T>
export declare function from<T>(
  producer:
    | ((setter: Setter<T | undefined>) => () => void)
    | {
        subscribe: (fn: (v: T) => void) =>
          | (() => void)
          | {
              unsubscribe: () => void
            }
      },
): Accessor<T | undefined>
/**
The MIT License (MIT)

Copyright (c) 2017 Adam Haile

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
/**
 * reactively transforms an array with a callback function - underlying helper for the `<For>` control flow
 *
 * similar to `Array.prototype.map`, but gets the index as accessor, transforms only values that changed and returns an accessor and reactively tracks changes to the list.
 *
 * @description https://www.solidjs.com/docs/latest/api#maparray
 */
export declare function mapArray<T, U>(
  list: Accessor<readonly T[] | undefined | null | false>,
  mapFn: (v: T, i: Accessor<number>) => U,
  options?: {
    fallback?: Accessor<any>
  },
): () => U[]
/**
 * reactively maps arrays by index instead of value - underlying helper for the `<Index>` control flow
 *
 * similar to `Array.prototype.map`, but gets the value as an accessor, transforms only changed items of the original arrays anew and returns an accessor.
 *
 * @description https://www.solidjs.com/docs/latest/api#indexarray
 */
export declare function indexArray<T, U>(
  list: Accessor<readonly T[] | undefined | null | false>,
  mapFn: (v: Accessor<T>, i: number) => U,
  options?: {
    fallback?: Accessor<any>
  },
): () => U[]
export type JSXElement = JSX.Element
export declare const DEV:
  | {
      readonly hooks: {
        afterUpdate: (() => void) | null
        afterCreateOwner: ((owner: Owner) => void) | null
      }
      readonly writeSignal: typeof writeSignal
      readonly registerGraph: typeof registerGraph
    }
  | undefined
export declare function createSolidComponent<T extends (...args: any[]) => any>(
  Component: T,
  exportInfo?: ExportInfo,
): SolidComponent<T>
export declare function useStylesheet(stylesheet: CSSModule): {
  loaded: Accessor<boolean>
}
interface UseCSSProps {
  css: CSSModule
  children: Parameters<typeof Show>[0]['children']
}
export declare function UseCSS(props: UseCSSProps): JSX.Element
export declare function jsx(...args: any[]): any
declare namespace JSXAlias {
  export import _JSX = JSX
}
export declare namespace jsx {
  export import JSX = JSXAlias._JSX
}

export {}
