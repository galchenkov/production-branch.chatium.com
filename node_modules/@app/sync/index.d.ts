import { UgcSyncLockOptions } from 'services/ugc-runner/runtime/runtimeTypes'

export declare function runWithExclusiveLock<T>(ctx: RichUgcCtx, lockId: string | string[], fn: LockCb<T>): Promise<T>
export declare function runWithExclusiveLock<T>(
  ctx: RichUgcCtx,
  lockId: string | string[],
  timeoutMs: number,
  fn: LockCb<T>,
): Promise<T>
export declare function runWithExclusiveLock<T>(
  ctx: RichUgcCtx,
  lockId: string | string[],
  options: UgcSyncLockOptions,
  fn: LockCb<T>,
): Promise<T>
export declare function tryRunWithExclusiveLock<T>(
  ctx: RichUgcCtx,
  lockId: string | string[],
  fn: LockCb<T>,
): Promise<RunWithExclusiveLockResult<T>>
export declare function tryRunWithExclusiveLock<T>(
  ctx: RichUgcCtx,
  lockId: string | string[],
  timeoutMs: number,
  fn: LockCb<T>,
): Promise<RunWithExclusiveLockResult<T>>
export declare function tryRunWithExclusiveLock<T>(
  ctx: RichUgcCtx,
  lockId: string | string[],
  options: UgcSyncLockOptions,
  fn: LockCb<T>,
): Promise<RunWithExclusiveLockResult<T>>
export declare class LockAcquisitionError extends Error {
  constructor(lockId: string | string[], timeoutMs: number)
}
declare type RunWithExclusiveLockResult<T> =
  | {
      success: true
      result: T
    }
  | {
      success: false
      timeoutMs: number
    }
declare type LockCb<T> = (ctx: RichUgcCtx, lockInfo: LockInfo) => T | Promise<T>
declare type LockInfo = {
  wasWaiting: boolean
}

export {}
