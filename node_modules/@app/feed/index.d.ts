import { Static } from '@sinclair/typebox'
import * as hs from 'core/heap/v2/heapSchemaTypes'
import {
  HeapObjectBaseSchema,
  HeapObjectBaseV2,
  HeapSchema,
  HsFilterInput,
  HsFilterInputObject,
  HsObject,
  HsProperties,
  HsProperty,
} from 'core/heap/v2/heapSchemaTypes'
import { HeapOrderByV2, HeapRecordFilter, HeapRecordSelectOptions } from 'core/heap/v2/types'
import { ChatMessage, ChatProps } from 'lib/chatium-json'
import { Icon, StatusIcon } from 'lib/chatium-json/v1'
import { AudioBlock, ImageBlock, PlainIconName, VideoBlock } from 'lib/chatium-json/v2'
import {
  CreateFeedMessageOptions,
  FeedChangesJson,
  FeedMessagesJson,
  MessageData,
  UgcCreateFeedProps,
  UgcUpdateFeedProps,
} from 'services/ugc-runner/runtime/runtimeTypes'
import { UgcSmartUser } from 'services/ugc-runner/runtime/user/UgcSmartUser'

declare type OrderByDefinition<T> = SingleOrderBy<T> | Array<SingleOrderBy<T>>
declare type SortDirection =
  | 'asc'
  | 'desc'
  | 'asc nulls first'
  | 'asc nulls last'
  | 'desc nulls first'
  | 'desc nulls last'
declare type ValueTypeHint = '$string' | '$number' | '$date' | '$boolean'
declare type SingleOrderBy<T> = (keyof T & string) | ObjectOrderVariant<T>
declare type ObjectOrderVariant<T> = {
  [Field in keyof T & string]?: SingleOrderByValue<T[Field]>
}
declare type SingleOrderByValue<V> = V extends object
  ? ObjectOrderVariant<V>
  : SortDirection | ValueTypeHint | [ValueTypeHint, SortDirection]
declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
declare type JSONObject = {
  [key: string]: JSONValue
}
declare type JSONInputValue = string | number | boolean | null | JSONInputValue[] | JSONInputObject | undefined
declare type JSONInputObject = {
  [key: string]: JSONInputValue
}
declare type PublicFieldsOfClass<T> = {
  [Property in keyof T]: T[Property]
}
declare class MessageHelperClass {
  id: string
  account_id: number
  feed_id: number
  external_id: string | null
  origin_id: string | null
  origin_type: string | null
  type: MessageType
  text: string | null
  as_feed: boolean
  reply_to: string | null
  files: MessageFile[] | null
  sticker: MessageSticker | null
  data:
    | JSONInputObject
    | {
        blocks: JSONValue[]
      }
    | ChangeMessageData
    | null
  reactions: Record<
    string,
    Array<{
      userId: HeapId
    }>
  > | null
  created_at: Date
  updated_at: Date
  created_by: string
  updated_by: string
  is_deleted: boolean
  constructor(
    id: string,
    account_id: number,
    feed_id: number,
    external_id: string | null,
    origin_id: string | null,
    origin_type: string | null,
    type: MessageType,
    text: string | null,
    as_feed: boolean,
    reply_to: string | null,
    files: MessageFile[] | null,
    sticker: MessageSticker | null,
    data:
      | JSONInputObject
      | {
          blocks: JSONValue[]
        }
      | ChangeMessageData
      | null,
    reactions: Record<
      string,
      Array<{
        userId: HeapId
      }>
    > | null,
    created_at: Date,
    updated_at: Date,
    created_by: string,
    updated_by: string,
    is_deleted: boolean,
  )
}
declare type Message = PublicFieldsOfClass<MessageHelperClass>
declare type ChangeMessageData = {
  action: string
  messageId: string
}
declare type MessageType = 'Message' | 'System' | 'Change' | 'Blocks'
declare const MessageType: {
  readonly Message: MessageType
  readonly System: MessageType
  readonly Change: MessageType
  readonly Blocks: MessageType
}
declare type MessageFile = {
  url: string
  hash: string
  meta: {
    mime: string
    size: number
    width?: number
    height?: number
    duration?: number
    name?: string
    extra?: string
  }
}
declare type MessageSticker = {
  url: string
  previewUrl?: string
  emoji?: string[]
}
declare type Lang = string
interface LocationCtx {
  location: Location | undefined
}
interface Location {
  country: string
  region: string
  timeZone: string
  city: string
  coordinates: Coordinates
}
interface Coordinates {
  latitude: number
  longitude: number
}
declare type WebOrUgcHook<P, R> = string & {
  p: P
  r: R
}
interface HeapLink<_HD extends HeapData> {
  type: HeapObjectType
  id: HeapId
}
declare class HeapRecordHelperClass {
  id: HeapId
  idx: number
  account_id: number
  type: HeapObjectType
  data: object | null
  created_by: HeapId | null | undefined
  created_at: Date
  updated_by: HeapId | null | undefined
  updated_at: Date
  constructor(
    id: HeapId,
    idx: number,
    account_id: number,
    type: HeapObjectType,
    data: object | null,
    created_by: HeapId | null | undefined,
    created_at: Date,
    updated_by: HeapId | null | undefined,
    updated_at: Date,
  )
}
declare type HeapRecord = PublicFieldsOfClass<HeapRecordHelperClass>
interface HeapObjectBase {
  id: HeapId
  idx: number
  heapType: HeapObjectType
  createdAt: Date
  updatedAt: Date
  createdBy: HeapLink<UserData> | null
  updatedBy: HeapLink<UserData> | null
}
declare type HeapData = {
  '~~heap~data~tag~~': never
}
declare type EraseHD<HD extends HeapData> = Omit<HD, keyof HeapData>
declare type RefLink<HD extends HeapData> = HD & {
  '~~ref~link~tag~~': never
}
declare type GenericLink = {
  '~~generic~link~tag~~': never
}
declare type HeapObject<HD extends HeapData> = HeapObjectBase & MapHeapLinks<HD>
declare type MapHeapLinks<HD extends HeapData> = {
  [K in keyof EraseHD<HD>]: LinksMap<HD[K]>
}
declare type LinksMap<T> = T extends null
  ? null
  : T extends GenericLink
  ? HeapId
  : T extends RefLink<HeapData>
  ? HeapLink<T>
  : T
declare type HeapId = string
declare type HeapObjectType = string
declare type HashMediaType = 'file' | 'video' | 'image' | 'audio'
interface FileClass {
  new (hash: string): IStorageFile
}
interface IStorageFile {
  hash: string
  type: HashMediaType
  downloadUrl: string
  toJSON(): string
}
interface IStorageFileWithSizes extends IStorageFile {
  width: number
  widthMaybe: number | undefined
  height: number
  heightMaybe: number | undefined
  sizes: {
    width: number
    height: number
  }
  sizesMaybe:
    | {
        width: number
        height: number
      }
    | undefined
}
interface ImageFileClass {
  new (hash: string): IStorageImageFile
}
interface IStorageImageFile extends IStorageFileWithSizes {
  getThumbnailUrl(width?: number, height?: number): string
  getThumbnailSrc(width?: number, height?: number): ImageBlock['src']
}
interface VideoFileClass {
  new (hash: string): IStorageVideoFile
}
interface IStorageVideoFile extends IStorageFileWithSizes {
  duration: number
  durationMaybe: number | undefined
  videoSrc: Promise<VideoBlock['src']>
  status: Promise<'done' | 'processing' | 'error'>
  progress: Promise<number>
  getThumbnailUrl(width?: number, height?: number, offsetSeconds?: 'auto' | number): string
  getThumbnailSrc(width?: number, height?: number, offsetSeconds?: 'auto' | number): ImageBlock['src']
}
interface AudioFileClass {
  new (hash: string): IStorageAudioFile
}
interface IStorageAudioFile extends IStorageFile {
  duration: number
  durationMaybe: number | undefined
  audioSrc: AudioBlock['src']
}
interface HeapRuntimeClasses {
  RefLinkClass: RefLinkClass
  GenericLinkClass: GenericLinkClass
  FileClass: FileClass
  ImageFileClass: ImageFileClass
  VideoFileClass: VideoFileClass
  AudioFileClass: AudioFileClass
}
declare type HeapLinkInfo =
  | {
      refType: 'RefLink'
      fieldPath: string
      targetType: HeapObjectType
      id: HeapId
    }
  | {
      refType: 'GenericLink'
      fieldPath: string
      id: HeapId
    }
  | {
      fieldPath: string
      id: null
    }
interface HeapTableRecordApi<ReadCtx, WriteCtx> {
  findHeapRecordByTypeAndId(ctx: ReadCtx, type: HeapObjectType, id: HeapId): Promise<HeapRecord | null>
  findHeapRecordsByTypeAndIds(ctx: ReadCtx, type: HeapObjectType, ids: HeapId[]): Promise<HeapRecord[]>
  queryHeapRecords<HSP extends HsProperties>(
    ctx: ReadCtx,
    type: HeapObjectType,
    options?: HeapRecordSelectOptions<HSP>,
  ): Promise<HeapRecord[]>
  queryHeapRecordIds<HSP extends HsProperties>(
    ctx: ReadCtx,
    type: HeapObjectType,
    options?: HeapRecordSelectOptions<HSP>,
  ): Promise<HeapId[]>
  countHeapRecords<HSP extends HsProperties>(
    ctx: ReadCtx,
    type: HeapObjectType,
    filter?: HeapRecordFilter<HSP> | null,
  ): Promise<number>
  createHeapRecord<HSP extends HsProperties>(
    ctx: WriteCtx,
    type: HeapObjectType,
    linkInfo: HeapLinkInfo[],
    data: Static<HsObject<HSP>> & {
      id?: HeapId
    },
  ): Promise<HeapRecord>
  updateHeapRecordMaybe<HSP extends HsProperties>(
    ctx: WriteCtx,
    type: HeapObjectType,
    linkInfo: HeapLinkInfo[],
    patch: Partial<Static<HsObject<HSP>>> & {
      id: HeapId
    },
    optionalFieldsToClear?: Array<keyof HSP>,
  ): Promise<HeapRecord | null>
  createOrUpdateHeapRecordBy<HSP extends HsProperties, K extends HsProperty<HSP>>(
    ctx: WriteCtx,
    type: HeapObjectType,
    uniqKey: K,
    linkInfo: HeapLinkInfo[],
    data: Static<HsObject<HSP>>,
  ): Promise<HeapRecord>
  deleteHeapRecord(ctx: WriteCtx, type: HeapObjectType, id: HeapId, hardDelete: boolean): Promise<HeapRecord | null>
  createOrUpdateSingleton<HSP extends HsProperties>(
    ctx: WriteCtx,
    type: HeapObjectType,
    createLinkInfo: HeapLinkInfo[],
    createData: Static<HsObject<HSP>>,
    updateLinkInfo: HeapLinkInfo[],
    updatePatch: Partial<Static<HsObject<HSP>>>,
    optionalFieldsToClear?: Array<keyof HSP>,
  ): Promise<HeapRecord>
}
declare type HsSelectOptions<HSP extends HsProperties> = {
  where?: HsFilter<HSP> | null | undefined
  limit?: number | null | undefined
  offset?: number | null | undefined
  order?: HeapOrderByV2<HSP> | null | undefined
}
declare type HsFilter<HSP extends HsProperties> =
  | HsFilterInputObject<HSP & Pick<HeapObjectBaseSchema, 'id' | 'createdAt' | 'updatedAt' | 'createdBy' | 'updatedBy'>>
  | HsTopAndOperator<HSP>
  | HsTopOrOperator<HSP>
  | HsTopNotOperator<HSP>
  | HsNoopOperator
declare type HsTopAndOperator<HSP extends HsProperties> = {
  $and: Array<HsFilter<HSP>>
}
declare type HsTopOrOperator<HSP extends HsProperties> = {
  $or: Array<HsFilter<HSP>>
}
declare type HsTopNotOperator<HSP extends HsProperties> = {
  $not: HsFilter<HSP>
}
declare type HsFilterRighthand<HS extends HeapSchema> = null | HsFilterRighthandNonNull<HS>
declare type HsFilterRighthandNonNull<HS extends HeapSchema> = HsFilterInput<HS> | CommonOperator<HS>
declare type CommonOperator<HS extends HeapSchema> =
  | HsAndOperator<HS>
  | HsNoopOperator
  | HsNotOperator<HS>
  | HsOrOperator<HS>
declare type HsNoopOperator = {
  $noop: true | 1 | '1' | 'true' | 'yes'
}
declare type HsNotOperator<HS extends HeapSchema> = {
  $not: HsFilterRighthand<HS>
}
declare type HsAndOperator<HS extends HeapSchema> = {
  $and: Array<HsFilterRighthand<HS>>
}
declare type HsOrOperator<HS extends HeapSchema> = {
  $or: Array<HsFilterRighthand<HS>>
}
declare type HsCompareOperators<V> = HsGtOperator<V> | HsGteOperator<V> | HsLtOperator<V> | HsLteOperator<V>
declare type HsGtOperator<V> = {
  $gt: V
}
declare type HsGteOperator<V> = {
  $gte: V
}
declare type HsLtOperator<V> = {
  $lt: V
}
declare type HsLteOperator<V> = {
  $lte: V
}
declare type HsIlikeOperator<V> = V extends string
  ? {
      $ilike: string
    }
  : never
declare abstract class ReadOnlyHeapTableRepo<HSP extends hs.HsProperties, ReadCtx, WriteCtx = ReadCtx> {
  readonly type: HeapObjectType
  protected readonly tableOptions?: HeapTableOptions<HSP> | undefined
  readonly schema: hs.HsObject<HSP>
  readonly T: hs.HsFullObjectRuntime<HSP>
  readonly JsonT: hs.HsObjectStatic<HSP>
  readonly PropsT: HSP
  readonly PatchT: Partial<hs.HsUpdateInputObject<HSP>>
  readonly CreateInputT: hs.HsCreateInputObject<HSP> & {
    id?: HeapId
  }
  /**
   * Low-level heap record API differs for core backend and UGC implementations
   * This helps to share a lot of high-level code written in this class for UGC/core implementations of the heap table
   */
  protected abstract recordApi: HeapTableRecordApi<ReadCtx, WriteCtx>
  /**
   * Runtime RefLink instance implementations differ for core backend and UGC in terms of
   *  how they implement .get() method, when only a string type repo is provided.
   *  Global registries of heap-table repos are organized differently
   */
  protected abstract runtimeClasses: HeapRuntimeClasses
  constructor(type: HeapObjectType, fields: hs.HsPropertiesNo$<HSP>, tableOptions?: HeapTableOptions<HSP> | undefined)
  /**
   * Type guard to easily recognize heap objects belonging to this table
   * May be useful in combination with generic links
   */
  isMyRecord(obj: unknown): obj is this['T']
  getById(ctx: ReadCtx, id: HeapId): Promise<this['T']>
  getRecordTitleById(ctx: ReadCtx, id: HeapId): Promise<string>
  /**
   * Generic method to get human-readable title of the record.
   * May be customized by tableOptions.getRecordTitleSync.
   * By default, it tries to use 'title' or 'name' fields, or just '#<id>'.
   */
  getRecordTitle(_ctx: ReadCtx, row: this['T']): Promise<string>
  findById(ctx: ReadCtx, id: HeapId): Promise<this['T'] | null>
  findByIds(ctx: ReadCtx, ids: HeapId[]): Promise<this['T'][]>
  findAll(ctx: ReadCtx, options?: HsSelectOptions<HSP>): Promise<this['T'][]>
  findAllIds(ctx: ReadCtx, options?: HsSelectOptions<HSP>): Promise<HeapId[]>
  findBy(ctx: ReadCtx, filter?: HsFilter<HSP> | null): Promise<this['T'][]>
  findOneBy(ctx: ReadCtx, filter?: HsFilter<HSP> | null): Promise<this['T'] | null>
  countBy(ctx: ReadCtx, filter?: HsFilter<HSP> | null): Promise<number>
  /**
   * Returns a singleton row of this table or a stub record with default values.
   * Treats the whole table as a single-row "singleton".
   * All fields of this table must be Heap.NonRequired, Heap.Nullable or Heap.Optional,
   *  or at least have a "default" option defined.
   */
  getSingleton(ctx: ReadCtx): Promise<this['T']>
  protected getDefaultSingleton(): this['T']
  protected rawToObject: (hr: HeapRecord) => this['T']
  get customMeta(): NonNullable<hs.HsCustomMetaOption['customMeta']>
  /**
   * Augments and converts where and order options according to the schema
   * DRY
   */
  private prepareSelectOptions
}
interface HeapTableOptions<HSP extends hs.HsProperties> extends hs.HsCustomMetaOption {
  getRecordTitleSync?(record: hs.HsFullObjectRuntime<HSP>): string | null | undefined
}
declare abstract class BaseRefLink<T extends object, ReadCtx = unknown> {
  /**
   * The type of target record table, with account suffix, but **WITHOUT plugin-app prefix**.
   *
   * This is technical type, like written to heap-table "type" field,
   *  don't mix up with developer-defined table name provided to Heap.Table.
   * For system ref-links this also contains heap-type ('core.User' instead of 'users').
   */
  readonly type: HeapObjectType
  readonly id: HeapId
  /** Repository (table) that owns the row of this RefLink instance */
  readonly myRepo: ReadOnlyHeapTableRepo<HsProperties, unknown>
  /**
   * Repository (table) that owns the row of the target record.
   * Can be passed as table name or as repository instance.
   * When available, used in 'get' method implementation.
   */
  protected targetRepoOrTableName?: string | ReadOnlyHeapTableRepo<HsProperties, unknown, unknown> | undefined
  constructor(
    /**
     * The type of target record table, with account suffix, but **WITHOUT plugin-app prefix**.
     *
     * This is technical type, like written to heap-table "type" field,
     *  don't mix up with developer-defined table name provided to Heap.Table.
     * For system ref-links this also contains heap-type ('core.User' instead of 'users').
     */
    type: HeapObjectType,
    id: HeapId,
    /** Repository (table) that owns the row of this RefLink instance */
    myRepo: ReadOnlyHeapTableRepo<HsProperties, unknown>,
    /**
     * Repository (table) that owns the row of the target record.
     * Can be passed as table name or as repository instance.
     * When available, used in 'get' method implementation.
     */
    targetRepoOrTableName?: string | ReadOnlyHeapTableRepo<HsProperties, unknown, unknown> | undefined,
  )
  toJSON(): string
  toString(): string
  get<R = T>(ctx: ReadCtx): Promise<R>
  getTitle(ctx: ReadCtx): Promise<string>
  abstract getTargetTableRepo<HSP extends HsProperties = HsProperties>(
    ctx: ReadCtx,
  ): Promise<ReadOnlyHeapTableRepo<HSP, ReadCtx>>
}
interface RefLinkClass {
  new (
    type: HeapObjectType,
    id: HeapId,
    myRepo: ReadOnlyHeapTableRepo<HsProperties, unknown>,
    targetRepoOrTableName?: ReadOnlyHeapTableRepo<HsProperties, unknown> | string,
  ): BaseRefLink<AnyObject>
}
declare abstract class BaseGenericLink<ReadCtx = unknown> {
  readonly type: HeapObjectType
  readonly id: HeapId
  readonly myRepo: ReadOnlyHeapTableRepo<HsProperties, unknown>
  constructor(type: HeapObjectType, id: HeapId, myRepo: ReadOnlyHeapTableRepo<HsProperties, unknown>)
  get<R = HeapObjectBase>(ctx: ReadCtx): Promise<R>
  getTitle(ctx: ReadCtx): Promise<string>
  toJSON(): GenericLinkJson
  toString(): string
  abstract getTargetTableRepo<HSP extends HsProperties = HsProperties>(
    ctx: ReadCtx,
  ): Promise<ReadOnlyHeapTableRepo<HSP, ReadCtx>>
}
interface GenericLinkClass {
  new (type: HeapObjectType, id: HeapId, myRepo: ReadOnlyHeapTableRepo<HsProperties, unknown>): BaseGenericLink
}
declare type GenericLinkJson = [HeapObjectType, HeapId]
declare enum UserRole {
  Admin = 'Admin',
  Staff = 'Staff',
  Support = 'Support',
  ActiveSupport = 'ActiveSupport',
  Developer = 'Developer',
  BetaTester = 'BetaTester',
  User = 'User',
}
declare enum UserStatus {
  Imported = 'Imported',
  Joined = 'Joined',
  AsSupport = 'AsSupport',
  Left = 'Left',
}
declare type PrimaryIdentities = {
  phone?: string
  email?: string
  hasPassword?: boolean
}
declare abstract class SmartUser<Ctx> {
  private ctx
  private coreUser
  private extendedInfo?
  private primaryIdentities?
  protected abstract userApi: SmartUserApi<Ctx>
  protected abstract fileServiceDirectHost: string
  protected abstract fileServiceCdnHost: string
  constructor(
    ctx: LocationCtx,
    coreUser: UgcCtxUser2,
    extendedInfo?: ExtendedUserInfo | undefined,
    primaryIdentities?: PrimaryIdentities | undefined,
  )
  get id(): HeapId
  get type(): User2['type']
  get displayName(): string
  get confirmedPhone(): string | undefined
  get confirmedEmail(): string | undefined
  get accountRole(): AccountRole
  get username(): string | undefined
  get firstName(): string | undefined
  get middleName(): string | undefined
  get lastName(): string | undefined
  get fullName(): string
  get gender(): UserGender | undefined
  get birthdayDate(): Date | undefined
  get birthday(): string | undefined
  get passwordSalt(): string
  get hasPassword(): boolean
  updateAccountRole(ctx: Ctx, newRole: AccountRole): Promise<void>
  updateUsername(ctx: Ctx, username: string): Promise<void>
  updatePassword(ctx: Ctx, password: string): Promise<void>
  updateLang(ctx: Ctx, lang: Lang | null): Promise<void>
  updateExtendedInfo(ctx: Ctx, info: UpdateExtendedUserInfoRaw): Promise<void>
  get smartIconProps(): {
    url?: string
    name?: PlainIconName
    text?: string
  }
  get hasImage(): boolean
  get imageUrl(): string | undefined
  /**
   * Effective image hash XOR url
   * Mainly for copying image data from one user to another
   */
  get rawImageInfo(): {
    imageHash?: string
    imageUrl?: string
  }
  getImageThumbnailUrl(size?: number): string | undefined
  is(role: Exclude<AccountRole, 'None'>): boolean
  get lang(): Lang | undefined
  toJSON(): JSONInputObject
  serialize(): SerializedSmartUser | UgcCtxUser1
  getProfile<T extends JSONInputObject>(): T | undefined
  private get fsHost()
}
declare type SerializedSmartUser = [UgcCtxUser2, ExtendedUserInfo | undefined, PrimaryIdentities | undefined]
interface SmartUserApi<Ctx> {
  updateAccountRole(ctx: Ctx, userId: HeapId, newRole: AccountRole): Promise<AccountRole>
  updateUsername(ctx: Ctx, userId: HeapId, username: string): Promise<string>
  updateExtendedInfo(
    ctx: Ctx,
    userId: HeapId,
    info: UpdateExtendedUserInfo,
  ): Promise<[UgcCtxUser2, ExtendedUserInfo | undefined]>
  updatePassword(ctx: Ctx, userId: HeapId, password: string): Promise<void>
  updateLang(ctx: Ctx, userId: HeapId, lang: Lang | null): Promise<string | undefined>
}
declare type ExtendedUserInfo = ExtendedUserFields & {
  displayName?: string
  profile?: JSONInputObject
}
declare type UpdateExtendedUserInfo = {
  firstName?: string | null
  lastName?: string | null
  middleName?: string | null
  gender?: UserGender | null
  birthday?: string | null
  imageHash?: string | null
  imageUrl?: string | null
}
declare type UpdateExtendedUserInfoRaw = Pick<
  UpdateExtendedUserInfo,
  'firstName' | 'middleName' | 'lastName' | 'gender' | 'imageHash' | 'imageUrl'
> & {
  birthday?: string | Date | null
}
declare type UserGender = 'male' | 'female' | 'other'
interface PurchasedProducts {
  [productName: string]: string | true | undefined
}
interface UserData extends HeapData {
  authId: number
  roles: UserRole[]
  status: UserStatus
  expiresAt: string | null
  avatar: Icon
  firstName: string | null
  lastName: string | null
  phone: string | null
  email: string | null
  platforms: EnvPlatform[]
  purchasedProducts: PurchasedProducts
}
declare type User1 = HeapObject<UserData>
declare type UgcSystemHeapTableName = 'users'
declare class ParticipantHelperClass {
  id: string
  account_id: number
  feed_id: number
  user_id: HeapId
  read_at: Date | null
  read_message_id: string | null
  role: string
  muted: boolean
  inbox_disabled: boolean
  data: JSONInputObject | null
  created_at: Date
  updated_at: Date
  created_by: string
  updated_by: string
  is_deleted: boolean
  hooks: ParticipantHooks | null
  inbox_extra_data: JSONObject | null
  constructor(
    id: string,
    account_id: number,
    feed_id: number,
    user_id: HeapId,
    read_at: Date | null,
    read_message_id: string | null,
    role: string,
    muted: boolean,
    inbox_disabled: boolean,
    data: JSONInputObject | null,
    created_at: Date,
    updated_at: Date,
    created_by: string,
    updated_by: string,
    is_deleted: boolean,
    hooks: ParticipantHooks | null,
    inbox_extra_data: JSONObject | null,
  )
}
declare type Participant = PublicFieldsOfClass<ParticipantHelperClass>
interface ParticipantHooks {}
declare type UgcParticipant = Pick<Participant, 'id' | 'muted'> & {
  userId: Participant['user_id']
  createdAt: string
  updatedAt: string
  inboxDisabled: Participant['inbox_disabled']
  inboxExtraData: Participant['inbox_extra_data']
}
declare class FeedHelperClass {
  id: number
  uid: string
  account_id: number
  db_shard_id: string
  db_shard_move_state: DbShardMoveState | null
  model_type: string
  /**
   * For old entity-linked feeds - ID of the Heap object matching the entity
   * For new decoupled feeds this field should be renamed to inbox_subject_id -
   *  unique string which helps to detect which inbox item should be updated when the feed is updated
   */
  model_id: string
  title: string | null
  icon: Icon | null
  url: string | null
  status: string | null
  status_icon: StatusIcon | null
  is_actual: boolean
  pinned_message_id: string | null
  last_message_id: string | null
  owner_user_id: string | null
  created_at: Date
  updated_at: Date
  data: JSONObject | null
  hooks: FeedHooks | null
  inbox_extra_data: JSONObject | null
  constructor(
    id: number, // Идентификатор для связи
    uid: string, // Идентификатор для пользователя
    account_id: number,
    db_shard_id: string,
    db_shard_move_state: DbShardMoveState | null,
    model_type: string, // Тим подели кому принадлежит сообщение
    /**
     * For old entity-linked feeds - ID of the Heap object matching the entity
     * For new decoupled feeds this field should be renamed to inbox_subject_id -
     *  unique string which helps to detect which inbox item should be updated when the feed is updated
     */
    model_id: string,
    title: string | null,
    icon: Icon | null,
    url: string | null,
    status: string | null,
    status_icon: StatusIcon | null,
    is_actual: boolean,
    pinned_message_id: string | null, // Прикрепленное сообщение
    last_message_id: string | null, // Последнее сообщение
    owner_user_id: string | null, // Сделано для поиска фида по модели, принадлежащего конкретному юзеру
    created_at: Date,
    updated_at: Date,
    data: JSONObject | null,
    hooks: FeedHooks | null,
    inbox_extra_data: JSONObject | null,
  )
}
declare type Feed = PublicFieldsOfClass<FeedHelperClass>
interface FeedHooks {
  getInboxInfo?: WebOrUgcHook<GetInboxInfoHookParams, InboxInfo>
  getParticipantInboxInfo?: WebOrUgcHook<GetParticipantInboxInfoHookParams, InboxInfo>
}
export declare type GetInboxInfoHookParams = {
  feed: InboxInfoHookFeedInfo
  lastMessage: InboxInfoHookMessageInfo | null
  event: 'messagePosted' | 'participantAdded' | 'participantRemove' | 'markAsRead'
}
export declare type GetParticipantInboxInfoHookParams = GetInboxInfoHookParams & {
  participant: UgcParticipant
}
declare type InboxInfoHookFeedInfo = Pick<UgcFeed, 'id' | 'inboxExtraData'>
declare type InboxInfoHookMessageInfo = Pick<
  Message,
  'id' | 'type' | 'text' | 'as_feed' | 'reply_to' | 'files' | 'data' | 'created_by'
>
interface InboxInfo {
  title?: string
  description?: string
  icon?: Icon
  badge?: number
  subjectId?: HeapId
  url?: string
  updatedAt?: Date
  status?: StatusIcon
  data?: JSONObject | null
}
interface DbShardMoveState {
  status: 'PrimaryCopy' | 'Switch' | 'SecondaryCopy' | 'CleanSrcData'
  srcShardId: string
  dstShardId: string
  startTimestamp: number
}
declare type UgcFeed = Pick<Feed, 'title' | 'hooks'> & {
  id: Feed['uid']
  pinnedMessageId: Feed['pinned_message_id']
  lastMessageId: Feed['last_message_id']
  createdAt: Feed['created_at']
  updatedAt: Feed['updated_at']
  inboxSubjectId: Feed['model_id']
  inboxUrl: Feed['url']
  inboxExtraData: Feed['inbox_extra_data']
}
declare type User2 = HeapObjectBaseV2 & {
  type: 'Anonymous' | 'Real' | 'Bot'
  username?: string
  lang?: Lang
  timeZone?: string
  accountRole: AccountRole
  isBlocked: boolean
  knownChildAccounts?: number[]
} & ExtendedUserFields
declare type ExtendedUserFields = {
  firstName?: string
  lastName?: string
  middleName?: string
  gender?: UserGender
  birthday?: string
  imageHash?: string
  imageUrl?: string
}
declare type AccountRole = typeof validAccountRoles[number]
declare const validAccountRoles: readonly ['None', 'Staff', 'Admin', 'Developer', 'Owner']
declare const EnvPlatform: {
  readonly iOS: 'iOS'
  readonly Android: 'Android'
  readonly Web: 'Web'
  readonly Job: 'Job'
}
declare type EnvPlatform = keyof typeof EnvPlatform
declare type UgcCtxUser1 = Pick<
  User1,
  'id' | 'firstName' | 'lastName' | 'roles' | 'avatar' | 'purchasedProducts' | 'phone' | 'email'
>
declare type UgcCtxUser2 = Pick<
  User2,
  | 'id'
  | 'type'
  | 'accountRole'
  | 'username'
  | 'firstName'
  | 'lastName'
  | 'middleName'
  | 'gender'
  | 'birthday'
  | 'imageHash'
  | 'imageUrl'
  | 'lang'
>
declare type AnyObject = Record<string, unknown>
declare type FilterObject<T> =
  | FilterSingleObject<T>
  | TopAndOperator<T>
  | TopOrOperator<T>
  | TopNotOperator<T>
  | NoopOperator
declare type FilterSingleObject<T> = {
  [K in keyof T]?: FilterRighthand<T[K]>
}
declare type TopAndOperator<T> = {
  $and: Array<FilterObject<T>>
}
declare type TopOrOperator<T> = {
  $or: Array<FilterObject<T>>
}
declare type TopNotOperator<T> = {
  $not: FilterObject<T>
}
declare type FilterRighthand<V> =
  | null
  | V
  | Array<V>
  | Operator<V>
  | FilterSingleObject<V>
  | (V extends Date ? DateHint : never)
declare type Operator<V> =
  | GtOperator<V>
  | GteOperator<V>
  | LtOperator<V>
  | LteOperator<V>
  | HasOperator<V>
  | IncludesOperator<V>
  | NotOperator<V>
  | AndOperator<V>
  | OrOperator<V>
  | IlikeOperator<V>
  | NoopOperator
declare type GtOperator<V> = {
  $gt: V
}
declare type GteOperator<V> = {
  $gte: V
}
declare type LtOperator<V> = {
  $lt: V
}
declare type LteOperator<V> = {
  $lte: V
}
declare type IlikeOperator<V> = V extends string
  ? {
      $ilike: V
    }
  : never
declare type HasOperator<V> = {
  $has: V extends AnyObject ? keyof V : never
}
declare type IncludesOperator<V> = {
  $includes:
    | ArrayElement<V>
    | {
        $any: ArrayElement<V>[]
      }
    | {
        $all: ArrayElement<V>[]
      }
}
declare type NoopOperator = {
  $noop: unknown
}
declare type NotOperator<V> = {
  $not: FilterRighthand<V>
}
declare type AndOperator<V> = {
  $and: Array<FilterRighthand<V>>
}
declare type OrOperator<V> = {
  $or: Array<FilterRighthand<V>>
}
declare type DateHint = {
  $date: string
}
declare type ArrayElement<V> = V extends unknown[] ? V[number] : never
interface WithId {
  id: number | string
}
declare type Filter<T extends WithId> = FilterObject<T>
interface FindAllOptions<T extends WithId> {
  where?: Filter<T> | null | undefined
  limit?: number | null | undefined
  offset?: number | null | undefined
  order?: OrderByDefinition<T> | null | undefined
}
declare type CreateParticipantOptions = Partial<Pick<Participant, 'role' | 'muted' | 'data' | 'hooks'>> & {
  silent?: boolean
  inboxDisabled?: boolean
}
declare type FeedMessagesAddHandlerResult = {
  success: true
  data: {
    added: ChatMessage
  }
}
interface Change {
  id: string
  prevId?: string
  operation: ChangeOperation
  messageId: string
  message?: ChatMessage
}
declare type ChangeOperation = 'create' | 'update' | 'delete'
export declare function getFeedById(ctx: RichUgcCtx, id: UgcFeed['id']): Promise<UgcFeed>
export declare function createFeed(ctx: RichUgcCtx, feedProps?: UgcCreateFeedProps): Promise<UgcFeed>
export declare function updateFeed(ctx: RichUgcCtx, feedProps: UgcUpdateFeedProps): Promise<UgcFeed>
export declare function deleteFeed(ctx: RichUgcCtx, feedOrUid: string | UgcFeed): Promise<UgcFeed | null>
export declare function getOrCreateEntityPersonalFeed(ctx: RichUgcCtx, entityId: string): Promise<Feed>
export declare function getOrCreateHeapObjectFeed(
  ctx: RichUgcCtx,
  heapObject: Pick<HeapObjectBase, 'id' | 'heapType'>,
  data?: Partial<Feed>,
): Promise<Feed>
export declare function createOrUpdateHeapObjectFeed(
  ctx: RichUgcCtx,
  heapObject: Pick<HeapObjectBase, 'id' | 'heapType'>,
  data: Partial<Feed>,
): Promise<Feed>
export declare function getChat(
  ctx: RichUgcCtx,
  feedOrUid: string | Feed | UgcFeed,
  useAppAccountOrOptions?:
    | boolean
    | {
        useAppAccount?: boolean
        messagesGetUrl?: string
        messagesChangesUrl?: string
        messagesAddUrl?: string
      },
): Promise<ChatProps>
export declare function getOrCreateParticipant(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  participantUserOrId: UgcCtxUser1 | UgcSmartUser | HeapId,
  options?: CreateParticipantOptions,
): Promise<UgcParticipant>
export declare function createOrUpdateFeedParticipant(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  userOrId: UgcCtxUser1 | UgcSmartUser | HeapId,
  options?: CreateParticipantOptions,
): Promise<UgcParticipant>
export declare function deleteFeedParticipant(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  participantOrId: UgcParticipant | HeapId,
): Promise<void>
export declare function findFeedParticipants(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  options?: FindAllOptions<UgcParticipant>,
): Promise<UgcParticipant[]>
export declare function getFeedParticipantsCount(_: RichUgcCtx, feedOrUid: Feed | string): Promise<number>
export declare function findMessagesByExternalId(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  externalId: string,
): Promise<Message[]>
export declare function findMessagesByOriginIdType(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  originId: string | null,
  originType: string | null,
): Promise<Message[]>
export declare function findFeedMessageById(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  id: string,
): Promise<Message | null>
export declare function createFeedMessage(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  authorUserOrId: UgcCtxUser1 | UgcSmartUser | HeapId,
  message: MessageData,
  options?: CreateFeedMessageOptions,
): Promise<Message>
export declare function deleteFeedMessage(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  messageId: string,
): Promise<void>
export declare function updateFeedMessage(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  messageId: string,
  message: Partial<Message>,
): Promise<Message>
export declare function setFeedPinnedMessage(
  _ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  messageId: string | null,
): Promise<void>
export declare function feedMessagesGetHandler(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  query: Record<string, string>,
  checkAccess?: boolean,
): Promise<FeedMessagesJson>
export declare function feedMessagesChangesHandler(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  query: Record<string, string>,
): Promise<FeedChangesJson>
export declare function feedMessagesAddHandler(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  body: any,
): Promise<FeedMessagesAddHandlerResult>
export declare function feedParticipantsMarkAsReadHandler(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  userOrId: UgcCtxUser1 | UgcSmartUser | HeapId,
  body: any,
): Promise<void>
export declare function feedParticipantsLastReadHandler(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  userOrId: UgcCtxUser1 | UgcSmartUser | HeapId,
): Promise<{
  success: true
  data: {
    lastReadAt: number
  }
}>
export declare function feedParticipantsLastRead(
  ctx: RichUgcCtx,
  feedOrUid: Feed | UgcFeed | string,
  userIdOrIds: string | string[],
): Promise<number>

export { MessageData as FeedMessageData, UgcFeed as Feed, UgcParticipant as Participant }

export {}
