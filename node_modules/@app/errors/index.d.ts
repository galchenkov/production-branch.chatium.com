declare type HeapObjectType = string
declare abstract class ChatiumError extends Error {
  abstract readonly statusCode: number
  constructor(message?: string)
}
export declare class NotFoundError extends ChatiumError {
  readonly statusCode = 404
  readonly type: string | undefined
  readonly id: string | number | undefined
  constructor(msg: string)
  constructor(type: string, id: string | number)
}
declare class AccessDeniedError extends ChatiumError {
  readonly statusCode = 403
  readonly type: string | undefined
  readonly id: string | number | undefined
  readonly action: string | undefined
  readonly reason: string | undefined
  constructor(message: string)
  constructor(type: string | WithTypeField, id: string | number, action?: string, reason?: string)
}
interface WithTypeField {
  type: HeapObjectType
}
export declare class ValidationError extends ChatiumError {
  readonly data?: ValidationErrorDataFields | undefined
  readonly statusCode = 422
  constructor(reason: string, data?: ValidationErrorDataFields | undefined)
}
interface ValidationErrorDataFields {
  fields: Record<string, string>
}
export declare class AccessDeniedError extends BaseAccessDeniedError {
  readonly statusCode = 403
  constructor(message?: string)
}

export {}
