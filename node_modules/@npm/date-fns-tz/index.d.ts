type Locale = {
  code?: string
  formatDistance?: (...args: Array<any>) => any
  formatRelative?: (...args: Array<any>) => any
  localize?: {
    ordinalNumber: (...args: Array<any>) => any
    era: (...args: Array<any>) => any
    quarter: (...args: Array<any>) => any
    month: (...args: Array<any>) => any
    day: (...args: Array<any>) => any
    dayPeriod: (...args: Array<any>) => any
  }
  formatLong?: {
    date: (...args: Array<any>) => any
    time: (...args: Array<any>) => any
    dateTime: (...args: Array<any>) => any
  }
  match?: {
    ordinalNumber: (...args: Array<any>) => any
    era: (...args: Array<any>) => any
    quarter: (...args: Array<any>) => any
    month: (...args: Array<any>) => any
    day: (...args: Array<any>) => any
    dayPeriod: (...args: Array<any>) => any
  }
  options?: {
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  }
}
type LocaleAliased = Locale
type Locale = LocaleAliased
export type OptionsWithTZ = {
  weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  additionalDigits?: 0 | 1 | 2
  timeZone?: string
  locale?: Locale
  includeSeconds?: boolean
  addSuffix?: boolean
  unit?: 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year'
  roundingMethod?: 'floor' | 'ceil' | 'round'
  awareOfUnicodeTokens?: boolean
}
export function format(date: Date | string | number, format: string, options?: OptionsWithTZ): string
export namespace format {}
export function getTimezoneOffset(timeZone: string, date?: Date | number): number
export namespace getTimezoneOffset {}
export function toDate(argument: Date | string | number, options?: OptionsWithTZ): Date
export namespace toDate {}
export function utcToZonedTime(date: Date | string | number, timeZone: string, options?: OptionsWithTZ): Date
export namespace utcToZonedTime {}
export function zonedTimeToUtc(date: Date | string | number, timeZone: string, options?: OptionsWithTZ): Date
export namespace zonedTimeToUtc {}

export {}
