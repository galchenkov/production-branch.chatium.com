type Interval = {
  start: Date | number
  end: Date | number
}
type IntervalAliased = Interval
type Locale = {
  code?: string
  formatDistance?: (...args: Array<any>) => any
  formatRelative?: (...args: Array<any>) => any
  localize?: {
    ordinalNumber: (...args: Array<any>) => any
    era: (...args: Array<any>) => any
    quarter: (...args: Array<any>) => any
    month: (...args: Array<any>) => any
    day: (...args: Array<any>) => any
    dayPeriod: (...args: Array<any>) => any
  }
  formatLong?: {
    date: (...args: Array<any>) => any
    time: (...args: Array<any>) => any
    dateTime: (...args: Array<any>) => any
  }
  match?: {
    ordinalNumber: (...args: Array<any>) => any
    era: (...args: Array<any>) => any
    quarter: (...args: Array<any>) => any
    month: (...args: Array<any>) => any
    day: (...args: Array<any>) => any
    dayPeriod: (...args: Array<any>) => any
  }
  options?: {
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  }
}
type LocaleAliased = Locale
type Duration = {
  years?: number
  months?: number
  weeks?: number
  days?: number
  hours?: number
  minutes?: number
  seconds?: number
}
type DurationAliased = Duration
type Day = 0 | 1 | 2 | 3 | 4 | 5 | 6
type DayAliased = Day
export type Interval = IntervalAliased
export type Locale = LocaleAliased
export type Duration = DurationAliased
export type Day = DayAliased
export function add(date: Date | number, duration: Duration): Date
export namespace add {}
export function addBusinessDays(date: Date | number, amount: number): Date
export namespace addBusinessDays {}
export function addDays(date: Date | number, amount: number): Date
export namespace addDays {}
export function addHours(date: Date | number, amount: number): Date
export namespace addHours {}
export function addISOWeekYears(date: Date | number, amount: number): Date
export namespace addISOWeekYears {}
export function addMilliseconds(date: Date | number, amount: number): Date
export namespace addMilliseconds {}
export function addMinutes(date: Date | number, amount: number): Date
export namespace addMinutes {}
export function addMonths(date: Date | number, amount: number): Date
export namespace addMonths {}
export function addQuarters(date: Date | number, amount: number): Date
export namespace addQuarters {}
export function addSeconds(date: Date | number, amount: number): Date
export namespace addSeconds {}
export function addWeeks(date: Date | number, amount: number): Date
export namespace addWeeks {}
export function addYears(date: Date | number, amount: number): Date
export namespace addYears {}
export function areIntervalsOverlapping(
  intervalLeft: Interval,
  intervalRight: Interval,
  options?: {
    inclusive?: boolean
  },
): boolean
export namespace areIntervalsOverlapping {}
export function closestIndexTo(dateToCompare: Date | number, datesArray: (Date | number)[]): number
export namespace closestIndexTo {}
export function closestTo(dateToCompare: Date | number, datesArray: (Date | number)[]): Date
export namespace closestTo {}
export function compareAsc(dateLeft: Date | number, dateRight: Date | number): number
export namespace compareAsc {}
export function compareDesc(dateLeft: Date | number, dateRight: Date | number): number
export namespace compareDesc {}
export function daysToWeeks(days: number): number
export namespace daysToWeeks {}
export function differenceInBusinessDays(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInBusinessDays {}
export function differenceInCalendarDays(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInCalendarDays {}
export function differenceInCalendarISOWeeks(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInCalendarISOWeeks {}
export function differenceInCalendarISOWeekYears(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInCalendarISOWeekYears {}
export function differenceInCalendarMonths(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInCalendarMonths {}
export function differenceInCalendarQuarters(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInCalendarQuarters {}
export function differenceInCalendarWeeks(
  dateLeft: Date | number,
  dateRight: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): number
export namespace differenceInCalendarWeeks {}
export function differenceInCalendarYears(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInCalendarYears {}
export function differenceInDays(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInDays {}
export function differenceInHours(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInHours {}
export function differenceInISOWeekYears(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInISOWeekYears {}
export function differenceInMilliseconds(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInMilliseconds {}
export function differenceInMinutes(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInMinutes {}
export function differenceInMonths(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInMonths {}
export function differenceInQuarters(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInQuarters {}
export function differenceInSeconds(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInSeconds {}
export function differenceInWeeks(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInWeeks {}
export function differenceInYears(dateLeft: Date | number, dateRight: Date | number): number
export namespace differenceInYears {}
export function eachDayOfInterval(
  interval: Interval,
  options?: {
    step?: number
  },
): Date[]
export namespace eachDayOfInterval {}
export function eachHourOfInterval(
  interval: Interval,
  options?: {
    step?: number
  },
): Date[]
export namespace eachHourOfInterval {}
export function eachMinuteOfInterval(
  interval: Interval,
  options?: {
    step?: number
  },
): Date[]
export namespace eachMinuteOfInterval {}
export function eachMonthOfInterval(interval: Interval): Date[]
export namespace eachMonthOfInterval {}
export function eachQuarterOfInterval(interval: Interval): Date[]
export namespace eachQuarterOfInterval {}
export function eachWeekendOfInterval(interval: Interval): Date[]
export namespace eachWeekendOfInterval {}
export function eachWeekendOfMonth(date: Date | number): Date[]
export namespace eachWeekendOfMonth {}
export function eachWeekendOfYear(date: Date | number): Date[]
export namespace eachWeekendOfYear {}
export function eachWeekOfInterval(
  interval: Interval,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): Date[]
export namespace eachWeekOfInterval {}
export function eachYearOfInterval(interval: Interval): Date[]
export namespace eachYearOfInterval {}
export function endOfDay(date: Date | number): Date
export namespace endOfDay {}
export function endOfDecade(
  date: Date | number,
  options?: {
    additionalDigits?: 0 | 1 | 2
  },
): Date
export namespace endOfDecade {}
export function endOfHour(date: Date | number): Date
export namespace endOfHour {}
export function endOfISOWeek(date: Date | number): Date
export namespace endOfISOWeek {}
export function endOfISOWeekYear(date: Date | number): Date
export namespace endOfISOWeekYear {}
export function endOfMinute(date: Date | number): Date
export namespace endOfMinute {}
export function endOfMonth(date: Date | number): Date
export namespace endOfMonth {}
export function endOfQuarter(date: Date | number): Date
export namespace endOfQuarter {}
export function endOfSecond(date: Date | number): Date
export namespace endOfSecond {}
export function endOfToday(): Date
export namespace endOfToday {}
export function endOfTomorrow(): Date
export namespace endOfTomorrow {}
export function endOfWeek(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): Date
export namespace endOfWeek {}
export function endOfYear(date: Date | number): Date
export namespace endOfYear {}
export function endOfYesterday(): Date
export namespace endOfYesterday {}
export function format(
  date: Date | number,
  format: string,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: number
    useAdditionalWeekYearTokens?: boolean
    useAdditionalDayOfYearTokens?: boolean
  },
): string
export namespace format {}
export function formatDistance(
  date: Date | number,
  baseDate: Date | number,
  options?: {
    includeSeconds?: boolean
    addSuffix?: boolean
    locale?: Locale
  },
): string
export namespace formatDistance {}
export function formatDistanceStrict(
  date: Date | number,
  baseDate: Date | number,
  options?: {
    addSuffix?: boolean
    unit?: 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year'
    roundingMethod?: 'floor' | 'ceil' | 'round'
    locale?: Locale
  },
): string
export namespace formatDistanceStrict {}
export function formatDistanceToNow(
  date: Date | number,
  options?: {
    includeSeconds?: boolean
    addSuffix?: boolean
    locale?: Locale
  },
): string
export namespace formatDistanceToNow {}
export function formatDistanceToNowStrict(
  date: Date | number,
  options?: {
    addSuffix?: boolean
    unit?: 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year'
    roundingMethod?: 'floor' | 'ceil' | 'round'
    locale?: Locale
  },
): string
export namespace formatDistanceToNowStrict {}
export function formatDuration(
  duration: Duration,
  options?: {
    format?: string[]
    zero?: boolean
    delimiter?: string
    locale?: Locale
  },
): string
export namespace formatDuration {}
export function formatISO(
  date: Date | number,
  options?: {
    format?: 'extended' | 'basic'
    representation?: 'complete' | 'date' | 'time'
  },
): string
export namespace formatISO {}
export function formatISO9075(
  date: Date | number,
  options?: {
    format?: 'extended' | 'basic'
    representation?: 'complete' | 'date' | 'time'
  },
): string
export namespace formatISO9075 {}
export function formatISODuration(duration: Duration): string
export namespace formatISODuration {}
export function formatRelative(
  date: Date | number,
  baseDate: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): string
export namespace formatRelative {}
export function formatRFC3339(
  date: Date | number,
  options?: {
    fractionDigits?: 0 | 1 | 2 | 3
  },
): string
export namespace formatRFC3339 {}
export function formatRFC7231(date: Date | number): string
export namespace formatRFC7231 {}
export function fromUnixTime(unixTime: number): Date
export namespace fromUnixTime {}
export function getDate(date: Date | number): number
export namespace getDate {}
export function getDay(date: Date | number): 0 | 1 | 2 | 3 | 4 | 5 | 6
export namespace getDay {}
export function getDayOfYear(date: Date | number): number
export namespace getDayOfYear {}
export function getDaysInMonth(date: Date | number): number
export namespace getDaysInMonth {}
export function getDaysInYear(date: Date | number): number
export namespace getDaysInYear {}
export function getDecade(date: Date | number): number
export namespace getDecade {}
export function getHours(date: Date | number): number
export namespace getHours {}
export function getISODay(date: Date | number): number
export namespace getISODay {}
export function getISOWeek(date: Date | number): number
export namespace getISOWeek {}
export function getISOWeeksInYear(date: Date | number): number
export namespace getISOWeeksInYear {}
export function getISOWeekYear(date: Date | number): number
export namespace getISOWeekYear {}
export function getMilliseconds(date: Date | number): number
export namespace getMilliseconds {}
export function getMinutes(date: Date | number): number
export namespace getMinutes {}
export function getMonth(date: Date | number): number
export namespace getMonth {}
export function getOverlappingDaysInIntervals(intervalLeft: Interval, intervalRight: Interval): number
export namespace getOverlappingDaysInIntervals {}
export function getQuarter(date: Date | number): number
export namespace getQuarter {}
export function getSeconds(date: Date | number): number
export namespace getSeconds {}
export function getTime(date: Date | number): number
export namespace getTime {}
export function getUnixTime(date: Date | number): number
export namespace getUnixTime {}
export function getWeek(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  },
): number
export namespace getWeek {}
export function getWeekOfMonth(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): number
export namespace getWeekOfMonth {}
export function getWeeksInMonth(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): number
export namespace getWeeksInMonth {}
export function getWeekYear(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  },
): number
export namespace getWeekYear {}
export function getYear(date: Date | number): number
export namespace getYear {}
export function hoursToMilliseconds(hours: number): number
export namespace hoursToMilliseconds {}
export function hoursToMinutes(hours: number): number
export namespace hoursToMinutes {}
export function hoursToSeconds(hours: number): number
export namespace hoursToSeconds {}
export function intervalToDuration(interval: Interval): Duration
export namespace intervalToDuration {}
export function intlFormat(
  argument: Date | number,
  formatOptions?: {
    localeMatcher?: 'lookup' | 'best fit'
    weekday?: 'narrow' | 'short' | 'long'
    era?: 'narrow' | 'short' | 'long'
    year?: 'numeric' | '2-digit'
    month?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long'
    day?: 'numeric' | '2-digit'
    hour?: 'numeric' | '2-digit'
    minute?: 'numeric' | '2-digit'
    second?: 'numeric' | '2-digit'
    timeZoneName?: 'short' | 'long'
    formatMatcher?: 'basic' | 'best fit'
    hour12?: boolean
    timeZone?: string
  },
  localeOptions?: {
    locale?: string | string[]
  },
): string
export namespace intlFormat {}
export function isAfter(date: Date | number, dateToCompare: Date | number): boolean
export namespace isAfter {}
export function isBefore(date: Date | number, dateToCompare: Date | number): boolean
export namespace isBefore {}
export function isDate(value: any): boolean
export namespace isDate {}
export function isEqual(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isEqual {}
export function isExists(year: number, month: number, day: number): boolean
export namespace isExists {}
export function isFirstDayOfMonth(date: Date | number): boolean
export namespace isFirstDayOfMonth {}
export function isFriday(date: Date | number): boolean
export namespace isFriday {}
export function isFuture(date: Date | number): boolean
export namespace isFuture {}
export function isLastDayOfMonth(date: Date | number): boolean
export namespace isLastDayOfMonth {}
export function isLeapYear(date: Date | number): boolean
export namespace isLeapYear {}
export function isMatch(
  dateString: string,
  formatString: string,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
    useAdditionalWeekYearTokens?: boolean
    useAdditionalDayOfYearTokens?: boolean
  },
): boolean
export namespace isMatch {}
export function isMonday(date: Date | number): boolean
export namespace isMonday {}
export function isPast(date: Date | number): boolean
export namespace isPast {}
export function isSameDay(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameDay {}
export function isSameHour(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameHour {}
export function isSameISOWeek(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameISOWeek {}
export function isSameISOWeekYear(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameISOWeekYear {}
export function isSameMinute(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameMinute {}
export function isSameMonth(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameMonth {}
export function isSameQuarter(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameQuarter {}
export function isSameSecond(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameSecond {}
export function isSameWeek(
  dateLeft: Date | number,
  dateRight: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): boolean
export namespace isSameWeek {}
export function isSameYear(dateLeft: Date | number, dateRight: Date | number): boolean
export namespace isSameYear {}
export function isSaturday(date: Date | number): boolean
export namespace isSaturday {}
export function isSunday(date: Date | number): boolean
export namespace isSunday {}
export function isThisHour(date: Date | number): boolean
export namespace isThisHour {}
export function isThisISOWeek(date: Date | number): boolean
export namespace isThisISOWeek {}
export function isThisMinute(date: Date | number): boolean
export namespace isThisMinute {}
export function isThisMonth(date: Date | number): boolean
export namespace isThisMonth {}
export function isThisQuarter(date: Date | number): boolean
export namespace isThisQuarter {}
export function isThisSecond(date: Date | number): boolean
export namespace isThisSecond {}
export function isThisWeek(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): boolean
export namespace isThisWeek {}
export function isThisYear(date: Date | number): boolean
export namespace isThisYear {}
export function isThursday(date: Date | number): boolean
export namespace isThursday {}
export function isToday(date: Date | number): boolean
export namespace isToday {}
export function isTomorrow(date: Date | number): boolean
export namespace isTomorrow {}
export function isTuesday(date: Date | number): boolean
export namespace isTuesday {}
export function isValid(date: any): boolean
export namespace isValid {}
export function isWednesday(date: Date | number): boolean
export namespace isWednesday {}
export function isWeekend(date: Date | number): boolean
export namespace isWeekend {}
export function isWithinInterval(date: Date | number, interval: Interval): boolean
export namespace isWithinInterval {}
export function isYesterday(date: Date | number): boolean
export namespace isYesterday {}
export function lastDayOfDecade(date: Date | number): Date
export namespace lastDayOfDecade {}
export function lastDayOfISOWeek(date: Date | number): Date
export namespace lastDayOfISOWeek {}
export function lastDayOfISOWeekYear(date: Date | number): Date
export namespace lastDayOfISOWeekYear {}
export function lastDayOfMonth(date: Date | number): Date
export namespace lastDayOfMonth {}
export function lastDayOfQuarter(
  date: Date | number,
  options?: {
    additionalDigits?: 0 | 1 | 2
  },
): Date
export namespace lastDayOfQuarter {}
export function lastDayOfWeek(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): Date
export namespace lastDayOfWeek {}
export function lastDayOfYear(date: Date | number): Date
export namespace lastDayOfYear {}
export function lightFormat(date: Date | number, format: string): string
export namespace lightFormat {}
export function max(datesArray: (Date | number)[]): Date
export namespace max {}
export function milliseconds(duration: Duration): number
export namespace milliseconds {}
export function millisecondsToHours(milliseconds: number): number
export namespace millisecondsToHours {}
export function millisecondsToMinutes(milliseconds: number): number
export namespace millisecondsToMinutes {}
export function millisecondsToSeconds(milliseconds: number): number
export namespace millisecondsToSeconds {}
export function min(datesArray: (Date | number)[]): Date
export namespace min {}
export function minutesToHours(minutes: number): number
export namespace minutesToHours {}
export function minutesToMilliseconds(minutes: number): number
export namespace minutesToMilliseconds {}
export function minutesToSeconds(minutes: number): number
export namespace minutesToSeconds {}
export function monthsToQuarters(months: number): number
export namespace monthsToQuarters {}
export function monthsToYears(months: number): number
export namespace monthsToYears {}
export function nextDay(date: Date | number, day: Day): Date
export namespace nextDay {}
export function nextFriday(date: Date | number): Date
export namespace nextFriday {}
export function nextMonday(date: Date | number): Date
export namespace nextMonday {}
export function nextSaturday(date: Date | number): Date
export namespace nextSaturday {}
export function nextSunday(date: Date | number): Date
export namespace nextSunday {}
export function nextThursday(date: Date | number): Date
export namespace nextThursday {}
export function nextTuesday(date: Date | number): Date
export namespace nextTuesday {}
export function nextWednesday(date: Date | number): Date
export namespace nextWednesday {}
export function parse(
  dateString: string,
  formatString: string,
  referenceDate: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
    useAdditionalWeekYearTokens?: boolean
    useAdditionalDayOfYearTokens?: boolean
  },
): Date
export namespace parse {}
export function parseISO(
  argument: string,
  options?: {
    additionalDigits?: 0 | 1 | 2
  },
): Date
export namespace parseISO {}
export function parseJSON(argument: string | number | Date): Date
export namespace parseJSON {}
export function quartersToMonths(quarters: number): number
export namespace quartersToMonths {}
export function quartersToYears(quarters: number): number
export namespace quartersToYears {}
export function roundToNearestMinutes(
  date: Date | number,
  options?: {
    nearestTo?: number
  },
): Date
export namespace roundToNearestMinutes {}
export function secondsToHours(seconds: number): number
export namespace secondsToHours {}
export function secondsToMilliseconds(seconds: number): number
export namespace secondsToMilliseconds {}
export function secondsToMinutes(seconds: number): number
export namespace secondsToMinutes {}
export function set(
  date: Date | number,
  values: {
    year?: number
    month?: number
    date?: number
    hours?: number
    minutes?: number
    seconds?: number
    milliseconds?: number
  },
): Date
export namespace set {}
export function setDate(date: Date | number, dayOfMonth: number): Date
export namespace setDate {}
export function setDay(
  date: Date | number,
  day: number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): Date
export namespace setDay {}
export function setDayOfYear(date: Date | number, dayOfYear: number): Date
export namespace setDayOfYear {}
export function setHours(date: Date | number, hours: number): Date
export namespace setHours {}
export function setISODay(date: Date | number, day: number): Date
export namespace setISODay {}
export function setISOWeek(date: Date | number, isoWeek: number): Date
export namespace setISOWeek {}
export function setISOWeekYear(date: Date | number, isoWeekYear: number): Date
export namespace setISOWeekYear {}
export function setMilliseconds(date: Date | number, milliseconds: number): Date
export namespace setMilliseconds {}
export function setMinutes(date: Date | number, minutes: number): Date
export namespace setMinutes {}
export function setMonth(date: Date | number, month: number): Date
export namespace setMonth {}
export function setQuarter(date: Date | number, quarter: number): Date
export namespace setQuarter {}
export function setSeconds(date: Date | number, seconds: number): Date
export namespace setSeconds {}
export function setWeek(
  date: Date | number,
  week: number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  },
): Date
export namespace setWeek {}
export function setWeekYear(
  date: Date | number,
  weekYear: number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  },
): Date
export namespace setWeekYear {}
export function setYear(date: Date | number, year: number): Date
export namespace setYear {}
export function startOfDay(date: Date | number): Date
export namespace startOfDay {}
export function startOfDecade(date: Date | number): Date
export namespace startOfDecade {}
export function startOfHour(date: Date | number): Date
export namespace startOfHour {}
export function startOfISOWeek(date: Date | number): Date
export namespace startOfISOWeek {}
export function startOfISOWeekYear(date: Date | number): Date
export namespace startOfISOWeekYear {}
export function startOfMinute(date: Date | number): Date
export namespace startOfMinute {}
export function startOfMonth(date: Date | number): Date
export namespace startOfMonth {}
export function startOfQuarter(date: Date | number): Date
export namespace startOfQuarter {}
export function startOfSecond(date: Date | number): Date
export namespace startOfSecond {}
export function startOfToday(): Date
export namespace startOfToday {}
export function startOfTomorrow(): Date
export namespace startOfTomorrow {}
export function startOfWeek(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
  },
): Date
export namespace startOfWeek {}
export function startOfWeekYear(
  date: Date | number,
  options?: {
    locale?: Locale
    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6
    firstWeekContainsDate?: 1 | 2 | 3 | 4 | 5 | 6 | 7
  },
): Date
export namespace startOfWeekYear {}
export function startOfYear(date: Date | number): Date
export namespace startOfYear {}
export function startOfYesterday(): Date
export namespace startOfYesterday {}
export function sub(date: Date | number, duration: Duration): Date
export namespace sub {}
export function subBusinessDays(date: Date | number, amount: number): Date
export namespace subBusinessDays {}
export function subDays(date: Date | number, amount: number): Date
export namespace subDays {}
export function subHours(date: Date | number, amount: number): Date
export namespace subHours {}
export function subISOWeekYears(date: Date | number, amount: number): Date
export namespace subISOWeekYears {}
export function subMilliseconds(date: Date | number, amount: number): Date
export namespace subMilliseconds {}
export function subMinutes(date: Date | number, amount: number): Date
export namespace subMinutes {}
export function subMonths(date: Date | number, amount: number): Date
export namespace subMonths {}
export function subQuarters(date: Date | number, amount: number): Date
export namespace subQuarters {}
export function subSeconds(date: Date | number, amount: number): Date
export namespace subSeconds {}
export function subWeeks(date: Date | number, amount: number): Date
export namespace subWeeks {}
export function subYears(date: Date | number, amount: number): Date
export namespace subYears {}
export function toDate(argument: Date | number): Date
export namespace toDate {}
export function weeksToDays(weeks: number): number
export namespace weeksToDays {}
export function yearsToMonths(years: number): number
export namespace yearsToMonths {}
export function yearsToQuarters(years: number): number
export namespace yearsToQuarters {}
export const daysInWeek: number
export const maxTime: number
export const millisecondsInMinute: number
export const millisecondsInHour: number
export const millisecondsInSecond: number
export const minTime: number
export const minutesInHour: number
export const monthsInQuarter: number
export const monthsInYear: number
export const quartersInYear: number
export const secondsInHour: number
export const secondsInMinute: number

export {}
