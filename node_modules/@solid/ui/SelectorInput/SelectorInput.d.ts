import { Component, JSX } from '@app/solid-js';
export declare const SelectorInput: Component<SelectorInputProps>;
export declare const SelectorInputValue: (props: {
    item: SelectorInputItem | null | undefined;
    placeholder?: string;
}) => JSX.Element;
export declare const SelectorInputItem: (props: {
    item: SelectorInputItem;
    selected: boolean;
}) => JSX.Element;
export type SelectorInputProps = {
    id?: string;
    name?: string;
    class?: string;
    classList?: JSX.HTMLAttributes<HTMLDivElement>['classList'];
    formId?: string;
    placeholder?: string;
    clearable?: boolean;
    wrappable?: boolean;
    disabled?: boolean;
    forceLoading?: boolean;
    items?: SelectorInputItem[];
    itemsUrl?: string;
    value?: SelectorInputItem | SelectorInputItem['id'] | null;
    valueUrl?: string;
    itemComponent?: (props: {
        item: SelectorInputItem;
        selected: boolean;
    }) => any;
    valueComponent?: (props: {
        item: SelectorInputItem;
    }) => any;
    onSelect?: (item: SelectorInputItem | null) => void;
    onInput?: (item: SelectorInputItem['id'] | null) => void;
    onTextInput?: (text: string) => void;
    store?: [get: any, set: (field: string, value: string | number | null) => void];
    style?: JSX.CSSProperties | string;
    ref?: Ref<SelectorInputApi>;
};
export type SelectorInputApi = {
    element: HTMLDivElement;
    focus(): void;
    openDropdown(): void;
};
export interface SelectorInputItem {
    id: string | number;
    title: string;
}
export type Ref<T> = T extends (...args: any[]) => any ? never : T | RefFn<T>;
type RefFn<T> = (instance: T) => unknown;
export declare function provideRef<T>(ref: Ref<T> | null | undefined, instance: T): void;
export {};
