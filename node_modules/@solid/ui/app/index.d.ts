import { Confirm } from './confirm';
import type { SubmitFormAction as OriginalSubmitFormAction, ShowToastAction as OriginalShowToastAction, ShowContextMenuAction as OriginalShowContextMenuAction } from '@app/ui';
export { Confirm, };
export declare function processActions(actions: AppUiAction | AppUiAction[], event?: OriginalEvent): Promise<boolean>;
export declare function processAction(action: AppUiAction, event?: OriginalEvent): Promise<unknown>;
type OriginalEvent = SubmitEvent | MouseEvent | KeyboardEvent;
/**
 ** start apiCall ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
export declare function apiCall(url: string, apiParams?: Record<string, unknown>): ApiCallAction;
export declare function processApiCall(action: ApiCallAction, event?: OriginalEvent): Promise<boolean>;
export declare function isApiCallAction(action: any): action is ApiCallAction;
export interface ApiCallAction {
    type: 'apiCall';
    url: string;
    apiParams?: Record<string, unknown>;
    confirm?: string;
}
/**
 ** end apiCall ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
/**
 ** start submitForm ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
export declare function submitForm(props: Omit<SubmitFormAction, 'type'>): SubmitFormAction;
/** @deprecated use submitForm({ url: ... }) */
export declare function submitForm(url: string, options?: Omit<SubmitFormAction, 'type' | 'url'>): SubmitFormAction;
export declare function processSubmitForm(action: SubmitFormAction, event?: OriginalEvent): Promise<boolean>;
export declare function submitFormHandler(route: any, options?: Omit<SubmitFormAction, 'type' | 'url'>): (event: SubmitEvent) => Promise<boolean>;
export declare function isSubmitFormAction(action: any): action is SubmitFormAction;
type SubmitFormAction = OriginalSubmitFormAction & {
    onSuccess?: (data: Record<string, unknown>) => Promise<void | boolean>;
    onError?: (data: Record<string, unknown>) => Promise<void>;
};
/**
 ** end submitForm ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
/**
 ** start refresh ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
export declare function refresh(): RefreshAction;
export declare function processRefresh(action: RefreshAction): Promise<boolean>;
export declare function isRefreshAction(action: any): action is RefreshAction;
export interface RefreshAction {
    type: 'refresh';
}
/**
 ** end refresh ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
/**
 ** start navigate ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
export declare function navigate(url: string): NavigateAction;
export declare function processNavigate(action: NavigateAction): Promise<boolean>;
export declare function isNavigateAction(action: any): action is NavigateAction;
export interface NavigateAction {
    type: 'navigate';
    url: string;
}
/**
 ** end navigate ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
/**
 ** start showToast ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
export declare function showToast(toast: string, options?: Omit<ShowToastAction, 'type' | 'toast'>): ShowToastAction;
export declare function processShowToast(action: ShowToastAction): Promise<boolean>;
export declare function isShowToastAction(action: any): action is ShowToastAction;
export type ShowToastAction = OriginalShowToastAction & {
    appearance?: 'default' | 'error' | 'success';
    duration?: number;
};
/**
 ** end showToast ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
/**
 ** start showContextMenu ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
export declare function showContextMenu(menuOrProps: ShowContextMenuAction['menu'] | Omit<ShowContextMenuAction, 'type'>): ShowContextMenuAction;
export declare function processShowContextMenu(action: ShowContextMenuAction, event?: OriginalEvent): Promise<unknown>;
export declare function isShowContextMenuAction(action: any): action is ShowContextMenuAction;
export type ShowContextMenuAction = OriginalShowContextMenuAction<(event: OriginalEvent) => void>;
export interface RefreshAction {
    type: 'refresh';
}
export declare function ShowContextMenu(menu: ShowContextMenuAction['menu'], event?: OriginalEvent, point?: {
    x: number;
    y: number;
}): Promise<unknown>;
/**
 ** end showContextMenu ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 **/
export type AppUiAction = RefreshAction | NavigateAction | ShowToastAction | ApiCallAction | SubmitFormAction | ShowContextMenuAction;
